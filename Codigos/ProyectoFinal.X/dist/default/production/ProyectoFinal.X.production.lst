

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Thu Nov 18 15:47:24 2021

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    39                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    42                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    43                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    44  0000                     
    45                           ; Version 1.41
    46                           ; Generated 25/01/2017 GMT
    47                           ; 
    48                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    49                           ; All rights reserved.
    50                           ; 
    51                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    52                           ; 
    53                           ; Redistribution and use in source and binary forms, with or without modification, are
    54                           ; permitted provided that the following conditions are met:
    55                           ; 
    56                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    57                           ;        conditions and the following disclaimer.
    58                           ; 
    59                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    60                           ;        of conditions and the following disclaimer in the documentation and/or other
    61                           ;        materials provided with the distribution.
    62                           ; 
    63                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    64                           ;        software without specific prior written permission.
    65                           ; 
    66                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    67                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    68                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    69                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    70                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    71                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    72                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    73                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    74                           ; 
    75                           ; 
    76                           ; Code-generator required, PIC18F4550 Definitions
    77                           ; 
    78                           ; SFR Addresses
    79  0000                     
    80                           	psect	idataCOMRAM
    81  001402                     __pidataCOMRAM:
    82                           	opt stack 0
    83                           
    84                           ;initializer for _y
    85  001402  0001               	dw	1
    86  0000                     _PORTBbits	set	3969
    87  0000                     _PORTB	set	3969
    88  0000                     _RCREG	set	4014
    89  0000                     _ADRESL	set	4035
    90  0000                     _ADRESH	set	4036
    91  0000                     _T2CONbits	set	4042
    92  0000                     _TMR2	set	4044
    93  0000                     _ADCON0bits	set	4034
    94  0000                     _TXSTA	set	4012
    95  0000                     _RCSTA	set	4011
    96  0000                     _SPBRG	set	4015
    97  0000                     _TRISCbits	set	3988
    98  0000                     _CCP2CON	set	4026
    99  0000                     _CCPR2L	set	4027
   100  0000                     _CCP1CON	set	4029
   101  0000                     _CCPR1L	set	4030
   102  0000                     _LATC	set	3979
   103  0000                     _TRISC	set	3988
   104  0000                     _T2CON	set	4042
   105  0000                     _PR2	set	4043
   106  0000                     _LATE	set	3981
   107  0000                     _TRISE	set	3990
   108  0000                     _LATA	set	3977
   109  0000                     _TRISA	set	3986
   110  0000                     _LATB	set	3978
   111  0000                     _TRISB	set	3987
   112  0000                     _ADCON2	set	4032
   113  0000                     _ADCON1	set	4033
   114  0000                     _ADCON0	set	4034
   115  0000                     _OSCCON	set	4051
   116  0000                     _LATEbits	set	3981
   117  0000                     _LATAbits	set	3977
   118  0000                     _LATB3	set	31827
   119  0000                     _LATB2	set	31826
   120  0000                     _LATB1	set	31825
   121  0000                     _LATB0	set	31824
   122  0000                     _GO	set	32273
   123  0000                     _RBIP	set	32648
   124  0000                     _RBIF	set	32656
   125  0000                     _RBIE	set	32659
   126  0000                     _RCIP	set	31997
   127  0000                     _RCIF	set	31989
   128  0000                     _RCIE	set	31981
   129  0000                     _PEIE	set	32662
   130  0000                     _GIE	set	32663
   131                           
   132                           ; #config settings
   133  0000                     
   134                           	psect	cinit
   135  001292                     __pcinit:
   136                           	opt stack 0
   137  001292                     start_initialization:
   138                           	opt stack 0
   139  001292                     __initialization:
   140                           	opt stack 0
   141                           
   142                           ; Initialize objects allocated to COMRAM (2 bytes)
   143                           ; load TBLPTR registers with __pidataCOMRAM
   144  001292  0E02               	movlw	low __pidataCOMRAM
   145  001294  6EF6               	movwf	tblptrl,c
   146  001296  0E14               	movlw	high __pidataCOMRAM
   147  001298  6EF7               	movwf	tblptrh,c
   148  00129A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   149  00129C  6EF8               	movwf	tblptru,c
   150  00129E  0009               	tblrd		*+	;fetch initializer
   151  0012A0  CFF5 F04D          	movff	tablat,__pdataCOMRAM
   152  0012A4  0009               	tblrd		*+	;fetch initializer
   153  0012A6  CFF5 F04E          	movff	tablat,__pdataCOMRAM+1
   154                           
   155                           ; Clear objects allocated to BANK0 (23 bytes)
   156  0012AA  EE00  F060         	lfsr	0,__pbssBANK0
   157  0012AE  0E17               	movlw	23
   158  0012B0                     clear_0:
   159  0012B0  6AEE               	clrf	postinc0,c
   160  0012B2  06E8               	decf	wreg,f,c
   161  0012B4  E1FD               	bnz	clear_0
   162                           
   163                           ; Clear objects allocated to COMRAM (28 bytes)
   164  0012B6  EE00  F031         	lfsr	0,__pbssCOMRAM
   165  0012BA  0E1C               	movlw	28
   166  0012BC                     clear_1:
   167  0012BC  6AEE               	clrf	postinc0,c
   168  0012BE  06E8               	decf	wreg,f,c
   169  0012C0  E1FD               	bnz	clear_1
   170  0012C2                     end_of_initialization:
   171                           	opt stack 0
   172  0012C2                     __end_of__initialization:
   173                           	opt stack 0
   174  0012C2  904F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   175  0012C4  924F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   176  0012C6  0E00               	movlw	low (__Lmediumconst shr (0+16))
   177  0012C8  6EF8               	movwf	tblptru,c
   178  0012CA  0100               	movlb	0
   179  0012CC  EF1F  F009         	goto	_main	;jump to C main() function
   180                           tblptru	equ	0xFF8
   181                           tblptrh	equ	0xFF7
   182                           tblptrl	equ	0xFF6
   183                           tablat	equ	0xFF5
   184                           postinc0	equ	0xFEE
   185                           wreg	equ	0xFE8
   186                           
   187                           	psect	bssCOMRAM
   188  000031                     __pbssCOMRAM:
   189                           	opt stack 0
   190  000031                     _b:
   191                           	opt stack 0
   192  000031                     	ds	3
   193  000034                     _conversion2:
   194                           	opt stack 0
   195  000034                     	ds	3
   196  000037                     _conversion1:
   197                           	opt stack 0
   198  000037                     	ds	3
   199  00003A                     _a:
   200                           	opt stack 0
   201  00003A                     	ds	2
   202  00003C                     _PWM:
   203                           	opt stack 0
   204  00003C                     	ds	2
   205  00003E                     _modo:
   206                           	opt stack 0
   207  00003E                     	ds	2
   208  000040                     _x:
   209                           	opt stack 0
   210  000040                     	ds	2
   211  000042                     _i:
   212                           	opt stack 0
   213  000042                     	ds	2
   214  000044                     _c:
   215                           	opt stack 0
   216  000044                     	ds	3
   217  000047                     _duty_cicle2:
   218                           	opt stack 0
   219  000047                     	ds	3
   220  00004A                     _duty_cicle1:
   221                           	opt stack 0
   222  00004A                     	ds	3
   223                           tblptru	equ	0xFF8
   224                           tblptrh	equ	0xFF7
   225                           tblptrl	equ	0xFF6
   226                           tablat	equ	0xFF5
   227                           postinc0	equ	0xFEE
   228                           wreg	equ	0xFE8
   229                           
   230                           	psect	dataCOMRAM
   231  00004D                     __pdataCOMRAM:
   232                           	opt stack 0
   233  00004D                     _y:
   234                           	opt stack 0
   235  00004D                     	ds	2
   236                           tblptru	equ	0xFF8
   237                           tblptrh	equ	0xFF7
   238                           tblptrl	equ	0xFF6
   239                           tablat	equ	0xFF5
   240                           postinc0	equ	0xFEE
   241                           wreg	equ	0xFE8
   242                           
   243                           	psect	bssBANK0
   244  000060                     __pbssBANK0:
   245                           	opt stack 0
   246  000060                     _d2:
   247                           	opt stack 0
   248  000060                     	ds	3
   249  000063                     _d1:
   250                           	opt stack 0
   251  000063                     	ds	3
   252  000066                     _ciclo_util2:
   253                           	opt stack 0
   254  000066                     	ds	3
   255  000069                     _ciclo_util1:
   256                           	opt stack 0
   257  000069                     	ds	3
   258  00006C                     _conversion3:
   259                           	opt stack 0
   260  00006C                     	ds	3
   261  00006F                     _n:
   262                           	opt stack 0
   263  00006F                     	ds	2
   264  000071                     _s:
   265                           	opt stack 0
   266  000071                     	ds	2
   267  000073                     _z:
   268                           	opt stack 0
   269  000073                     	ds	2
   270  000075                     _mood:
   271                           	opt stack 0
   272  000075                     	ds	2
   273                           tblptru	equ	0xFF8
   274                           tblptrh	equ	0xFF7
   275                           tblptrl	equ	0xFF6
   276                           tablat	equ	0xFF5
   277                           postinc0	equ	0xFEE
   278                           wreg	equ	0xFE8
   279                           
   280                           	psect	cstackBANK0
   281  000077                     __pcstackBANK0:
   282                           	opt stack 0
   283  000077                     ??___ftadd:
   284                           
   285                           ; 1 bytes @ 0x0
   286  000077                     	ds	3
   287  00007A                     ___ftadd@sign:
   288                           	opt stack 0
   289                           
   290                           ; 1 bytes @ 0x3
   291  00007A                     	ds	1
   292  00007B                     ___ftadd@exp2:
   293                           	opt stack 0
   294                           
   295                           ; 1 bytes @ 0x4
   296  00007B                     	ds	1
   297  00007C                     ___ftadd@exp1:
   298                           	opt stack 0
   299                           
   300                           ; 1 bytes @ 0x5
   301  00007C                     	ds	1
   302  00007D                     ??_start:
   303  00007D                     ??_start1:
   304                           
   305                           ; 1 bytes @ 0x6
   306  00007D                     	ds	2
   307  00007F                     _start$975:
   308                           	opt stack 0
   309  00007F                     _start1$977:
   310                           	opt stack 0
   311                           
   312                           ; 3 bytes @ 0x8
   313  00007F                     	ds	3
   314  000082                     _start$976:
   315                           	opt stack 0
   316  000082                     _start1$978:
   317                           	opt stack 0
   318                           
   319                           ; 3 bytes @ 0xB
   320  000082                     	ds	3
   321  000085                     ??_main:
   322                           
   323                           ; 1 bytes @ 0xE
   324  000085                     	ds	2
   325                           tblptru	equ	0xFF8
   326                           tblptrh	equ	0xFF7
   327                           tblptrl	equ	0xFF6
   328                           tablat	equ	0xFF5
   329                           postinc0	equ	0xFEE
   330                           wreg	equ	0xFE8
   331                           
   332                           	psect	cstackCOMRAM
   333  000001                     __pcstackCOMRAM:
   334                           	opt stack 0
   335  000001                     ??_UART_Rx:
   336  000001                     
   337                           ; 1 bytes @ 0x0
   338  000001                     	ds	15
   339  000010                     ?___ftpack:
   340                           	opt stack 0
   341  000010                     ?___fttol:
   342                           	opt stack 0
   343  000010                     ___ftpack@arg:
   344                           	opt stack 0
   345  000010                     ___ftge@ff1:
   346                           	opt stack 0
   347  000010                     ___fttol@f1:
   348                           	opt stack 0
   349                           
   350                           ; 3 bytes @ 0xF
   351  000010                     	ds	3
   352  000013                     ___ftpack@exp:
   353                           	opt stack 0
   354  000013                     ___ftge@ff2:
   355                           	opt stack 0
   356                           
   357                           ; 3 bytes @ 0x12
   358  000013                     	ds	1
   359  000014                     ??___fttol:
   360  000014                     ___ftpack@sign:
   361                           	opt stack 0
   362                           
   363                           ; 1 bytes @ 0x13
   364  000014                     	ds	1
   365  000015                     ??___ftpack:
   366                           
   367                           ; 1 bytes @ 0x14
   368  000015                     	ds	1
   369  000016                     ??___ftge:
   370                           
   371                           ; 1 bytes @ 0x15
   372  000016                     	ds	2
   373  000018                     ?___awtoft:
   374                           	opt stack 0
   375  000018                     ___awtoft@c:
   376                           	opt stack 0
   377                           
   378                           ; 2 bytes @ 0x17
   379  000018                     	ds	1
   380  000019                     ___fttol@sign1:
   381                           	opt stack 0
   382                           
   383                           ; 1 bytes @ 0x18
   384  000019                     	ds	1
   385  00001A                     ___fttol@lval:
   386                           	opt stack 0
   387                           
   388                           ; 4 bytes @ 0x19
   389  00001A                     	ds	1
   390  00001B                     ___awtoft@sign:
   391                           	opt stack 0
   392                           
   393                           ; 1 bytes @ 0x1A
   394  00001B                     	ds	1
   395  00001C                     ?___ftmul:
   396                           	opt stack 0
   397  00001C                     ___ftmul@f1:
   398                           	opt stack 0
   399                           
   400                           ; 3 bytes @ 0x1B
   401  00001C                     	ds	2
   402  00001E                     ___fttol@exp1:
   403                           	opt stack 0
   404                           
   405                           ; 1 bytes @ 0x1D
   406  00001E                     	ds	1
   407  00001F                     ___ftmul@f2:
   408                           	opt stack 0
   409                           
   410                           ; 3 bytes @ 0x1E
   411  00001F                     	ds	3
   412  000022                     ??___ftmul:
   413                           
   414                           ; 1 bytes @ 0x21
   415  000022                     	ds	3
   416  000025                     ___ftmul@exp:
   417                           	opt stack 0
   418                           
   419                           ; 1 bytes @ 0x24
   420  000025                     	ds	1
   421  000026                     ___ftmul@f3_as_product:
   422                           	opt stack 0
   423                           
   424                           ; 3 bytes @ 0x25
   425  000026                     	ds	3
   426  000029                     ___ftmul@cntr:
   427                           	opt stack 0
   428                           
   429                           ; 1 bytes @ 0x28
   430  000029                     	ds	1
   431  00002A                     ___ftmul@sign:
   432                           	opt stack 0
   433                           
   434                           ; 1 bytes @ 0x29
   435  00002A                     	ds	1
   436  00002B                     ??_adelante:
   437  00002B                     ??_atras:
   438  00002B                     ??_start2:
   439  00002B                     ?___ftadd:
   440                           	opt stack 0
   441  00002B                     ___ftadd@f1:
   442                           	opt stack 0
   443                           
   444                           ; 3 bytes @ 0x2A
   445  00002B                     	ds	2
   446  00002D                     ??_automatico:
   447                           
   448                           ; 1 bytes @ 0x2C
   449  00002D                     	ds	1
   450  00002E                     ___ftadd@f2:
   451                           	opt stack 0
   452                           
   453                           ; 3 bytes @ 0x2D
   454  00002E                     	ds	3
   455  000031                     tblptru	equ	0xFF8
   456                           tblptrh	equ	0xFF7
   457                           tblptrl	equ	0xFF6
   458                           tablat	equ	0xFF5
   459                           postinc0	equ	0xFEE
   460                           wreg	equ	0xFE8
   461                           
   462                           ; 1 bytes @ 0x30
   463 ;;
   464 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   465 ;;
   466 ;; *************** function _main *****************
   467 ;; Defined at:
   468 ;;		line 57 in file "main.c"
   469 ;; Parameters:    Size  Location     Type
   470 ;;		None
   471 ;; Auto vars:     Size  Location     Type
   472 ;;		None
   473 ;; Return value:  Size  Location     Type
   474 ;;                  1    wreg      void 
   475 ;; Registers used:
   476 ;;		wreg, status,2, status,0, cstack
   477 ;; Tracked objects:
   478 ;;		On entry : 0/0
   479 ;;		On exit  : 0/0
   480 ;;		Unchanged: 0/0
   481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   482 ;;      Params:         0       0       0       0       0       0       0       0       0
   483 ;;      Locals:         0       0       0       0       0       0       0       0       0
   484 ;;      Temps:          0       2       0       0       0       0       0       0       0
   485 ;;      Totals:         0       2       0       0       0       0       0       0       0
   486 ;;Total ram usage:        2 bytes
   487 ;; Hardware stack levels required when called:    7
   488 ;; This function calls:
   489 ;;		_automatico
   490 ;;		_manual
   491 ;;		_settings
   492 ;;		_start
   493 ;;		_start1
   494 ;; This function is called by:
   495 ;;		Startup code after reset
   496 ;; This function uses a non-reentrant model
   497 ;;
   498                           
   499                           	psect	text0
   500  00123E                     __ptext0:
   501                           	opt stack 0
   502  00123E                     _main:
   503                           	opt stack 24
   504                           
   505                           ;main.c: 58: settings();
   506                           
   507                           ;incstack = 0
   508  00123E  EC57  F008         	call	_settings	;wreg free
   509                           
   510                           ;main.c: 62: switch (mood) {
   511                           
   512                           ;main.c: 59: while (1) {
   513  001242  D010               	goto	l2999
   514  001244                     l169:
   515                           
   516                           ; BSR set to: 0
   517                           ;main.c: 64: LATAbits.LA5 = 0;
   518  001244  9A89               	bcf	3977,5,c	;volatile
   519                           
   520                           ;main.c: 65: LATEbits.LATE0 = 1;
   521  001246  808D               	bsf	3981,0,c	;volatile
   522                           
   523                           ; BSR set to: 0
   524                           ;main.c: 66: manual();
   525  001248  EC38  F002         	call	_manual	;wreg free
   526                           
   527                           ;main.c: 67: break;
   528  00124C  D01D               	goto	l3001
   529  00124E                     l171:
   530                           
   531                           ; BSR set to: 0
   532                           ;main.c: 69: LATAbits.LA5 = 1;
   533  00124E  8A89               	bsf	3977,5,c	;volatile
   534                           
   535                           ;main.c: 70: LATEbits.LATE0 = 0;
   536  001250  908D               	bcf	3981,0,c	;volatile
   537                           
   538                           ; BSR set to: 0
   539                           ;main.c: 71: automatico();
   540  001252  EC09  F000         	call	_automatico	;wreg free
   541                           
   542                           ;main.c: 72: break;
   543  001256  D018               	goto	l3001
   544  001258                     l2997:
   545                           
   546                           ;main.c: 74: mood = 0;
   547  001258  0E00               	movlw	0
   548  00125A  0100               	movlb	0	; () banked
   549  00125C  6F76               	movwf	(_mood+1)& (0+255),b
   550  00125E  0E00               	movlw	0
   551  001260  6F75               	movwf	_mood& (0+255),b
   552                           
   553                           ;main.c: 75: }
   554  001262  D012               	goto	l3001
   555  001264                     l2999:
   556  001264  C075  F085         	movff	_mood,??_main
   557  001268  C076  F086         	movff	_mood+1,??_main+1
   558                           
   559                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   560                           ; Switch size 1, requested type "space"
   561                           ; Number of cases is 1, Range of values is 0 to 0
   562                           ; switch strategies available:
   563                           ; Name         Instructions Cycles
   564                           ; simple_byte            4     3 (average)
   565                           ;	Chosen strategy is simple_byte
   566  00126C  0100               	movlb	0	; () banked
   567  00126E  5186               	movf	(??_main+1)& (0+255),w,b
   568  001270  0A00               	xorlw	0	; case 0
   569  001272  A4D8               	btfss	status,2,c
   570  001274  D7F1               	goto	l2997
   571                           
   572                           ; BSR set to: 0
   573                           ; Switch size 1, requested type "space"
   574                           ; Number of cases is 2, Range of values is 1 to 2
   575                           ; switch strategies available:
   576                           ; Name         Instructions Cycles
   577                           ; simple_byte            7     4 (average)
   578                           ;	Chosen strategy is simple_byte
   579  001276  0100               	movlb	0	; () banked
   580  001278  5185               	movf	??_main& (0+255),w,b
   581  00127A  0A01               	xorlw	1	; case 1
   582  00127C  B4D8               	btfsc	status,2,c
   583  00127E  D7E2               	goto	l169
   584  001280  0A03               	xorlw	3	; case 2
   585  001282  B4D8               	btfsc	status,2,c
   586  001284  D7E4               	goto	l171
   587  001286  D7E8               	goto	l2997
   588  001288                     l3001:
   589                           
   590                           ;main.c: 80: start();
   591  001288  EC9C  F004         	call	_start	;wreg free
   592                           
   593                           ;main.c: 81: start1();
   594  00128C  EC01  F004         	call	_start1	;wreg free
   595  001290  D7E9               	goto	l2999
   596  001292                     __end_of_main:
   597                           	opt stack 0
   598                           tblptru	equ	0xFF8
   599                           tblptrh	equ	0xFF7
   600                           tblptrl	equ	0xFF6
   601                           tablat	equ	0xFF5
   602                           postinc0	equ	0xFEE
   603                           wreg	equ	0xFE8
   604                           status	equ	0xFD8
   605                           
   606 ;; *************** function _start1 *****************
   607 ;; Defined at:
   608 ;;		line 148 in file "main.c"
   609 ;; Parameters:    Size  Location     Type
   610 ;;		None
   611 ;; Auto vars:     Size  Location     Type
   612 ;;		None
   613 ;; Return value:  Size  Location     Type
   614 ;;                  1    wreg      void 
   615 ;; Registers used:
   616 ;;		wreg, status,2, status,0, cstack
   617 ;; Tracked objects:
   618 ;;		On entry : 0/0
   619 ;;		On exit  : 0/0
   620 ;;		Unchanged: 0/0
   621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   622 ;;      Params:         0       0       0       0       0       0       0       0       0
   623 ;;      Locals:         0       6       0       0       0       0       0       0       0
   624 ;;      Temps:          0       2       0       0       0       0       0       0       0
   625 ;;      Totals:         0       8       0       0       0       0       0       0       0
   626 ;;Total ram usage:        8 bytes
   627 ;; Hardware stack levels used:    1
   628 ;; Hardware stack levels required when called:    4
   629 ;; This function calls:
   630 ;;		___awtoft
   631 ;;		___ftadd
   632 ;;		___ftmul
   633 ;; This function is called by:
   634 ;;		_main
   635 ;; This function uses a non-reentrant model
   636 ;;
   637                           
   638                           	psect	text1
   639  000802                     __ptext1:
   640                           	opt stack 0
   641  000802                     _start1:
   642                           	opt stack 26
   643                           
   644                           ;main.c: 149: ADCON0bits.GO = 1;
   645                           
   646                           ;incstack = 0
   647  000802  82C2               	bsf	4034,1,c	;volatile
   648  000804                     l188:
   649  000804  B2C2               	btfsc	4034,1,c	;volatile
   650  000806  D7FE               	goto	l188
   651                           
   652                           ;main.c: 151: if (x == 1) {
   653  000808  0440               	decf	_x,w,c
   654  00080A  1041               	iorwf	_x+1,w,c
   655  00080C  A4D8               	btfss	status,2,c
   656  00080E  0012               	return	
   657                           
   658                           ;main.c: 152: _delay((unsigned long)((10)*(8000000/4000.0)));
   659  000810  0E1A               	movlw	26
   660  000812  0100               	movlb	0	; () banked
   661  000814  6F7D               	movwf	??_start1& (0+255),b
   662  000816  0EF8               	movlw	248
   663  000818                     u2907:
   664  000818  2EE8               	decfsz	wreg,f,c
   665  00081A  D7FE               	bra	u2907
   666  00081C  2F7D               	decfsz	??_start1& (0+255),f,b
   667  00081E  D7FC               	bra	u2907
   668  000820  F000               	nop	
   669                           
   670                           ;main.c: 153: a = ADRESH << 8 | ADRESL;
   671  000822  50C3               	movf	4035,w,c	;volatile
   672  000824  CFC4 F07D          	movff	4036,??_start1	;volatile
   673  000828  0100               	movlb	0	; () banked
   674  00082A  6B7E               	clrf	(??_start1+1)& (0+255),b
   675  00082C  C07D  F07E         	movff	??_start1,??_start1+1
   676  000830  0100               	movlb	0	; () banked
   677  000832  6B7D               	clrf	??_start1& (0+255),b
   678  000834  0100               	movlb	0	; () banked
   679  000836  117D               	iorwf	??_start1& (0+255),w,b
   680  000838  6E3A               	movwf	_a,c
   681  00083A  0100               	movlb	0	; () banked
   682  00083C  517E               	movf	(??_start1+1)& (0+255),w,b
   683  00083E  6E3B               	movwf	_a+1,c
   684                           
   685                           ; BSR set to: 0
   686                           ;main.c: 154: c = (float) a * (5.0 / 1023.0);
   687  000840  C03A  F018         	movff	_a,___awtoft@c
   688  000844  C03B  F019         	movff	_a+1,___awtoft@c+1
   689  000848  ECA2  F009         	call	___awtoft	;wreg free
   690  00084C  C018  F01C         	movff	?___awtoft,___ftmul@f1
   691  000850  C019  F01D         	movff	?___awtoft+1,___ftmul@f1+1
   692  000854  C01A  F01E         	movff	?___awtoft+2,___ftmul@f1+2
   693  000858  0E28               	movlw	40
   694  00085A  6E1F               	movwf	___ftmul@f2,c
   695  00085C  0EA0               	movlw	160
   696  00085E  6E20               	movwf	___ftmul@f2+1,c
   697  000860  0E3B               	movlw	59
   698  000862  6E21               	movwf	___ftmul@f2+2,c
   699  000864  ECD5  F006         	call	___ftmul	;wreg free
   700  000868  C01C  F044         	movff	?___ftmul,_c
   701  00086C  C01D  F045         	movff	?___ftmul+1,_c+1
   702  000870  C01E  F046         	movff	?___ftmul+2,_c+2
   703                           
   704                           ;main.c: 155: d2 = ((0.286 * (c * c))+(0.602 * c)-(0.1415));
   705  000874  C044  F01F         	movff	_c,___ftmul@f2
   706  000878  C045  F020         	movff	_c+1,___ftmul@f2+1
   707  00087C  C046  F021         	movff	_c+2,___ftmul@f2+2
   708  000880  C044  F01C         	movff	_c,___ftmul@f1
   709  000884  C045  F01D         	movff	_c+1,___ftmul@f1+1
   710  000888  C046  F01E         	movff	_c+2,___ftmul@f1+2
   711  00088C  ECD5  F006         	call	___ftmul	;wreg free
   712  000890  C01C  F07F         	movff	?___ftmul,_start1$977
   713  000894  C01D  F080         	movff	?___ftmul+1,_start1$977+1
   714  000898  C01E  F081         	movff	?___ftmul+2,_start1$977+2
   715                           
   716                           ;main.c: 155: d2 = ((0.286 * (c * c))+(0.602 * c)-(0.1415));
   717  00089C  0E1D               	movlw	29
   718  00089E  6E1F               	movwf	___ftmul@f2,c
   719  0008A0  0E1A               	movlw	26
   720  0008A2  6E20               	movwf	___ftmul@f2+1,c
   721  0008A4  0E3F               	movlw	63
   722  0008A6  6E21               	movwf	___ftmul@f2+2,c
   723  0008A8  C044  F01C         	movff	_c,___ftmul@f1
   724  0008AC  C045  F01D         	movff	_c+1,___ftmul@f1+1
   725  0008B0  C046  F01E         	movff	_c+2,___ftmul@f1+2
   726  0008B4  ECD5  F006         	call	___ftmul	;wreg free
   727  0008B8  C01C  F02E         	movff	?___ftmul,___ftadd@f2
   728  0008BC  C01D  F02F         	movff	?___ftmul+1,___ftadd@f2+1
   729  0008C0  C01E  F030         	movff	?___ftmul+2,___ftadd@f2+2
   730  0008C4  0E6F               	movlw	111
   731  0008C6  6E1F               	movwf	___ftmul@f2,c
   732  0008C8  0E92               	movlw	146
   733  0008CA  6E20               	movwf	___ftmul@f2+1,c
   734  0008CC  0E3E               	movlw	62
   735  0008CE  6E21               	movwf	___ftmul@f2+2,c
   736  0008D0  C07F  F01C         	movff	_start1$977,___ftmul@f1
   737  0008D4  C080  F01D         	movff	_start1$977+1,___ftmul@f1+1
   738  0008D8  C081  F01E         	movff	_start1$977+2,___ftmul@f1+2
   739  0008DC  ECD5  F006         	call	___ftmul	;wreg free
   740  0008E0  C01C  F02B         	movff	?___ftmul,___ftadd@f1
   741  0008E4  C01D  F02C         	movff	?___ftmul+1,___ftadd@f1+1
   742  0008E8  C01E  F02D         	movff	?___ftmul+2,___ftadd@f1+2
   743  0008EC  EC2D  F001         	call	___ftadd	;wreg free
   744  0008F0  C02B  F082         	movff	?___ftadd,_start1$978
   745  0008F4  C02C  F083         	movff	?___ftadd+1,_start1$978+1
   746  0008F8  C02D  F084         	movff	?___ftadd+2,_start1$978+2
   747                           
   748                           ;main.c: 155: d2 = ((0.286 * (c * c))+(0.602 * c)-(0.1415));
   749  0008FC  C082  F02B         	movff	_start1$978,___ftadd@f1
   750  000900  C083  F02C         	movff	_start1$978+1,___ftadd@f1+1
   751  000904  C084  F02D         	movff	_start1$978+2,___ftadd@f1+2
   752  000908  0EE5               	movlw	229
   753  00090A  6E2E               	movwf	___ftadd@f2,c
   754  00090C  0E10               	movlw	16
   755  00090E  6E2F               	movwf	___ftadd@f2+1,c
   756  000910  0EBE               	movlw	190
   757  000912  6E30               	movwf	___ftadd@f2+2,c
   758  000914  EC2D  F001         	call	___ftadd	;wreg free
   759  000918  C02B  F060         	movff	?___ftadd,_d2
   760  00091C  C02C  F061         	movff	?___ftadd+1,_d2+1
   761  000920  C02D  F062         	movff	?___ftadd+2,_d2+2
   762                           
   763                           ;main.c: 156: _delay((unsigned long)((3)*(8000000/4000000.0)));
   764  000924  D000               	nop2		;2 cycle nop
   765  000926  D000               	nop2		;2 cycle nop
   766  000928  D000               	nop2		;2 cycle nop
   767                           
   768                           ;main.c: 157: ADCON0 = 0x09;
   769  00092A  0E09               	movlw	9
   770  00092C  6EC2               	movwf	4034,c	;volatile
   771                           
   772                           ;main.c: 158: x = 2;
   773  00092E  0E00               	movlw	0
   774  000930  6E41               	movwf	_x+1,c
   775  000932  0E02               	movlw	2
   776  000934  6E40               	movwf	_x,c
   777  000936  0012               	return	
   778  000938                     __end_of_start1:
   779                           	opt stack 0
   780                           tblptru	equ	0xFF8
   781                           tblptrh	equ	0xFF7
   782                           tblptrl	equ	0xFF6
   783                           tablat	equ	0xFF5
   784                           postinc0	equ	0xFEE
   785                           wreg	equ	0xFE8
   786                           status	equ	0xFD8
   787                           
   788 ;; *************** function _start *****************
   789 ;; Defined at:
   790 ;;		line 134 in file "main.c"
   791 ;; Parameters:    Size  Location     Type
   792 ;;		None
   793 ;; Auto vars:     Size  Location     Type
   794 ;;		None
   795 ;; Return value:  Size  Location     Type
   796 ;;                  1    wreg      void 
   797 ;; Registers used:
   798 ;;		wreg, status,2, status,0, cstack
   799 ;; Tracked objects:
   800 ;;		On entry : 0/0
   801 ;;		On exit  : 0/0
   802 ;;		Unchanged: 0/0
   803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   804 ;;      Params:         0       0       0       0       0       0       0       0       0
   805 ;;      Locals:         0       6       0       0       0       0       0       0       0
   806 ;;      Temps:          0       2       0       0       0       0       0       0       0
   807 ;;      Totals:         0       8       0       0       0       0       0       0       0
   808 ;;Total ram usage:        8 bytes
   809 ;; Hardware stack levels used:    1
   810 ;; Hardware stack levels required when called:    4
   811 ;; This function calls:
   812 ;;		___awtoft
   813 ;;		___ftadd
   814 ;;		___ftmul
   815 ;; This function is called by:
   816 ;;		_main
   817 ;; This function uses a non-reentrant model
   818 ;;
   819                           
   820                           	psect	text2
   821  000938                     __ptext2:
   822                           	opt stack 0
   823  000938                     _start:
   824                           	opt stack 26
   825                           
   826                           ;main.c: 135: ADCON0bits.GO = 1;
   827                           
   828                           ;incstack = 0
   829  000938  82C2               	bsf	4034,1,c	;volatile
   830  00093A                     l181:
   831  00093A  B2C2               	btfsc	4034,1,c	;volatile
   832  00093C  D7FE               	goto	l181
   833                           
   834                           ;main.c: 137: if (x == 0) {
   835  00093E  5040               	movf	_x,w,c
   836  000940  1041               	iorwf	_x+1,w,c
   837  000942  A4D8               	btfss	status,2,c
   838  000944  0012               	return	
   839                           
   840                           ;main.c: 138: _delay((unsigned long)((10)*(8000000/4000.0)));
   841  000946  0E1A               	movlw	26
   842  000948  0100               	movlb	0	; () banked
   843  00094A  6F7D               	movwf	??_start& (0+255),b
   844  00094C  0EF8               	movlw	248
   845  00094E                     u2917:
   846  00094E  2EE8               	decfsz	wreg,f,c
   847  000950  D7FE               	bra	u2917
   848  000952  2F7D               	decfsz	??_start& (0+255),f,b
   849  000954  D7FC               	bra	u2917
   850  000956  F000               	nop	
   851                           
   852                           ;main.c: 139: a = ADRESH << 8 | ADRESL;
   853  000958  50C3               	movf	4035,w,c	;volatile
   854  00095A  CFC4 F07D          	movff	4036,??_start	;volatile
   855  00095E  0100               	movlb	0	; () banked
   856  000960  6B7E               	clrf	(??_start+1)& (0+255),b
   857  000962  C07D  F07E         	movff	??_start,??_start+1
   858  000966  0100               	movlb	0	; () banked
   859  000968  6B7D               	clrf	??_start& (0+255),b
   860  00096A  0100               	movlb	0	; () banked
   861  00096C  117D               	iorwf	??_start& (0+255),w,b
   862  00096E  6E3A               	movwf	_a,c
   863  000970  0100               	movlb	0	; () banked
   864  000972  517E               	movf	(??_start+1)& (0+255),w,b
   865  000974  6E3B               	movwf	_a+1,c
   866                           
   867                           ; BSR set to: 0
   868                           ;main.c: 140: c = (float) a * (5.0 / 1023.0);
   869  000976  C03A  F018         	movff	_a,___awtoft@c
   870  00097A  C03B  F019         	movff	_a+1,___awtoft@c+1
   871  00097E  ECA2  F009         	call	___awtoft	;wreg free
   872  000982  C018  F01C         	movff	?___awtoft,___ftmul@f1
   873  000986  C019  F01D         	movff	?___awtoft+1,___ftmul@f1+1
   874  00098A  C01A  F01E         	movff	?___awtoft+2,___ftmul@f1+2
   875  00098E  0E28               	movlw	40
   876  000990  6E1F               	movwf	___ftmul@f2,c
   877  000992  0EA0               	movlw	160
   878  000994  6E20               	movwf	___ftmul@f2+1,c
   879  000996  0E3B               	movlw	59
   880  000998  6E21               	movwf	___ftmul@f2+2,c
   881  00099A  ECD5  F006         	call	___ftmul	;wreg free
   882  00099E  C01C  F044         	movff	?___ftmul,_c
   883  0009A2  C01D  F045         	movff	?___ftmul+1,_c+1
   884  0009A6  C01E  F046         	movff	?___ftmul+2,_c+2
   885                           
   886                           ;main.c: 141: d1 = ((0.286 * (c * c))+(0.602 * c)-(0.1415));
   887  0009AA  C044  F01F         	movff	_c,___ftmul@f2
   888  0009AE  C045  F020         	movff	_c+1,___ftmul@f2+1
   889  0009B2  C046  F021         	movff	_c+2,___ftmul@f2+2
   890  0009B6  C044  F01C         	movff	_c,___ftmul@f1
   891  0009BA  C045  F01D         	movff	_c+1,___ftmul@f1+1
   892  0009BE  C046  F01E         	movff	_c+2,___ftmul@f1+2
   893  0009C2  ECD5  F006         	call	___ftmul	;wreg free
   894  0009C6  C01C  F07F         	movff	?___ftmul,_start$975
   895  0009CA  C01D  F080         	movff	?___ftmul+1,_start$975+1
   896  0009CE  C01E  F081         	movff	?___ftmul+2,_start$975+2
   897                           
   898                           ;main.c: 141: d1 = ((0.286 * (c * c))+(0.602 * c)-(0.1415));
   899  0009D2  0E1D               	movlw	29
   900  0009D4  6E1F               	movwf	___ftmul@f2,c
   901  0009D6  0E1A               	movlw	26
   902  0009D8  6E20               	movwf	___ftmul@f2+1,c
   903  0009DA  0E3F               	movlw	63
   904  0009DC  6E21               	movwf	___ftmul@f2+2,c
   905  0009DE  C044  F01C         	movff	_c,___ftmul@f1
   906  0009E2  C045  F01D         	movff	_c+1,___ftmul@f1+1
   907  0009E6  C046  F01E         	movff	_c+2,___ftmul@f1+2
   908  0009EA  ECD5  F006         	call	___ftmul	;wreg free
   909  0009EE  C01C  F02E         	movff	?___ftmul,___ftadd@f2
   910  0009F2  C01D  F02F         	movff	?___ftmul+1,___ftadd@f2+1
   911  0009F6  C01E  F030         	movff	?___ftmul+2,___ftadd@f2+2
   912  0009FA  0E6F               	movlw	111
   913  0009FC  6E1F               	movwf	___ftmul@f2,c
   914  0009FE  0E92               	movlw	146
   915  000A00  6E20               	movwf	___ftmul@f2+1,c
   916  000A02  0E3E               	movlw	62
   917  000A04  6E21               	movwf	___ftmul@f2+2,c
   918  000A06  C07F  F01C         	movff	_start$975,___ftmul@f1
   919  000A0A  C080  F01D         	movff	_start$975+1,___ftmul@f1+1
   920  000A0E  C081  F01E         	movff	_start$975+2,___ftmul@f1+2
   921  000A12  ECD5  F006         	call	___ftmul	;wreg free
   922  000A16  C01C  F02B         	movff	?___ftmul,___ftadd@f1
   923  000A1A  C01D  F02C         	movff	?___ftmul+1,___ftadd@f1+1
   924  000A1E  C01E  F02D         	movff	?___ftmul+2,___ftadd@f1+2
   925  000A22  EC2D  F001         	call	___ftadd	;wreg free
   926  000A26  C02B  F082         	movff	?___ftadd,_start$976
   927  000A2A  C02C  F083         	movff	?___ftadd+1,_start$976+1
   928  000A2E  C02D  F084         	movff	?___ftadd+2,_start$976+2
   929                           
   930                           ;main.c: 141: d1 = ((0.286 * (c * c))+(0.602 * c)-(0.1415));
   931  000A32  C082  F02B         	movff	_start$976,___ftadd@f1
   932  000A36  C083  F02C         	movff	_start$976+1,___ftadd@f1+1
   933  000A3A  C084  F02D         	movff	_start$976+2,___ftadd@f1+2
   934  000A3E  0EE5               	movlw	229
   935  000A40  6E2E               	movwf	___ftadd@f2,c
   936  000A42  0E10               	movlw	16
   937  000A44  6E2F               	movwf	___ftadd@f2+1,c
   938  000A46  0EBE               	movlw	190
   939  000A48  6E30               	movwf	___ftadd@f2+2,c
   940  000A4A  EC2D  F001         	call	___ftadd	;wreg free
   941  000A4E  C02B  F063         	movff	?___ftadd,_d1
   942  000A52  C02C  F064         	movff	?___ftadd+1,_d1+1
   943  000A56  C02D  F065         	movff	?___ftadd+2,_d1+2
   944                           
   945                           ;main.c: 142: _delay((unsigned long)((3)*(8000000/4000000.0)));
   946  000A5A  D000               	nop2		;2 cycle nop
   947  000A5C  D000               	nop2		;2 cycle nop
   948  000A5E  D000               	nop2		;2 cycle nop
   949                           
   950                           ;main.c: 143: ADCON0 = 0x05;
   951  000A60  0E05               	movlw	5
   952  000A62  6EC2               	movwf	4034,c	;volatile
   953                           
   954                           ;main.c: 144: x = 1;
   955  000A64  0E00               	movlw	0
   956  000A66  6E41               	movwf	_x+1,c
   957  000A68  0E01               	movlw	1
   958  000A6A  6E40               	movwf	_x,c
   959  000A6C  0012               	return	
   960  000A6E                     __end_of_start:
   961                           	opt stack 0
   962                           tblptru	equ	0xFF8
   963                           tblptrh	equ	0xFF7
   964                           tblptrl	equ	0xFF6
   965                           tablat	equ	0xFF5
   966                           postinc0	equ	0xFEE
   967                           wreg	equ	0xFE8
   968                           status	equ	0xFD8
   969                           
   970 ;; *************** function _settings *****************
   971 ;; Defined at:
   972 ;;		line 85 in file "main.c"
   973 ;; Parameters:    Size  Location     Type
   974 ;;		None
   975 ;; Auto vars:     Size  Location     Type
   976 ;;		None
   977 ;; Return value:  Size  Location     Type
   978 ;;                  1    wreg      void 
   979 ;; Registers used:
   980 ;;		wreg, status,2
   981 ;; Tracked objects:
   982 ;;		On entry : 0/0
   983 ;;		On exit  : 0/0
   984 ;;		Unchanged: 0/0
   985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   986 ;;      Params:         0       0       0       0       0       0       0       0       0
   987 ;;      Locals:         0       0       0       0       0       0       0       0       0
   988 ;;      Temps:          0       0       0       0       0       0       0       0       0
   989 ;;      Totals:         0       0       0       0       0       0       0       0       0
   990 ;;Total ram usage:        0 bytes
   991 ;; Hardware stack levels used:    1
   992 ;; Hardware stack levels required when called:    2
   993 ;; This function calls:
   994 ;;		Nothing
   995 ;; This function is called by:
   996 ;;		_main
   997 ;; This function uses a non-reentrant model
   998 ;;
   999                           
  1000                           	psect	text3
  1001  0010AE                     __ptext3:
  1002                           	opt stack 0
  1003  0010AE                     _settings:
  1004                           	opt stack 28
  1005                           
  1006                           ;main.c: 86: OSCCON = 0x72;
  1007                           
  1008                           ;incstack = 0
  1009  0010AE  0E72               	movlw	114
  1010  0010B0  6ED3               	movwf	4051,c	;volatile
  1011                           
  1012                           ;main.c: 88: ADCON0 = 0x01;
  1013  0010B2  0E01               	movlw	1
  1014  0010B4  6EC2               	movwf	4034,c	;volatile
  1015                           
  1016                           ;main.c: 89: ADCON1 = 0x0C;
  1017  0010B6  0E0C               	movlw	12
  1018  0010B8  6EC1               	movwf	4033,c	;volatile
  1019                           
  1020                           ;main.c: 90: ADCON2 = 0x91;
  1021  0010BA  0E91               	movlw	145
  1022  0010BC  6EC0               	movwf	4032,c	;volatile
  1023                           
  1024                           ;main.c: 92: TRISB = 0xF0;
  1025  0010BE  0EF0               	movlw	240
  1026  0010C0  6E93               	movwf	3987,c	;volatile
  1027                           
  1028                           ;main.c: 93: LATB = 0xF0;
  1029  0010C2  0EF0               	movlw	240
  1030  0010C4  6E8A               	movwf	3978,c	;volatile
  1031                           
  1032                           ;main.c: 94: TRISA = 0x0F;
  1033  0010C6  0E0F               	movlw	15
  1034  0010C8  6E92               	movwf	3986,c	;volatile
  1035                           
  1036                           ;main.c: 95: LATA = 0x0F;
  1037  0010CA  0E0F               	movlw	15
  1038  0010CC  6E89               	movwf	3977,c	;volatile
  1039                           
  1040                           ;main.c: 96: TRISE = 0;
  1041  0010CE  0E00               	movlw	0
  1042  0010D0  6E96               	movwf	3990,c	;volatile
  1043                           
  1044                           ;main.c: 97: LATE = 0;
  1045  0010D2  0E00               	movlw	0
  1046  0010D4  6E8D               	movwf	3981,c	;volatile
  1047                           
  1048                           ;main.c: 100: PR2 = 0x7C;
  1049  0010D6  0E7C               	movlw	124
  1050  0010D8  6ECB               	movwf	4043,c	;volatile
  1051                           
  1052                           ;main.c: 101: T2CON = 0x03;
  1053  0010DA  0E03               	movlw	3
  1054  0010DC  6ECA               	movwf	4042,c	;volatile
  1055                           
  1056                           ;main.c: 102: TRISC = 0;
  1057  0010DE  0E00               	movlw	0
  1058  0010E0  6E94               	movwf	3988,c	;volatile
  1059                           
  1060                           ;main.c: 103: LATC = 0;
  1061  0010E2  0E00               	movlw	0
  1062  0010E4  6E8B               	movwf	3979,c	;volatile
  1063                           
  1064                           ;main.c: 104: CCPR1L = 0x7D;
  1065  0010E6  0E7D               	movlw	125
  1066  0010E8  6EBE               	movwf	4030,c	;volatile
  1067                           
  1068                           ;main.c: 105: CCP1CON = 0x0C;
  1069  0010EA  0E0C               	movlw	12
  1070  0010EC  6EBD               	movwf	4029,c	;volatile
  1071                           
  1072                           ;main.c: 106: CCPR2L = 0x7D;
  1073  0010EE  0E7D               	movlw	125
  1074  0010F0  6EBB               	movwf	4027,c	;volatile
  1075                           
  1076                           ;main.c: 107: CCP2CON = 0x0C;
  1077  0010F2  0E0C               	movlw	12
  1078  0010F4  6EBA               	movwf	4026,c	;volatile
  1079                           
  1080                           ;main.c: 110: TRISCbits.RC7 = 1;
  1081  0010F6  8E94               	bsf	3988,7,c	;volatile
  1082                           
  1083                           ;main.c: 111: TRISCbits.RC6 = 0;
  1084  0010F8  9C94               	bcf	3988,6,c	;volatile
  1085                           
  1086                           ;main.c: 112: SPBRG = 0x0C;
  1087  0010FA  0E0C               	movlw	12
  1088  0010FC  6EAF               	movwf	4015,c	;volatile
  1089                           
  1090                           ;main.c: 113: RCSTA = 0x90;
  1091  0010FE  0E90               	movlw	144
  1092  001100  6EAB               	movwf	4011,c	;volatile
  1093                           
  1094                           ;main.c: 114: TXSTA = 0x20;
  1095  001102  0E20               	movlw	32
  1096  001104  6EAC               	movwf	4012,c	;volatile
  1097                           
  1098                           ;main.c: 117: GIE = 1;
  1099  001106  8EF2               	bsf	intcon,7,c	;volatile
  1100                           
  1101                           ;main.c: 118: PEIE = 1;
  1102  001108  8CF2               	bsf	intcon,6,c	;volatile
  1103                           
  1104                           ;main.c: 119: RCIE = 1;
  1105  00110A  8A9D               	bsf	3997,5,c	;volatile
  1106                           
  1107                           ;main.c: 120: RCIF = 0;
  1108  00110C  9A9E               	bcf	3998,5,c	;volatile
  1109                           
  1110                           ;main.c: 121: RCIP = 1;
  1111  00110E  8A9F               	bsf	3999,5,c	;volatile
  1112                           
  1113                           ;main.c: 123: RBIE = 1;
  1114  001110  86F2               	bsf	intcon,3,c	;volatile
  1115                           
  1116                           ;main.c: 124: RBIF = 0;
  1117  001112  90F2               	bcf	intcon,0,c	;volatile
  1118                           
  1119                           ;main.c: 125: RBIP = 0;
  1120  001114  90F1               	bcf	intcon2,0,c	;volatile
  1121                           
  1122                           ;main.c: 128: ADCON0bits.GO = 1;
  1123  001116  82C2               	bsf	4034,1,c	;volatile
  1124                           
  1125                           ;main.c: 130: TMR2 = 0;
  1126  001118  0E00               	movlw	0
  1127  00111A  6ECC               	movwf	4044,c	;volatile
  1128                           
  1129                           ;main.c: 131: T2CONbits.TMR2ON = 1;
  1130  00111C  84CA               	bsf	4042,2,c	;volatile
  1131  00111E  0012               	return		;funcret
  1132  001120                     __end_of_settings:
  1133                           	opt stack 0
  1134                           tblptru	equ	0xFF8
  1135                           tblptrh	equ	0xFF7
  1136                           tblptrl	equ	0xFF6
  1137                           tablat	equ	0xFF5
  1138                           intcon	equ	0xFF2
  1139                           intcon2	equ	0xFF1
  1140                           postinc0	equ	0xFEE
  1141                           wreg	equ	0xFE8
  1142                           status	equ	0xFD8
  1143                           
  1144 ;; *************** function _manual *****************
  1145 ;; Defined at:
  1146 ;;		line 274 in file "main.c"
  1147 ;; Parameters:    Size  Location     Type
  1148 ;;		None
  1149 ;; Auto vars:     Size  Location     Type
  1150 ;;		None
  1151 ;; Return value:  Size  Location     Type
  1152 ;;                  1    wreg      void 
  1153 ;; Registers used:
  1154 ;;		wreg, status,2, status,0, cstack
  1155 ;; Tracked objects:
  1156 ;;		On entry : 0/0
  1157 ;;		On exit  : 0/0
  1158 ;;		Unchanged: 0/0
  1159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1160 ;;      Params:         0       0       0       0       0       0       0       0       0
  1161 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1162 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1163 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1164 ;;Total ram usage:        0 bytes
  1165 ;; Hardware stack levels used:    1
  1166 ;; Hardware stack levels required when called:    6
  1167 ;; This function calls:
  1168 ;;		_adelante
  1169 ;;		_atras
  1170 ;;		_derecha
  1171 ;;		_freno
  1172 ;;		_izquierda
  1173 ;;		_pwmA1
  1174 ;;		_pwmA2
  1175 ;;		_pwmB1
  1176 ;;		_pwmB2
  1177 ;;		_sensorOFF
  1178 ;; This function is called by:
  1179 ;;		_main
  1180 ;; This function uses a non-reentrant model
  1181 ;;
  1182                           
  1183                           	psect	text4
  1184  000470                     __ptext4:
  1185                           	opt stack 0
  1186  000470                     _manual:
  1187                           	opt stack 24
  1188                           
  1189                           ;main.c: 275: if (PORTBbits.RB4 == 1) {
  1190                           
  1191                           ;incstack = 0
  1192  000470  A881               	btfss	3969,4,c	;volatile
  1193  000472  D0DF               	goto	l2863
  1194                           
  1195                           ;main.c: 276: LATAbits.LA4 = 0;
  1196  000474  9889               	bcf	3977,4,c	;volatile
  1197                           
  1198                           ;main.c: 277: if (modo == 0) {
  1199  000476  503E               	movf	_modo,w,c
  1200  000478  103F               	iorwf	_modo+1,w,c
  1201  00047A  A4D8               	btfss	status,2,c
  1202  00047C  D003               	goto	l2751
  1203                           
  1204                           ;main.c: 278: freno();
  1205  00047E  ECF7  F009         	call	_freno	;wreg free
  1206                           
  1207                           ;main.c: 279: } else if (modo == 1) {
  1208  000482  0012               	return	
  1209  000484                     l2751:
  1210  000484  043E               	decf	_modo,w,c
  1211  000486  103F               	iorwf	_modo+1,w,c
  1212  000488  A4D8               	btfss	status,2,c
  1213  00048A  D031               	goto	l2779
  1214                           
  1215                           ;main.c: 280: adelante();
  1216  00048C  ECD1  F009         	call	_adelante	;wreg free
  1217                           
  1218                           ;main.c: 281: if (PWM == 1) {
  1219  000490  043C               	decf	_PWM,w,c
  1220  000492  103D               	iorwf	_PWM+1,w,c
  1221  000494  A4D8               	btfss	status,2,c
  1222  000496  D007               	goto	l2761
  1223                           
  1224                           ;main.c: 282: pwmA1();
  1225  000498  ECF4  F008         	call	_pwmA1	;wreg free
  1226                           
  1227                           ;main.c: 283: PWM = 0;
  1228  00049C  0E00               	movlw	0
  1229  00049E  6E3D               	movwf	_PWM+1,c
  1230  0004A0  0E00               	movlw	0
  1231  0004A2  6E3C               	movwf	_PWM,c
  1232                           
  1233                           ;main.c: 284: } else if (PWM == 2) {
  1234  0004A4  0012               	return	
  1235  0004A6                     l2761:
  1236  0004A6  0E02               	movlw	2
  1237  0004A8  183C               	xorwf	_PWM,w,c
  1238  0004AA  103D               	iorwf	_PWM+1,w,c
  1239  0004AC  A4D8               	btfss	status,2,c
  1240  0004AE  D007               	goto	l2767
  1241                           
  1242                           ;main.c: 285: pwmA2();
  1243  0004B0  EC85  F009         	call	_pwmA2	;wreg free
  1244                           
  1245                           ;main.c: 286: PWM = 0;
  1246  0004B4  0E00               	movlw	0
  1247  0004B6  6E3D               	movwf	_PWM+1,c
  1248  0004B8  0E00               	movlw	0
  1249  0004BA  6E3C               	movwf	_PWM,c
  1250                           
  1251                           ;main.c: 287: } else if (PWM == 3) {
  1252  0004BC  0012               	return	
  1253  0004BE                     l2767:
  1254  0004BE  0E03               	movlw	3
  1255  0004C0  183C               	xorwf	_PWM,w,c
  1256  0004C2  103D               	iorwf	_PWM+1,w,c
  1257  0004C4  A4D8               	btfss	status,2,c
  1258  0004C6  D007               	goto	l2773
  1259                           
  1260                           ;main.c: 288: pwmB1();
  1261  0004C8  ECC9  F008         	call	_pwmB1	;wreg free
  1262                           
  1263                           ;main.c: 289: PWM = 0;
  1264  0004CC  0E00               	movlw	0
  1265  0004CE  6E3D               	movwf	_PWM+1,c
  1266  0004D0  0E00               	movlw	0
  1267  0004D2  6E3C               	movwf	_PWM,c
  1268                           
  1269                           ;main.c: 290: } else if (PWM == 4) {
  1270  0004D4  0012               	return	
  1271  0004D6                     l2773:
  1272  0004D6  0E04               	movlw	4
  1273  0004D8  183C               	xorwf	_PWM,w,c
  1274  0004DA  103D               	iorwf	_PWM+1,w,c
  1275  0004DC  A4D8               	btfss	status,2,c
  1276  0004DE  0012               	return	
  1277                           
  1278                           ;main.c: 291: pwmB2();
  1279  0004E0  EC68  F009         	call	_pwmB2	;wreg free
  1280                           
  1281                           ;main.c: 292: PWM = 0;
  1282  0004E4  0E00               	movlw	0
  1283  0004E6  6E3D               	movwf	_PWM+1,c
  1284  0004E8  0E00               	movlw	0
  1285  0004EA  6E3C               	movwf	_PWM,c
  1286                           
  1287                           ;main.c: 293: }
  1288                           ;main.c: 294: } else if (modo == 2) {
  1289  0004EC  0012               	return	
  1290  0004EE                     l2779:
  1291  0004EE  0E02               	movlw	2
  1292  0004F0  183E               	xorwf	_modo,w,c
  1293  0004F2  103F               	iorwf	_modo+1,w,c
  1294  0004F4  A4D8               	btfss	status,2,c
  1295  0004F6  D031               	goto	l2807
  1296                           
  1297                           ;main.c: 295: atras();
  1298  0004F8  ECBE  F009         	call	_atras	;wreg free
  1299                           
  1300                           ;main.c: 296: if (PWM == 1) {
  1301  0004FC  043C               	decf	_PWM,w,c
  1302  0004FE  103D               	iorwf	_PWM+1,w,c
  1303  000500  A4D8               	btfss	status,2,c
  1304  000502  D007               	goto	l2789
  1305                           
  1306                           ;main.c: 297: pwmA1();
  1307  000504  ECF4  F008         	call	_pwmA1	;wreg free
  1308                           
  1309                           ;main.c: 298: PWM = 0;
  1310  000508  0E00               	movlw	0
  1311  00050A  6E3D               	movwf	_PWM+1,c
  1312  00050C  0E00               	movlw	0
  1313  00050E  6E3C               	movwf	_PWM,c
  1314                           
  1315                           ;main.c: 299: } else if (PWM == 2) {
  1316  000510  0012               	return	
  1317  000512                     l2789:
  1318  000512  0E02               	movlw	2
  1319  000514  183C               	xorwf	_PWM,w,c
  1320  000516  103D               	iorwf	_PWM+1,w,c
  1321  000518  A4D8               	btfss	status,2,c
  1322  00051A  D007               	goto	l2795
  1323                           
  1324                           ;main.c: 300: pwmA2();
  1325  00051C  EC85  F009         	call	_pwmA2	;wreg free
  1326                           
  1327                           ;main.c: 301: PWM = 0;
  1328  000520  0E00               	movlw	0
  1329  000522  6E3D               	movwf	_PWM+1,c
  1330  000524  0E00               	movlw	0
  1331  000526  6E3C               	movwf	_PWM,c
  1332                           
  1333                           ;main.c: 302: } else if (PWM == 3) {
  1334  000528  0012               	return	
  1335  00052A                     l2795:
  1336  00052A  0E03               	movlw	3
  1337  00052C  183C               	xorwf	_PWM,w,c
  1338  00052E  103D               	iorwf	_PWM+1,w,c
  1339  000530  A4D8               	btfss	status,2,c
  1340  000532  D007               	goto	l2801
  1341                           
  1342                           ;main.c: 303: pwmB1();
  1343  000534  ECC9  F008         	call	_pwmB1	;wreg free
  1344                           
  1345                           ;main.c: 304: PWM = 0;
  1346  000538  0E00               	movlw	0
  1347  00053A  6E3D               	movwf	_PWM+1,c
  1348  00053C  0E00               	movlw	0
  1349  00053E  6E3C               	movwf	_PWM,c
  1350                           
  1351                           ;main.c: 305: } else if (PWM == 4) {
  1352  000540  0012               	return	
  1353  000542                     l2801:
  1354  000542  0E04               	movlw	4
  1355  000544  183C               	xorwf	_PWM,w,c
  1356  000546  103D               	iorwf	_PWM+1,w,c
  1357  000548  A4D8               	btfss	status,2,c
  1358  00054A  0012               	return	
  1359                           
  1360                           ;main.c: 306: pwmB2();
  1361  00054C  EC68  F009         	call	_pwmB2	;wreg free
  1362                           
  1363                           ;main.c: 307: PWM = 0;
  1364  000550  0E00               	movlw	0
  1365  000552  6E3D               	movwf	_PWM+1,c
  1366  000554  0E00               	movlw	0
  1367  000556  6E3C               	movwf	_PWM,c
  1368                           
  1369                           ;main.c: 308: }
  1370                           ;main.c: 309: } else if (modo == 3) {
  1371  000558  0012               	return	
  1372  00055A                     l2807:
  1373  00055A  0E03               	movlw	3
  1374  00055C  183E               	xorwf	_modo,w,c
  1375  00055E  103F               	iorwf	_modo+1,w,c
  1376  000560  A4D8               	btfss	status,2,c
  1377  000562  D031               	goto	l2835
  1378                           
  1379                           ;main.c: 310: derecha();
  1380  000564  ECE4  F009         	call	_derecha	;wreg free
  1381                           
  1382                           ;main.c: 311: if (PWM == 1) {
  1383  000568  043C               	decf	_PWM,w,c
  1384  00056A  103D               	iorwf	_PWM+1,w,c
  1385  00056C  A4D8               	btfss	status,2,c
  1386  00056E  D007               	goto	l2817
  1387                           
  1388                           ;main.c: 312: pwmA1();
  1389  000570  ECF4  F008         	call	_pwmA1	;wreg free
  1390                           
  1391                           ;main.c: 313: PWM = 0;
  1392  000574  0E00               	movlw	0
  1393  000576  6E3D               	movwf	_PWM+1,c
  1394  000578  0E00               	movlw	0
  1395  00057A  6E3C               	movwf	_PWM,c
  1396                           
  1397                           ;main.c: 314: } else if (PWM == 2) {
  1398  00057C  0012               	return	
  1399  00057E                     l2817:
  1400  00057E  0E02               	movlw	2
  1401  000580  183C               	xorwf	_PWM,w,c
  1402  000582  103D               	iorwf	_PWM+1,w,c
  1403  000584  A4D8               	btfss	status,2,c
  1404  000586  D007               	goto	l2823
  1405                           
  1406                           ;main.c: 315: pwmA2();
  1407  000588  EC85  F009         	call	_pwmA2	;wreg free
  1408                           
  1409                           ;main.c: 316: PWM = 0;
  1410  00058C  0E00               	movlw	0
  1411  00058E  6E3D               	movwf	_PWM+1,c
  1412  000590  0E00               	movlw	0
  1413  000592  6E3C               	movwf	_PWM,c
  1414                           
  1415                           ;main.c: 317: } else if (PWM == 3) {
  1416  000594  0012               	return	
  1417  000596                     l2823:
  1418  000596  0E03               	movlw	3
  1419  000598  183C               	xorwf	_PWM,w,c
  1420  00059A  103D               	iorwf	_PWM+1,w,c
  1421  00059C  A4D8               	btfss	status,2,c
  1422  00059E  D007               	goto	l2829
  1423                           
  1424                           ;main.c: 318: pwmB1();
  1425  0005A0  ECC9  F008         	call	_pwmB1	;wreg free
  1426                           
  1427                           ;main.c: 319: PWM = 0;
  1428  0005A4  0E00               	movlw	0
  1429  0005A6  6E3D               	movwf	_PWM+1,c
  1430  0005A8  0E00               	movlw	0
  1431  0005AA  6E3C               	movwf	_PWM,c
  1432                           
  1433                           ;main.c: 320: } else if (PWM == 4) {
  1434  0005AC  0012               	return	
  1435  0005AE                     l2829:
  1436  0005AE  0E04               	movlw	4
  1437  0005B0  183C               	xorwf	_PWM,w,c
  1438  0005B2  103D               	iorwf	_PWM+1,w,c
  1439  0005B4  A4D8               	btfss	status,2,c
  1440  0005B6  0012               	return	
  1441                           
  1442                           ;main.c: 321: pwmB2();
  1443  0005B8  EC68  F009         	call	_pwmB2	;wreg free
  1444                           
  1445                           ;main.c: 322: PWM = 0;
  1446  0005BC  0E00               	movlw	0
  1447  0005BE  6E3D               	movwf	_PWM+1,c
  1448  0005C0  0E00               	movlw	0
  1449  0005C2  6E3C               	movwf	_PWM,c
  1450                           
  1451                           ;main.c: 323: }
  1452                           ;main.c: 324: } else if (modo == 4) {
  1453  0005C4  0012               	return	
  1454  0005C6                     l2835:
  1455  0005C6  0E04               	movlw	4
  1456  0005C8  183E               	xorwf	_modo,w,c
  1457  0005CA  103F               	iorwf	_modo+1,w,c
  1458  0005CC  A4D8               	btfss	status,2,c
  1459  0005CE  0012               	return	
  1460                           
  1461                           ;main.c: 325: izquierda();
  1462  0005D0  ECEB  F009         	call	_izquierda	;wreg free
  1463                           
  1464                           ;main.c: 326: if (PWM == 1) {
  1465  0005D4  043C               	decf	_PWM,w,c
  1466  0005D6  103D               	iorwf	_PWM+1,w,c
  1467  0005D8  A4D8               	btfss	status,2,c
  1468  0005DA  D007               	goto	l2845
  1469                           
  1470                           ;main.c: 327: pwmA1();
  1471  0005DC  ECF4  F008         	call	_pwmA1	;wreg free
  1472                           
  1473                           ;main.c: 328: PWM = 0;
  1474  0005E0  0E00               	movlw	0
  1475  0005E2  6E3D               	movwf	_PWM+1,c
  1476  0005E4  0E00               	movlw	0
  1477  0005E6  6E3C               	movwf	_PWM,c
  1478                           
  1479                           ;main.c: 329: } else if (PWM == 2) {
  1480  0005E8  0012               	return	
  1481  0005EA                     l2845:
  1482  0005EA  0E02               	movlw	2
  1483  0005EC  183C               	xorwf	_PWM,w,c
  1484  0005EE  103D               	iorwf	_PWM+1,w,c
  1485  0005F0  A4D8               	btfss	status,2,c
  1486  0005F2  D007               	goto	l2851
  1487                           
  1488                           ;main.c: 330: pwmA2();
  1489  0005F4  EC85  F009         	call	_pwmA2	;wreg free
  1490                           
  1491                           ;main.c: 331: PWM = 0;
  1492  0005F8  0E00               	movlw	0
  1493  0005FA  6E3D               	movwf	_PWM+1,c
  1494  0005FC  0E00               	movlw	0
  1495  0005FE  6E3C               	movwf	_PWM,c
  1496                           
  1497                           ;main.c: 332: } else if (PWM == 3) {
  1498  000600  0012               	return	
  1499  000602                     l2851:
  1500  000602  0E03               	movlw	3
  1501  000604  183C               	xorwf	_PWM,w,c
  1502  000606  103D               	iorwf	_PWM+1,w,c
  1503  000608  A4D8               	btfss	status,2,c
  1504  00060A  D007               	goto	l2857
  1505                           
  1506                           ;main.c: 333: pwmB1();
  1507  00060C  ECC9  F008         	call	_pwmB1	;wreg free
  1508                           
  1509                           ;main.c: 334: PWM = 0;
  1510  000610  0E00               	movlw	0
  1511  000612  6E3D               	movwf	_PWM+1,c
  1512  000614  0E00               	movlw	0
  1513  000616  6E3C               	movwf	_PWM,c
  1514                           
  1515                           ;main.c: 335: } else if (PWM == 4) {
  1516  000618  0012               	return	
  1517  00061A                     l2857:
  1518  00061A  0E04               	movlw	4
  1519  00061C  183C               	xorwf	_PWM,w,c
  1520  00061E  103D               	iorwf	_PWM+1,w,c
  1521  000620  A4D8               	btfss	status,2,c
  1522  000622  0012               	return	
  1523                           
  1524                           ;main.c: 336: pwmB2();
  1525  000624  EC68  F009         	call	_pwmB2	;wreg free
  1526                           
  1527                           ;main.c: 337: PWM = 0;
  1528  000628  0E00               	movlw	0
  1529  00062A  6E3D               	movwf	_PWM+1,c
  1530  00062C  0E00               	movlw	0
  1531  00062E  6E3C               	movwf	_PWM,c
  1532                           
  1533                           ;main.c: 338: }
  1534                           ;main.c: 339: }
  1535                           ;main.c: 340: } else {
  1536  000630  0012               	return	
  1537  000632                     l2863:
  1538                           
  1539                           ;main.c: 341: sensorOFF();
  1540  000632  ECF2  F009         	call	_sensorOFF	;wreg free
  1541                           
  1542                           ;main.c: 342: LATAbits.LA4 = 1;
  1543  000636  8889               	bsf	3977,4,c	;volatile
  1544  000638  0012               	return	
  1545  00063A                     __end_of_manual:
  1546                           	opt stack 0
  1547                           tblptru	equ	0xFF8
  1548                           tblptrh	equ	0xFF7
  1549                           tblptrl	equ	0xFF6
  1550                           tablat	equ	0xFF5
  1551                           intcon	equ	0xFF2
  1552                           intcon2	equ	0xFF1
  1553                           postinc0	equ	0xFEE
  1554                           wreg	equ	0xFE8
  1555                           status	equ	0xFD8
  1556                           
  1557 ;; *************** function _sensorOFF *****************
  1558 ;; Defined at:
  1559 ;;		line 464 in file "main.c"
  1560 ;; Parameters:    Size  Location     Type
  1561 ;;		None
  1562 ;; Auto vars:     Size  Location     Type
  1563 ;;		None
  1564 ;; Return value:  Size  Location     Type
  1565 ;;                  1    wreg      void 
  1566 ;; Registers used:
  1567 ;;		None
  1568 ;; Tracked objects:
  1569 ;;		On entry : 0/0
  1570 ;;		On exit  : 0/0
  1571 ;;		Unchanged: 0/0
  1572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1573 ;;      Params:         0       0       0       0       0       0       0       0       0
  1574 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1575 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1576 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1577 ;;Total ram usage:        0 bytes
  1578 ;; Hardware stack levels used:    1
  1579 ;; Hardware stack levels required when called:    2
  1580 ;; This function calls:
  1581 ;;		Nothing
  1582 ;; This function is called by:
  1583 ;;		_manual
  1584 ;; This function uses a non-reentrant model
  1585 ;;
  1586                           
  1587                           	psect	text5
  1588  0013E4                     __ptext5:
  1589                           	opt stack 0
  1590  0013E4                     _sensorOFF:
  1591                           	opt stack 27
  1592                           
  1593                           ;main.c: 465: LATB0 = 0;
  1594                           
  1595                           ;incstack = 0
  1596  0013E4  908A               	bcf	3978,0,c	;volatile
  1597                           
  1598                           ;main.c: 466: LATB1 = 0;
  1599  0013E6  928A               	bcf	3978,1,c	;volatile
  1600                           
  1601                           ;main.c: 467: LATB2 = 0;
  1602  0013E8  948A               	bcf	3978,2,c	;volatile
  1603                           
  1604                           ;main.c: 468: LATB3 = 0;
  1605  0013EA  968A               	bcf	3978,3,c	;volatile
  1606  0013EC  0012               	return		;funcret
  1607  0013EE                     __end_of_sensorOFF:
  1608                           	opt stack 0
  1609                           tblptru	equ	0xFF8
  1610                           tblptrh	equ	0xFF7
  1611                           tblptrl	equ	0xFF6
  1612                           tablat	equ	0xFF5
  1613                           intcon	equ	0xFF2
  1614                           intcon2	equ	0xFF1
  1615                           postinc0	equ	0xFEE
  1616                           wreg	equ	0xFE8
  1617                           status	equ	0xFD8
  1618                           
  1619 ;; *************** function _pwmB2 *****************
  1620 ;; Defined at:
  1621 ;;		line 416 in file "main.c"
  1622 ;; Parameters:    Size  Location     Type
  1623 ;;		None
  1624 ;; Auto vars:     Size  Location     Type
  1625 ;;		None
  1626 ;; Return value:  Size  Location     Type
  1627 ;;                  1    wreg      void 
  1628 ;; Registers used:
  1629 ;;		wreg, status,2, status,0, cstack
  1630 ;; Tracked objects:
  1631 ;;		On entry : 0/0
  1632 ;;		On exit  : 0/0
  1633 ;;		Unchanged: 0/0
  1634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1635 ;;      Params:         0       0       0       0       0       0       0       0       0
  1636 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1637 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1638 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1639 ;;Total ram usage:        0 bytes
  1640 ;; Hardware stack levels used:    1
  1641 ;; Hardware stack levels required when called:    4
  1642 ;; This function calls:
  1643 ;;		___ftadd
  1644 ;; This function is called by:
  1645 ;;		_manual
  1646 ;; This function uses a non-reentrant model
  1647 ;;
  1648                           
  1649                           	psect	text6
  1650  0012D0                     __ptext6:
  1651                           	opt stack 0
  1652  0012D0                     _pwmB2:
  1653                           	opt stack 25
  1654                           
  1655                           ;main.c: 417: duty_cicle2 = duty_cicle2 - 102.3;
  1656                           
  1657                           ;incstack = 0
  1658  0012D0  C047  F02B         	movff	_duty_cicle2,___ftadd@f1
  1659  0012D4  C048  F02C         	movff	_duty_cicle2+1,___ftadd@f1+1
  1660  0012D8  C049  F02D         	movff	_duty_cicle2+2,___ftadd@f1+2
  1661  0012DC  0E9A               	movlw	154
  1662  0012DE  6E2E               	movwf	___ftadd@f2,c
  1663  0012E0  0ECC               	movlw	204
  1664  0012E2  6E2F               	movwf	___ftadd@f2+1,c
  1665  0012E4  0EC2               	movlw	194
  1666  0012E6  6E30               	movwf	___ftadd@f2+2,c
  1667  0012E8  EC2D  F001         	call	___ftadd	;wreg free
  1668  0012EC  C02B  F047         	movff	?___ftadd,_duty_cicle2
  1669  0012F0  C02C  F048         	movff	?___ftadd+1,_duty_cicle2+1
  1670  0012F4  C02D  F049         	movff	?___ftadd+2,_duty_cicle2+2
  1671                           
  1672                           ;main.c: 418: if (duty_cicle2 < 0) {
  1673  0012F8  AE49               	btfss	_duty_cicle2+2,7,c
  1674  0012FA  0012               	return	
  1675                           
  1676                           ;main.c: 419: duty_cicle2 = 0;
  1677  0012FC  0E00               	movlw	0
  1678  0012FE  6E47               	movwf	_duty_cicle2,c
  1679  001300  0E00               	movlw	0
  1680  001302  6E48               	movwf	_duty_cicle2+1,c
  1681  001304  0E00               	movlw	0
  1682  001306  6E49               	movwf	_duty_cicle2+2,c
  1683  001308  0012               	return	
  1684  00130A                     __end_of_pwmB2:
  1685                           	opt stack 0
  1686                           tblptru	equ	0xFF8
  1687                           tblptrh	equ	0xFF7
  1688                           tblptrl	equ	0xFF6
  1689                           tablat	equ	0xFF5
  1690                           intcon	equ	0xFF2
  1691                           intcon2	equ	0xFF1
  1692                           postinc0	equ	0xFEE
  1693                           wreg	equ	0xFE8
  1694                           status	equ	0xFD8
  1695                           
  1696 ;; *************** function _pwmB1 *****************
  1697 ;; Defined at:
  1698 ;;		line 409 in file "main.c"
  1699 ;; Parameters:    Size  Location     Type
  1700 ;;		None
  1701 ;; Auto vars:     Size  Location     Type
  1702 ;;		None
  1703 ;; Return value:  Size  Location     Type
  1704 ;;                  1    wreg      void 
  1705 ;; Registers used:
  1706 ;;		wreg, status,2, status,0, cstack
  1707 ;; Tracked objects:
  1708 ;;		On entry : 0/0
  1709 ;;		On exit  : 0/0
  1710 ;;		Unchanged: 0/0
  1711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1712 ;;      Params:         0       0       0       0       0       0       0       0       0
  1713 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1714 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1715 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1716 ;;Total ram usage:        0 bytes
  1717 ;; Hardware stack levels used:    1
  1718 ;; Hardware stack levels required when called:    4
  1719 ;; This function calls:
  1720 ;;		___ftadd
  1721 ;;		___ftge
  1722 ;; This function is called by:
  1723 ;;		_manual
  1724 ;; This function uses a non-reentrant model
  1725 ;;
  1726                           
  1727                           	psect	text7
  1728  001192                     __ptext7:
  1729                           	opt stack 0
  1730  001192                     _pwmB1:
  1731                           	opt stack 25
  1732                           
  1733                           ;main.c: 410: duty_cicle2 = duty_cicle2 + 102.3;
  1734                           
  1735                           ;incstack = 0
  1736  001192  C047  F02B         	movff	_duty_cicle2,___ftadd@f1
  1737  001196  C048  F02C         	movff	_duty_cicle2+1,___ftadd@f1+1
  1738  00119A  C049  F02D         	movff	_duty_cicle2+2,___ftadd@f1+2
  1739  00119E  0E9A               	movlw	154
  1740  0011A0  6E2E               	movwf	___ftadd@f2,c
  1741  0011A2  0ECC               	movlw	204
  1742  0011A4  6E2F               	movwf	___ftadd@f2+1,c
  1743  0011A6  0E42               	movlw	66
  1744  0011A8  6E30               	movwf	___ftadd@f2+2,c
  1745  0011AA  EC2D  F001         	call	___ftadd	;wreg free
  1746  0011AE  C02B  F047         	movff	?___ftadd,_duty_cicle2
  1747  0011B2  C02C  F048         	movff	?___ftadd+1,_duty_cicle2+1
  1748  0011B6  C02D  F049         	movff	?___ftadd+2,_duty_cicle2+2
  1749                           
  1750                           ;main.c: 411: if (duty_cicle2 > 1023.0) {
  1751  0011BA  0EC0               	movlw	192
  1752  0011BC  6E10               	movwf	___ftge@ff1,c
  1753  0011BE  0E7F               	movlw	127
  1754  0011C0  6E11               	movwf	___ftge@ff1+1,c
  1755  0011C2  0E44               	movlw	68
  1756  0011C4  6E12               	movwf	___ftge@ff1+2,c
  1757  0011C6  C047  F013         	movff	_duty_cicle2,___ftge@ff2
  1758  0011CA  C048  F014         	movff	_duty_cicle2+1,___ftge@ff2+1
  1759  0011CE  C049  F015         	movff	_duty_cicle2+2,___ftge@ff2+2
  1760  0011D2  EC0F  F008         	call	___ftge	;wreg free
  1761  0011D6  B0D8               	btfsc	status,0,c
  1762  0011D8  0012               	return	
  1763                           
  1764                           ;main.c: 412: duty_cicle2 = 1023.0;
  1765  0011DA  0EC0               	movlw	192
  1766  0011DC  6E47               	movwf	_duty_cicle2,c
  1767  0011DE  0E7F               	movlw	127
  1768  0011E0  6E48               	movwf	_duty_cicle2+1,c
  1769  0011E2  0E44               	movlw	68
  1770  0011E4  6E49               	movwf	_duty_cicle2+2,c
  1771  0011E6  0012               	return	
  1772  0011E8                     __end_of_pwmB1:
  1773                           	opt stack 0
  1774                           tblptru	equ	0xFF8
  1775                           tblptrh	equ	0xFF7
  1776                           tblptrl	equ	0xFF6
  1777                           tablat	equ	0xFF5
  1778                           intcon	equ	0xFF2
  1779                           intcon2	equ	0xFF1
  1780                           postinc0	equ	0xFEE
  1781                           wreg	equ	0xFE8
  1782                           status	equ	0xFD8
  1783                           
  1784 ;; *************** function _pwmA2 *****************
  1785 ;; Defined at:
  1786 ;;		line 402 in file "main.c"
  1787 ;; Parameters:    Size  Location     Type
  1788 ;;		None
  1789 ;; Auto vars:     Size  Location     Type
  1790 ;;		None
  1791 ;; Return value:  Size  Location     Type
  1792 ;;                  1    wreg      void 
  1793 ;; Registers used:
  1794 ;;		wreg, status,2, status,0, cstack
  1795 ;; Tracked objects:
  1796 ;;		On entry : 0/0
  1797 ;;		On exit  : 0/0
  1798 ;;		Unchanged: 0/0
  1799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1800 ;;      Params:         0       0       0       0       0       0       0       0       0
  1801 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1802 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1803 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1804 ;;Total ram usage:        0 bytes
  1805 ;; Hardware stack levels used:    1
  1806 ;; Hardware stack levels required when called:    4
  1807 ;; This function calls:
  1808 ;;		___ftadd
  1809 ;; This function is called by:
  1810 ;;		_manual
  1811 ;; This function uses a non-reentrant model
  1812 ;;
  1813                           
  1814                           	psect	text8
  1815  00130A                     __ptext8:
  1816                           	opt stack 0
  1817  00130A                     _pwmA2:
  1818                           	opt stack 25
  1819                           
  1820                           ;main.c: 403: duty_cicle1 = duty_cicle1 - 102.3;
  1821                           
  1822                           ;incstack = 0
  1823  00130A  C04A  F02B         	movff	_duty_cicle1,___ftadd@f1
  1824  00130E  C04B  F02C         	movff	_duty_cicle1+1,___ftadd@f1+1
  1825  001312  C04C  F02D         	movff	_duty_cicle1+2,___ftadd@f1+2
  1826  001316  0E9A               	movlw	154
  1827  001318  6E2E               	movwf	___ftadd@f2,c
  1828  00131A  0ECC               	movlw	204
  1829  00131C  6E2F               	movwf	___ftadd@f2+1,c
  1830  00131E  0EC2               	movlw	194
  1831  001320  6E30               	movwf	___ftadd@f2+2,c
  1832  001322  EC2D  F001         	call	___ftadd	;wreg free
  1833  001326  C02B  F04A         	movff	?___ftadd,_duty_cicle1
  1834  00132A  C02C  F04B         	movff	?___ftadd+1,_duty_cicle1+1
  1835  00132E  C02D  F04C         	movff	?___ftadd+2,_duty_cicle1+2
  1836                           
  1837                           ;main.c: 404: if (duty_cicle1 < 0) {
  1838  001332  AE4C               	btfss	_duty_cicle1+2,7,c
  1839  001334  0012               	return	
  1840                           
  1841                           ;main.c: 405: duty_cicle1 = 0;
  1842  001336  0E00               	movlw	0
  1843  001338  6E4A               	movwf	_duty_cicle1,c
  1844  00133A  0E00               	movlw	0
  1845  00133C  6E4B               	movwf	_duty_cicle1+1,c
  1846  00133E  0E00               	movlw	0
  1847  001340  6E4C               	movwf	_duty_cicle1+2,c
  1848  001342  0012               	return	
  1849  001344                     __end_of_pwmA2:
  1850                           	opt stack 0
  1851                           tblptru	equ	0xFF8
  1852                           tblptrh	equ	0xFF7
  1853                           tblptrl	equ	0xFF6
  1854                           tablat	equ	0xFF5
  1855                           intcon	equ	0xFF2
  1856                           intcon2	equ	0xFF1
  1857                           postinc0	equ	0xFEE
  1858                           wreg	equ	0xFE8
  1859                           status	equ	0xFD8
  1860                           
  1861 ;; *************** function _pwmA1 *****************
  1862 ;; Defined at:
  1863 ;;		line 395 in file "main.c"
  1864 ;; Parameters:    Size  Location     Type
  1865 ;;		None
  1866 ;; Auto vars:     Size  Location     Type
  1867 ;;		None
  1868 ;; Return value:  Size  Location     Type
  1869 ;;                  1    wreg      void 
  1870 ;; Registers used:
  1871 ;;		wreg, status,2, status,0, cstack
  1872 ;; Tracked objects:
  1873 ;;		On entry : 0/0
  1874 ;;		On exit  : 0/0
  1875 ;;		Unchanged: 0/0
  1876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1877 ;;      Params:         0       0       0       0       0       0       0       0       0
  1878 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1879 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1880 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1881 ;;Total ram usage:        0 bytes
  1882 ;; Hardware stack levels used:    1
  1883 ;; Hardware stack levels required when called:    4
  1884 ;; This function calls:
  1885 ;;		___ftadd
  1886 ;;		___ftge
  1887 ;; This function is called by:
  1888 ;;		_manual
  1889 ;; This function uses a non-reentrant model
  1890 ;;
  1891                           
  1892                           	psect	text9
  1893  0011E8                     __ptext9:
  1894                           	opt stack 0
  1895  0011E8                     _pwmA1:
  1896                           	opt stack 25
  1897                           
  1898                           ;main.c: 396: duty_cicle1 = duty_cicle1 + 102.3;
  1899                           
  1900                           ;incstack = 0
  1901  0011E8  C04A  F02B         	movff	_duty_cicle1,___ftadd@f1
  1902  0011EC  C04B  F02C         	movff	_duty_cicle1+1,___ftadd@f1+1
  1903  0011F0  C04C  F02D         	movff	_duty_cicle1+2,___ftadd@f1+2
  1904  0011F4  0E9A               	movlw	154
  1905  0011F6  6E2E               	movwf	___ftadd@f2,c
  1906  0011F8  0ECC               	movlw	204
  1907  0011FA  6E2F               	movwf	___ftadd@f2+1,c
  1908  0011FC  0E42               	movlw	66
  1909  0011FE  6E30               	movwf	___ftadd@f2+2,c
  1910  001200  EC2D  F001         	call	___ftadd	;wreg free
  1911  001204  C02B  F04A         	movff	?___ftadd,_duty_cicle1
  1912  001208  C02C  F04B         	movff	?___ftadd+1,_duty_cicle1+1
  1913  00120C  C02D  F04C         	movff	?___ftadd+2,_duty_cicle1+2
  1914                           
  1915                           ;main.c: 397: if (duty_cicle1 > 1023.0) {
  1916  001210  0EC0               	movlw	192
  1917  001212  6E10               	movwf	___ftge@ff1,c
  1918  001214  0E7F               	movlw	127
  1919  001216  6E11               	movwf	___ftge@ff1+1,c
  1920  001218  0E44               	movlw	68
  1921  00121A  6E12               	movwf	___ftge@ff1+2,c
  1922  00121C  C04A  F013         	movff	_duty_cicle1,___ftge@ff2
  1923  001220  C04B  F014         	movff	_duty_cicle1+1,___ftge@ff2+1
  1924  001224  C04C  F015         	movff	_duty_cicle1+2,___ftge@ff2+2
  1925  001228  EC0F  F008         	call	___ftge	;wreg free
  1926  00122C  B0D8               	btfsc	status,0,c
  1927  00122E  0012               	return	
  1928                           
  1929                           ;main.c: 398: duty_cicle1 = 1023.0;
  1930  001230  0EC0               	movlw	192
  1931  001232  6E4A               	movwf	_duty_cicle1,c
  1932  001234  0E7F               	movlw	127
  1933  001236  6E4B               	movwf	_duty_cicle1+1,c
  1934  001238  0E44               	movlw	68
  1935  00123A  6E4C               	movwf	_duty_cicle1+2,c
  1936  00123C  0012               	return	
  1937  00123E                     __end_of_pwmA1:
  1938                           	opt stack 0
  1939                           tblptru	equ	0xFF8
  1940                           tblptrh	equ	0xFF7
  1941                           tblptrl	equ	0xFF6
  1942                           tablat	equ	0xFF5
  1943                           intcon	equ	0xFF2
  1944                           intcon2	equ	0xFF1
  1945                           postinc0	equ	0xFEE
  1946                           wreg	equ	0xFE8
  1947                           status	equ	0xFD8
  1948                           
  1949 ;; *************** function ___ftadd *****************
  1950 ;; Defined at:
  1951 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftadd.c"
  1952 ;; Parameters:    Size  Location     Type
  1953 ;;  f1              3   42[COMRAM] float 
  1954 ;;  f2              3   45[COMRAM] float 
  1955 ;; Auto vars:     Size  Location     Type
  1956 ;;  exp1            1    5[BANK0 ] unsigned char 
  1957 ;;  exp2            1    4[BANK0 ] unsigned char 
  1958 ;;  sign            1    3[BANK0 ] unsigned char 
  1959 ;; Return value:  Size  Location     Type
  1960 ;;                  3   42[COMRAM] float 
  1961 ;; Registers used:
  1962 ;;		wreg, status,2, status,0, cstack
  1963 ;; Tracked objects:
  1964 ;;		On entry : 0/0
  1965 ;;		On exit  : 0/0
  1966 ;;		Unchanged: 0/0
  1967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1968 ;;      Params:         6       0       0       0       0       0       0       0       0
  1969 ;;      Locals:         0       3       0       0       0       0       0       0       0
  1970 ;;      Temps:          0       3       0       0       0       0       0       0       0
  1971 ;;      Totals:         6       6       0       0       0       0       0       0       0
  1972 ;;Total ram usage:       12 bytes
  1973 ;; Hardware stack levels used:    1
  1974 ;; Hardware stack levels required when called:    3
  1975 ;; This function calls:
  1976 ;;		___ftpack
  1977 ;; This function is called by:
  1978 ;;		_start
  1979 ;;		_start1
  1980 ;;		_pwmA1
  1981 ;;		_pwmA2
  1982 ;;		_pwmB1
  1983 ;;		_pwmB2
  1984 ;; This function uses a non-reentrant model
  1985 ;;
  1986                           
  1987                           	psect	text10
  1988  00025A                     __ptext10:
  1989                           	opt stack 0
  1990  00025A                     ___ftadd:
  1991                           	opt stack 26
  1992                           
  1993                           ;incstack = 0
  1994  00025A  C02D  F077         	movff	___ftadd@f1+2,??___ftadd
  1995  00025E  0100               	movlb	0	; () banked
  1996  000260  6B78               	clrf	(??___ftadd+1)& (0+255),b
  1997  000262  6B79               	clrf	(??___ftadd+2)& (0+255),b
  1998  000264  342C               	rlcf	___ftadd@f1+1,w,c
  1999  000266  0100               	movlb	0	; () banked
  2000  000268  3777               	rlcf	??___ftadd& (0+255),f,b
  2001  00026A  E301               	bnc	u2321
  2002  00026C  8178               	bsf	(??___ftadd+1)& (0+255),0,b
  2003  00026E                     u2321:
  2004  00026E  0100               	movlb	0	; () banked
  2005  000270  5177               	movf	??___ftadd& (0+255),w,b
  2006  000272  0100               	movlb	0	; () banked
  2007  000274  6F7C               	movwf	___ftadd@exp1& (0+255),b
  2008  000276  C030  F077         	movff	___ftadd@f2+2,??___ftadd
  2009  00027A  0100               	movlb	0	; () banked
  2010  00027C  6B78               	clrf	(??___ftadd+1)& (0+255),b
  2011  00027E  6B79               	clrf	(??___ftadd+2)& (0+255),b
  2012  000280  342F               	rlcf	___ftadd@f2+1,w,c
  2013  000282  0100               	movlb	0	; () banked
  2014  000284  3777               	rlcf	??___ftadd& (0+255),f,b
  2015  000286  E301               	bnc	u2331
  2016  000288  8178               	bsf	(??___ftadd+1)& (0+255),0,b
  2017  00028A                     u2331:
  2018  00028A  0100               	movlb	0	; () banked
  2019  00028C  5177               	movf	??___ftadd& (0+255),w,b
  2020  00028E  0100               	movlb	0	; () banked
  2021  000290  6F7B               	movwf	___ftadd@exp2& (0+255),b
  2022                           
  2023                           ; BSR set to: 0
  2024  000292  0100               	movlb	0	; () banked
  2025  000294  517C               	movf	___ftadd@exp1& (0+255),w,b
  2026  000296  0100               	movlb	0	; () banked
  2027  000298  B4D8               	btfsc	status,2,c
  2028  00029A  D011               	goto	l589
  2029                           
  2030                           ; BSR set to: 0
  2031  00029C  0100               	movlb	0	; () banked
  2032  00029E  517B               	movf	___ftadd@exp2& (0+255),w,b
  2033  0002A0  0100               	movlb	0	; () banked
  2034  0002A2  5D7C               	subwf	___ftadd@exp1& (0+255),w,b
  2035  0002A4  B0D8               	btfsc	status,0,c
  2036  0002A6  D012               	goto	l2593
  2037                           
  2038                           ; BSR set to: 0
  2039  0002A8  0100               	movlb	0	; () banked
  2040  0002AA  517C               	movf	___ftadd@exp1& (0+255),w,b
  2041  0002AC  0800               	sublw	0
  2042  0002AE  0100               	movlb	0	; () banked
  2043  0002B0  257B               	addwf	___ftadd@exp2& (0+255),w,b
  2044  0002B2  0100               	movlb	0	; () banked
  2045  0002B4  6F77               	movwf	??___ftadd& (0+255),b
  2046  0002B6  0E18               	movlw	24
  2047  0002B8  0100               	movlb	0	; () banked
  2048  0002BA  6577               	cpfsgt	??___ftadd& (0+255),b
  2049  0002BC  D007               	goto	l2593
  2050  0002BE                     l589:
  2051                           
  2052                           ; BSR set to: 0
  2053  0002BE  C02E  F02B         	movff	___ftadd@f2,?___ftadd
  2054  0002C2  C02F  F02C         	movff	___ftadd@f2+1,?___ftadd+1
  2055  0002C6  C030  F02D         	movff	___ftadd@f2+2,?___ftadd+2
  2056  0002CA  0012               	return	
  2057  0002CC                     l2593:
  2058                           
  2059                           ; BSR set to: 0
  2060  0002CC  0100               	movlb	0	; () banked
  2061  0002CE  517B               	movf	___ftadd@exp2& (0+255),w,b
  2062  0002D0  0100               	movlb	0	; () banked
  2063  0002D2  B4D8               	btfsc	status,2,c
  2064  0002D4  D011               	goto	l593
  2065                           
  2066                           ; BSR set to: 0
  2067  0002D6  0100               	movlb	0	; () banked
  2068  0002D8  517C               	movf	___ftadd@exp1& (0+255),w,b
  2069  0002DA  0100               	movlb	0	; () banked
  2070  0002DC  5D7B               	subwf	___ftadd@exp2& (0+255),w,b
  2071  0002DE  B0D8               	btfsc	status,0,c
  2072  0002E0  D012               	goto	l2599
  2073                           
  2074                           ; BSR set to: 0
  2075  0002E2  0100               	movlb	0	; () banked
  2076  0002E4  517B               	movf	___ftadd@exp2& (0+255),w,b
  2077  0002E6  0800               	sublw	0
  2078  0002E8  0100               	movlb	0	; () banked
  2079  0002EA  257C               	addwf	___ftadd@exp1& (0+255),w,b
  2080  0002EC  0100               	movlb	0	; () banked
  2081  0002EE  6F77               	movwf	??___ftadd& (0+255),b
  2082  0002F0  0E18               	movlw	24
  2083  0002F2  0100               	movlb	0	; () banked
  2084  0002F4  6577               	cpfsgt	??___ftadd& (0+255),b
  2085  0002F6  D007               	goto	l2599
  2086  0002F8                     l593:
  2087                           
  2088                           ; BSR set to: 0
  2089  0002F8  C02B  F02B         	movff	___ftadd@f1,?___ftadd
  2090  0002FC  C02C  F02C         	movff	___ftadd@f1+1,?___ftadd+1
  2091  000300  C02D  F02D         	movff	___ftadd@f1+2,?___ftadd+2
  2092  000304  0012               	return	
  2093  000306                     l2599:
  2094                           
  2095                           ; BSR set to: 0
  2096  000306  0E06               	movlw	6
  2097  000308  0100               	movlb	0	; () banked
  2098  00030A  6F7A               	movwf	___ftadd@sign& (0+255),b
  2099                           
  2100                           ; BSR set to: 0
  2101  00030C  AE2D               	btfss	___ftadd@f1+2,7,c
  2102  00030E  D002               	goto	l2605
  2103                           
  2104                           ; BSR set to: 0
  2105  000310  0100               	movlb	0	; () banked
  2106  000312  8F7A               	bsf	___ftadd@sign& (0+255),7,b
  2107  000314                     l2605:
  2108                           
  2109                           ; BSR set to: 0
  2110  000314  AE30               	btfss	___ftadd@f2+2,7,c
  2111  000316  D002               	goto	l595
  2112                           
  2113                           ; BSR set to: 0
  2114  000318  0100               	movlb	0	; () banked
  2115  00031A  8D7A               	bsf	___ftadd@sign& (0+255),6,b
  2116  00031C                     l595:
  2117                           
  2118                           ; BSR set to: 0
  2119  00031C  8E2C               	bsf	___ftadd@f1+1,7,c
  2120                           
  2121                           ; BSR set to: 0
  2122  00031E  0EFF               	movlw	255
  2123  000320  162B               	andwf	___ftadd@f1,f,c
  2124  000322  0EFF               	movlw	255
  2125  000324  162C               	andwf	___ftadd@f1+1,f,c
  2126  000326  0E00               	movlw	0
  2127  000328  162D               	andwf	___ftadd@f1+2,f,c
  2128  00032A  8E2F               	bsf	___ftadd@f2+1,7,c
  2129                           
  2130                           ; BSR set to: 0
  2131  00032C  0EFF               	movlw	255
  2132  00032E  162E               	andwf	___ftadd@f2,f,c
  2133  000330  0EFF               	movlw	255
  2134  000332  162F               	andwf	___ftadd@f2+1,f,c
  2135  000334  0E00               	movlw	0
  2136  000336  1630               	andwf	___ftadd@f2+2,f,c
  2137                           
  2138                           ; BSR set to: 0
  2139  000338  0100               	movlb	0	; () banked
  2140  00033A  517B               	movf	___ftadd@exp2& (0+255),w,b
  2141  00033C  0100               	movlb	0	; () banked
  2142  00033E  5D7C               	subwf	___ftadd@exp1& (0+255),w,b
  2143  000340  B0D8               	btfsc	status,0,c
  2144  000342  D023               	goto	l2625
  2145  000344                     l2615:
  2146                           
  2147                           ; BSR set to: 0
  2148  000344  90D8               	bcf	status,0,c
  2149  000346  362E               	rlcf	___ftadd@f2,f,c
  2150  000348  362F               	rlcf	___ftadd@f2+1,f,c
  2151  00034A  3630               	rlcf	___ftadd@f2+2,f,c
  2152  00034C  0100               	movlb	0	; () banked
  2153  00034E  077B               	decf	___ftadd@exp2& (0+255),f,b
  2154                           
  2155                           ; BSR set to: 0
  2156  000350  0100               	movlb	0	; () banked
  2157  000352  517C               	movf	___ftadd@exp1& (0+255),w,b
  2158  000354  0100               	movlb	0	; () banked
  2159  000356  197B               	xorwf	___ftadd@exp2& (0+255),w,b
  2160  000358  B4D8               	btfsc	status,2,c
  2161  00035A  D010               	goto	l2623
  2162                           
  2163                           ; BSR set to: 0
  2164  00035C  0100               	movlb	0	; () banked
  2165  00035E  077A               	decf	___ftadd@sign& (0+255),f,b
  2166  000360  C07A  F077         	movff	___ftadd@sign,??___ftadd
  2167  000364  0E07               	movlw	7
  2168  000366  0100               	movlb	0	; () banked
  2169  000368  1777               	andwf	??___ftadd& (0+255),f,b
  2170  00036A  B4D8               	btfsc	status,2,c
  2171  00036C  D007               	goto	l2623
  2172  00036E  D7EA               	goto	l2615
  2173  000370                     l2621:
  2174                           
  2175                           ; BSR set to: 0
  2176  000370  90D8               	bcf	status,0,c
  2177  000372  322D               	rrcf	___ftadd@f1+2,f,c
  2178  000374  322C               	rrcf	___ftadd@f1+1,f,c
  2179  000376  322B               	rrcf	___ftadd@f1,f,c
  2180  000378  0100               	movlb	0	; () banked
  2181  00037A  2B7C               	incf	___ftadd@exp1& (0+255),f,b
  2182  00037C                     l2623:
  2183                           
  2184                           ; BSR set to: 0
  2185  00037C  0100               	movlb	0	; () banked
  2186  00037E  517B               	movf	___ftadd@exp2& (0+255),w,b
  2187  000380  0100               	movlb	0	; () banked
  2188  000382  197C               	xorwf	___ftadd@exp1& (0+255),w,b
  2189  000384  B4D8               	btfsc	status,2,c
  2190  000386  D029               	goto	l604
  2191  000388  D7F3               	goto	l2621
  2192  00038A                     l2625:
  2193                           
  2194                           ; BSR set to: 0
  2195  00038A  0100               	movlb	0	; () banked
  2196  00038C  517C               	movf	___ftadd@exp1& (0+255),w,b
  2197  00038E  0100               	movlb	0	; () banked
  2198  000390  5D7B               	subwf	___ftadd@exp2& (0+255),w,b
  2199  000392  B0D8               	btfsc	status,0,c
  2200  000394  D022               	goto	l604
  2201  000396                     l2627:
  2202                           
  2203                           ; BSR set to: 0
  2204  000396  90D8               	bcf	status,0,c
  2205  000398  362B               	rlcf	___ftadd@f1,f,c
  2206  00039A  362C               	rlcf	___ftadd@f1+1,f,c
  2207  00039C  362D               	rlcf	___ftadd@f1+2,f,c
  2208  00039E  0100               	movlb	0	; () banked
  2209  0003A0  077C               	decf	___ftadd@exp1& (0+255),f,b
  2210                           
  2211                           ; BSR set to: 0
  2212  0003A2  0100               	movlb	0	; () banked
  2213  0003A4  517C               	movf	___ftadd@exp1& (0+255),w,b
  2214  0003A6  0100               	movlb	0	; () banked
  2215  0003A8  197B               	xorwf	___ftadd@exp2& (0+255),w,b
  2216  0003AA  B4D8               	btfsc	status,2,c
  2217  0003AC  D010               	goto	l2635
  2218                           
  2219                           ; BSR set to: 0
  2220  0003AE  0100               	movlb	0	; () banked
  2221  0003B0  077A               	decf	___ftadd@sign& (0+255),f,b
  2222  0003B2  C07A  F077         	movff	___ftadd@sign,??___ftadd
  2223  0003B6  0E07               	movlw	7
  2224  0003B8  0100               	movlb	0	; () banked
  2225  0003BA  1777               	andwf	??___ftadd& (0+255),f,b
  2226  0003BC  B4D8               	btfsc	status,2,c
  2227  0003BE  D007               	goto	l2635
  2228  0003C0  D7EA               	goto	l2627
  2229  0003C2                     l2633:
  2230                           
  2231                           ; BSR set to: 0
  2232  0003C2  90D8               	bcf	status,0,c
  2233  0003C4  3230               	rrcf	___ftadd@f2+2,f,c
  2234  0003C6  322F               	rrcf	___ftadd@f2+1,f,c
  2235  0003C8  322E               	rrcf	___ftadd@f2,f,c
  2236  0003CA  0100               	movlb	0	; () banked
  2237  0003CC  2B7B               	incf	___ftadd@exp2& (0+255),f,b
  2238  0003CE                     l2635:
  2239                           
  2240                           ; BSR set to: 0
  2241  0003CE  0100               	movlb	0	; () banked
  2242  0003D0  517B               	movf	___ftadd@exp2& (0+255),w,b
  2243  0003D2  0100               	movlb	0	; () banked
  2244  0003D4  197C               	xorwf	___ftadd@exp1& (0+255),w,b
  2245  0003D6  A4D8               	btfss	status,2,c
  2246  0003D8  D7F4               	goto	l2633
  2247  0003DA                     l604:
  2248                           
  2249                           ; BSR set to: 0
  2250  0003DA  0100               	movlb	0	; () banked
  2251  0003DC  AF7A               	btfss	___ftadd@sign& (0+255),7,b
  2252  0003DE  D00C               	goto	l613
  2253                           
  2254                           ; BSR set to: 0
  2255  0003E0  0EFF               	movlw	255
  2256  0003E2  1A2B               	xorwf	___ftadd@f1,f,c
  2257  0003E4  0EFF               	movlw	255
  2258  0003E6  1A2C               	xorwf	___ftadd@f1+1,f,c
  2259  0003E8  0EFF               	movlw	255
  2260  0003EA  1A2D               	xorwf	___ftadd@f1+2,f,c
  2261  0003EC  0E01               	movlw	1
  2262  0003EE  262B               	addwf	___ftadd@f1,f,c
  2263  0003F0  0E00               	movlw	0
  2264  0003F2  222C               	addwfc	___ftadd@f1+1,f,c
  2265  0003F4  0E00               	movlw	0
  2266  0003F6  222D               	addwfc	___ftadd@f1+2,f,c
  2267  0003F8                     l613:
  2268                           
  2269                           ; BSR set to: 0
  2270  0003F8  0100               	movlb	0	; () banked
  2271  0003FA  AD7A               	btfss	___ftadd@sign& (0+255),6,b
  2272  0003FC  D00C               	goto	l2641
  2273                           
  2274                           ; BSR set to: 0
  2275  0003FE  0EFF               	movlw	255
  2276  000400  1A2E               	xorwf	___ftadd@f2,f,c
  2277  000402  0EFF               	movlw	255
  2278  000404  1A2F               	xorwf	___ftadd@f2+1,f,c
  2279  000406  0EFF               	movlw	255
  2280  000408  1A30               	xorwf	___ftadd@f2+2,f,c
  2281  00040A  0E01               	movlw	1
  2282  00040C  262E               	addwf	___ftadd@f2,f,c
  2283  00040E  0E00               	movlw	0
  2284  000410  222F               	addwfc	___ftadd@f2+1,f,c
  2285  000412  0E00               	movlw	0
  2286  000414  2230               	addwfc	___ftadd@f2+2,f,c
  2287  000416                     l2641:
  2288                           
  2289                           ; BSR set to: 0
  2290  000416  0E00               	movlw	0
  2291  000418  0100               	movlb	0	; () banked
  2292  00041A  6F7A               	movwf	___ftadd@sign& (0+255),b
  2293                           
  2294                           ; BSR set to: 0
  2295  00041C  502B               	movf	___ftadd@f1,w,c
  2296  00041E  262E               	addwf	___ftadd@f2,f,c
  2297  000420  502C               	movf	___ftadd@f1+1,w,c
  2298  000422  222F               	addwfc	___ftadd@f2+1,f,c
  2299  000424  502D               	movf	___ftadd@f1+2,w,c
  2300  000426  2230               	addwfc	___ftadd@f2+2,f,c
  2301                           
  2302                           ; BSR set to: 0
  2303  000428  AE30               	btfss	___ftadd@f2+2,7,c
  2304  00042A  D00F               	goto	l2651
  2305                           
  2306                           ; BSR set to: 0
  2307  00042C  0EFF               	movlw	255
  2308  00042E  1A2E               	xorwf	___ftadd@f2,f,c
  2309  000430  0EFF               	movlw	255
  2310  000432  1A2F               	xorwf	___ftadd@f2+1,f,c
  2311  000434  0EFF               	movlw	255
  2312  000436  1A30               	xorwf	___ftadd@f2+2,f,c
  2313  000438  0E01               	movlw	1
  2314  00043A  262E               	addwf	___ftadd@f2,f,c
  2315  00043C  0E00               	movlw	0
  2316  00043E  222F               	addwfc	___ftadd@f2+1,f,c
  2317  000440  0E00               	movlw	0
  2318  000442  2230               	addwfc	___ftadd@f2+2,f,c
  2319                           
  2320                           ; BSR set to: 0
  2321  000444  0E01               	movlw	1
  2322  000446  0100               	movlb	0	; () banked
  2323  000448  6F7A               	movwf	___ftadd@sign& (0+255),b
  2324  00044A                     l2651:
  2325                           
  2326                           ; BSR set to: 0
  2327  00044A  C02E  F010         	movff	___ftadd@f2,___ftpack@arg
  2328  00044E  C02F  F011         	movff	___ftadd@f2+1,___ftpack@arg+1
  2329  000452  C030  F012         	movff	___ftadd@f2+2,___ftpack@arg+2
  2330  000456  C07C  F013         	movff	___ftadd@exp1,___ftpack@exp
  2331  00045A  C07A  F014         	movff	___ftadd@sign,___ftpack@sign
  2332  00045E  ECB8  F007         	call	___ftpack	;wreg free
  2333  000462  C010  F02B         	movff	?___ftpack,?___ftadd
  2334  000466  C011  F02C         	movff	?___ftpack+1,?___ftadd+1
  2335  00046A  C012  F02D         	movff	?___ftpack+2,?___ftadd+2
  2336  00046E  0012               	return	
  2337  000470                     __end_of___ftadd:
  2338                           	opt stack 0
  2339                           tblptru	equ	0xFF8
  2340                           tblptrh	equ	0xFF7
  2341                           tblptrl	equ	0xFF6
  2342                           tablat	equ	0xFF5
  2343                           intcon	equ	0xFF2
  2344                           intcon2	equ	0xFF1
  2345                           postinc0	equ	0xFEE
  2346                           wreg	equ	0xFE8
  2347                           status	equ	0xFD8
  2348                           
  2349 ;; *************** function _derecha *****************
  2350 ;; Defined at:
  2351 ;;		line 441 in file "main.c"
  2352 ;; Parameters:    Size  Location     Type
  2353 ;;		None
  2354 ;; Auto vars:     Size  Location     Type
  2355 ;;		None
  2356 ;; Return value:  Size  Location     Type
  2357 ;;                  1    wreg      void 
  2358 ;; Registers used:
  2359 ;;		wreg, status,2, status,0, cstack
  2360 ;; Tracked objects:
  2361 ;;		On entry : 0/0
  2362 ;;		On exit  : 0/0
  2363 ;;		Unchanged: 0/0
  2364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2365 ;;      Params:         0       0       0       0       0       0       0       0       0
  2366 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2367 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2368 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2369 ;;Total ram usage:        0 bytes
  2370 ;; Hardware stack levels used:    1
  2371 ;; Hardware stack levels required when called:    5
  2372 ;; This function calls:
  2373 ;;		_pwmD
  2374 ;; This function is called by:
  2375 ;;		_manual
  2376 ;; This function uses a non-reentrant model
  2377 ;;
  2378                           
  2379                           	psect	text11
  2380  0013C8                     __ptext11:
  2381                           	opt stack 0
  2382  0013C8                     _derecha:
  2383                           	opt stack 24
  2384                           
  2385                           ;main.c: 442: pwmD();
  2386                           
  2387                           ;incstack = 0
  2388  0013C8  EC37  F005         	call	_pwmD	;wreg free
  2389                           
  2390                           ;main.c: 443: LATB0 = 1;
  2391  0013CC  808A               	bsf	3978,0,c	;volatile
  2392                           
  2393                           ;main.c: 444: LATB1 = 0;
  2394  0013CE  928A               	bcf	3978,1,c	;volatile
  2395                           
  2396                           ;main.c: 445: LATB2 = 1;
  2397  0013D0  848A               	bsf	3978,2,c	;volatile
  2398                           
  2399                           ;main.c: 446: LATB3 = 0;
  2400  0013D2  968A               	bcf	3978,3,c	;volatile
  2401  0013D4  0012               	return		;funcret
  2402  0013D6                     __end_of_derecha:
  2403                           	opt stack 0
  2404                           tblptru	equ	0xFF8
  2405                           tblptrh	equ	0xFF7
  2406                           tblptrl	equ	0xFF6
  2407                           tablat	equ	0xFF5
  2408                           intcon	equ	0xFF2
  2409                           intcon2	equ	0xFF1
  2410                           postinc0	equ	0xFEE
  2411                           wreg	equ	0xFE8
  2412                           status	equ	0xFD8
  2413                           
  2414 ;; *************** function _pwmD *****************
  2415 ;; Defined at:
  2416 ;;		line 377 in file "main.c"
  2417 ;; Parameters:    Size  Location     Type
  2418 ;;		None
  2419 ;; Auto vars:     Size  Location     Type
  2420 ;;		None
  2421 ;; Return value:  Size  Location     Type
  2422 ;;                  1    wreg      void 
  2423 ;; Registers used:
  2424 ;;		wreg, status,2, status,0, cstack
  2425 ;; Tracked objects:
  2426 ;;		On entry : 0/0
  2427 ;;		On exit  : 0/0
  2428 ;;		Unchanged: 0/0
  2429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2430 ;;      Params:         0       0       0       0       0       0       0       0       0
  2431 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2432 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2433 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2434 ;;Total ram usage:        0 bytes
  2435 ;; Hardware stack levels used:    1
  2436 ;; Hardware stack levels required when called:    4
  2437 ;; This function calls:
  2438 ;;		___ftge
  2439 ;;		___ftmul
  2440 ;;		___fttol
  2441 ;; This function is called by:
  2442 ;;		_derecha
  2443 ;; This function uses a non-reentrant model
  2444 ;;
  2445                           
  2446                           	psect	text12
  2447  000A6E                     __ptext12:
  2448                           	opt stack 0
  2449  000A6E                     _pwmD:
  2450                           	opt stack 24
  2451                           
  2452                           ;main.c: 378: if (y == 3) {
  2453                           
  2454                           ;incstack = 0
  2455  000A6E  0E03               	movlw	3
  2456  000A70  184D               	xorwf	_y,w,c
  2457  000A72  104E               	iorwf	_y+1,w,c
  2458  000A74  A4D8               	btfss	status,2,c
  2459  000A76  D014               	goto	l2571
  2460                           
  2461                           ;main.c: 379: duty_cicle1 = 373.3;
  2462  000A78  0EA6               	movlw	166
  2463  000A7A  6E4A               	movwf	_duty_cicle1,c
  2464  000A7C  0EBA               	movlw	186
  2465  000A7E  6E4B               	movwf	_duty_cicle1+1,c
  2466  000A80  0E43               	movlw	67
  2467  000A82  6E4C               	movwf	_duty_cicle1+2,c
  2468                           
  2469                           ;main.c: 380: duty_cicle2 = 190;
  2470  000A84  0E00               	movlw	0
  2471  000A86  6E47               	movwf	_duty_cicle2,c
  2472  000A88  0E3E               	movlw	62
  2473  000A8A  6E48               	movwf	_duty_cicle2+1,c
  2474  000A8C  0E43               	movlw	67
  2475  000A8E  6E49               	movwf	_duty_cicle2+2,c
  2476                           
  2477                           ;main.c: 381: y = 1;
  2478  000A90  0E00               	movlw	0
  2479  000A92  6E4E               	movwf	_y+1,c
  2480  000A94  0E01               	movlw	1
  2481  000A96  6E4D               	movwf	_y,c
  2482                           
  2483                           ;main.c: 382: y = 2;
  2484  000A98  0E00               	movlw	0
  2485  000A9A  6E4E               	movwf	_y+1,c
  2486  000A9C  0E02               	movlw	2
  2487  000A9E  6E4D               	movwf	_y,c
  2488  000AA0                     l2571:
  2489                           
  2490                           ;main.c: 383: }
  2491                           ;main.c: 384: conversion1 = (float) duty_cicle1 * (500.0 / 1023.0);
  2492  000AA0  C04A  F01C         	movff	_duty_cicle1,___ftmul@f1
  2493  000AA4  C04B  F01D         	movff	_duty_cicle1+1,___ftmul@f1+1
  2494  000AA8  C04C  F01E         	movff	_duty_cicle1+2,___ftmul@f1+2
  2495  000AAC  0E3F               	movlw	63
  2496  000AAE  6E1F               	movwf	___ftmul@f2,c
  2497  000AB0  0EFA               	movlw	250
  2498  000AB2  6E20               	movwf	___ftmul@f2+1,c
  2499  000AB4  0E3E               	movlw	62
  2500  000AB6  6E21               	movwf	___ftmul@f2+2,c
  2501  000AB8  ECD5  F006         	call	___ftmul	;wreg free
  2502  000ABC  C01C  F037         	movff	?___ftmul,_conversion1
  2503  000AC0  C01D  F038         	movff	?___ftmul+1,_conversion1+1
  2504  000AC4  C01E  F039         	movff	?___ftmul+2,_conversion1+2
  2505                           
  2506                           ;main.c: 385: CCPR1L = (int) conversion1 >> 2;
  2507  000AC8  C037  F010         	movff	_conversion1,___fttol@f1
  2508  000ACC  C038  F011         	movff	_conversion1+1,___fttol@f1+1
  2509  000AD0  C039  F012         	movff	_conversion1+2,___fttol@f1+2
  2510  000AD4  EC5B  F006         	call	___fttol	;wreg free
  2511  000AD8  3411               	rlcf	?___fttol+1,w,c
  2512  000ADA  3211               	rrcf	?___fttol+1,f,c
  2513  000ADC  3210               	rrcf	?___fttol,f,c
  2514  000ADE  3411               	rlcf	?___fttol+1,w,c
  2515  000AE0  3211               	rrcf	?___fttol+1,f,c
  2516  000AE2  3210               	rrcf	?___fttol,f,c
  2517  000AE4  5010               	movf	?___fttol,w,c
  2518  000AE6  6EBE               	movwf	4030,c	;volatile
  2519                           
  2520                           ;main.c: 386: CCP1CON = (CCP1CON & 0x0F) | (((int) conversion1 & 0x03) << 4);
  2521  000AE8  C037  F010         	movff	_conversion1,___fttol@f1
  2522  000AEC  C038  F011         	movff	_conversion1+1,___fttol@f1+1
  2523  000AF0  C039  F012         	movff	_conversion1+2,___fttol@f1+2
  2524  000AF4  EC5B  F006         	call	___fttol	;wreg free
  2525  000AF8  0E03               	movlw	3
  2526  000AFA  1610               	andwf	?___fttol,f,c
  2527  000AFC  3A10               	swapf	?___fttol,f,c
  2528  000AFE  0EF0               	movlw	240
  2529  000B00  1610               	andwf	?___fttol,f,c
  2530  000B02  50BD               	movf	4029,w,c	;volatile
  2531  000B04  0B0F               	andlw	15
  2532  000B06  1010               	iorwf	?___fttol,w,c
  2533  000B08  6EBD               	movwf	4029,c	;volatile
  2534                           
  2535                           ;main.c: 387: conversion2 = (float) duty_cicle2 * (500.0 / 1023.0);
  2536  000B0A  C047  F01C         	movff	_duty_cicle2,___ftmul@f1
  2537  000B0E  C048  F01D         	movff	_duty_cicle2+1,___ftmul@f1+1
  2538  000B12  C049  F01E         	movff	_duty_cicle2+2,___ftmul@f1+2
  2539  000B16  0E3F               	movlw	63
  2540  000B18  6E1F               	movwf	___ftmul@f2,c
  2541  000B1A  0EFA               	movlw	250
  2542  000B1C  6E20               	movwf	___ftmul@f2+1,c
  2543  000B1E  0E3E               	movlw	62
  2544  000B20  6E21               	movwf	___ftmul@f2+2,c
  2545  000B22  ECD5  F006         	call	___ftmul	;wreg free
  2546  000B26  C01C  F034         	movff	?___ftmul,_conversion2
  2547  000B2A  C01D  F035         	movff	?___ftmul+1,_conversion2+1
  2548  000B2E  C01E  F036         	movff	?___ftmul+2,_conversion2+2
  2549                           
  2550                           ;main.c: 388: CCPR2L = (int) conversion2 >> 2;
  2551  000B32  C034  F010         	movff	_conversion2,___fttol@f1
  2552  000B36  C035  F011         	movff	_conversion2+1,___fttol@f1+1
  2553  000B3A  C036  F012         	movff	_conversion2+2,___fttol@f1+2
  2554  000B3E  EC5B  F006         	call	___fttol	;wreg free
  2555  000B42  3411               	rlcf	?___fttol+1,w,c
  2556  000B44  3211               	rrcf	?___fttol+1,f,c
  2557  000B46  3210               	rrcf	?___fttol,f,c
  2558  000B48  3411               	rlcf	?___fttol+1,w,c
  2559  000B4A  3211               	rrcf	?___fttol+1,f,c
  2560  000B4C  3210               	rrcf	?___fttol,f,c
  2561  000B4E  5010               	movf	?___fttol,w,c
  2562  000B50  6EBB               	movwf	4027,c	;volatile
  2563                           
  2564                           ;main.c: 389: CCP2CON = (CCP1CON & 0x0F) | (((int) conversion2 & 0x03) << 4);
  2565  000B52  C034  F010         	movff	_conversion2,___fttol@f1
  2566  000B56  C035  F011         	movff	_conversion2+1,___fttol@f1+1
  2567  000B5A  C036  F012         	movff	_conversion2+2,___fttol@f1+2
  2568  000B5E  EC5B  F006         	call	___fttol	;wreg free
  2569  000B62  0E03               	movlw	3
  2570  000B64  1610               	andwf	?___fttol,f,c
  2571  000B66  3A10               	swapf	?___fttol,f,c
  2572  000B68  0EF0               	movlw	240
  2573  000B6A  1610               	andwf	?___fttol,f,c
  2574  000B6C  50BD               	movf	4029,w,c	;volatile
  2575  000B6E  0B0F               	andlw	15
  2576  000B70  1010               	iorwf	?___fttol,w,c
  2577  000B72  6EBA               	movwf	4026,c	;volatile
  2578                           
  2579                           ;main.c: 390: if (conversion1 <= conversion2) {
  2580  000B74  C034  F010         	movff	_conversion2,___ftge@ff1
  2581  000B78  C035  F011         	movff	_conversion2+1,___ftge@ff1+1
  2582  000B7C  C036  F012         	movff	_conversion2+2,___ftge@ff1+2
  2583  000B80  C037  F013         	movff	_conversion1,___ftge@ff2
  2584  000B84  C038  F014         	movff	_conversion1+1,___ftge@ff2+1
  2585  000B88  C039  F015         	movff	_conversion1+2,___ftge@ff2+2
  2586  000B8C  EC0F  F008         	call	___ftge	;wreg free
  2587  000B90  0012               	return	
  2588  000B92                     __end_of_pwmD:
  2589                           	opt stack 0
  2590                           tblptru	equ	0xFF8
  2591                           tblptrh	equ	0xFF7
  2592                           tblptrl	equ	0xFF6
  2593                           tablat	equ	0xFF5
  2594                           intcon	equ	0xFF2
  2595                           intcon2	equ	0xFF1
  2596                           postinc0	equ	0xFEE
  2597                           wreg	equ	0xFE8
  2598                           status	equ	0xFD8
  2599                           
  2600 ;; *************** function _atras *****************
  2601 ;; Defined at:
  2602 ;;		line 432 in file "main.c"
  2603 ;; Parameters:    Size  Location     Type
  2604 ;;		None
  2605 ;; Auto vars:     Size  Location     Type
  2606 ;;		None
  2607 ;; Return value:  Size  Location     Type
  2608 ;;                  1    wreg      void 
  2609 ;; Registers used:
  2610 ;;		wreg, status,2, status,0, cstack
  2611 ;; Tracked objects:
  2612 ;;		On entry : 0/0
  2613 ;;		On exit  : 0/0
  2614 ;;		Unchanged: 0/0
  2615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2616 ;;      Params:         0       0       0       0       0       0       0       0       0
  2617 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2618 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2619 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2620 ;;Total ram usage:        2 bytes
  2621 ;; Hardware stack levels used:    1
  2622 ;; Hardware stack levels required when called:    5
  2623 ;; This function calls:
  2624 ;;		_pwm
  2625 ;; This function is called by:
  2626 ;;		_manual
  2627 ;; This function uses a non-reentrant model
  2628 ;;
  2629                           
  2630                           	psect	text13
  2631  00137C                     __ptext13:
  2632                           	opt stack 0
  2633  00137C                     _atras:
  2634                           	opt stack 24
  2635                           
  2636                           ;main.c: 433: _delay((unsigned long)((100)*(8000000/4000.0)));
  2637                           
  2638                           ;incstack = 0
  2639  00137C  0E02               	movlw	2
  2640  00137E  6E2C               	movwf	(??_atras+1)& (0+255),c
  2641  001380  0E04               	movlw	4
  2642  001382  6E2B               	movwf	??_atras& (0+255),c
  2643  001384  0EBA               	movlw	186
  2644  001386                     u2927:
  2645  001386  2EE8               	decfsz	wreg,f,c
  2646  001388  D7FE               	bra	u2927
  2647  00138A  2E2B               	decfsz	??_atras& (0+255),f,c
  2648  00138C  D7FC               	bra	u2927
  2649  00138E  2E2C               	decfsz	(??_atras+1)& (0+255),f,c
  2650  001390  D7FA               	bra	u2927
  2651  001392  D000               	nop2	
  2652                           
  2653                           ;main.c: 434: pwm();
  2654  001394  EC4F  F007         	call	_pwm	;wreg free
  2655                           
  2656                           ;main.c: 435: LATB0 = 0;
  2657  001398  908A               	bcf	3978,0,c	;volatile
  2658                           
  2659                           ;main.c: 436: LATB1 = 1;
  2660  00139A  828A               	bsf	3978,1,c	;volatile
  2661                           
  2662                           ;main.c: 437: LATB2 = 0;
  2663  00139C  948A               	bcf	3978,2,c	;volatile
  2664                           
  2665                           ;main.c: 438: LATB3 = 1;
  2666  00139E  868A               	bsf	3978,3,c	;volatile
  2667  0013A0  0012               	return		;funcret
  2668  0013A2                     __end_of_atras:
  2669                           	opt stack 0
  2670                           tblptru	equ	0xFF8
  2671                           tblptrh	equ	0xFF7
  2672                           tblptrl	equ	0xFF6
  2673                           tablat	equ	0xFF5
  2674                           intcon	equ	0xFF2
  2675                           intcon2	equ	0xFF1
  2676                           postinc0	equ	0xFEE
  2677                           wreg	equ	0xFE8
  2678                           status	equ	0xFD8
  2679                           
  2680 ;; *************** function _automatico *****************
  2681 ;; Defined at:
  2682 ;;		line 222 in file "main.c"
  2683 ;; Parameters:    Size  Location     Type
  2684 ;;		None
  2685 ;; Auto vars:     Size  Location     Type
  2686 ;;		None
  2687 ;; Return value:  Size  Location     Type
  2688 ;;                  1    wreg      void 
  2689 ;; Registers used:
  2690 ;;		wreg, status,2, status,0, cstack
  2691 ;; Tracked objects:
  2692 ;;		On entry : 0/0
  2693 ;;		On exit  : 0/0
  2694 ;;		Unchanged: 0/0
  2695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2696 ;;      Params:         0       0       0       0       0       0       0       0       0
  2697 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2698 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2699 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2700 ;;Total ram usage:        2 bytes
  2701 ;; Hardware stack levels used:    1
  2702 ;; Hardware stack levels required when called:    6
  2703 ;; This function calls:
  2704 ;;		___ftge
  2705 ;;		_adelante
  2706 ;;		_freno
  2707 ;;		_izquierda
  2708 ;;		_start2
  2709 ;; This function is called by:
  2710 ;;		_main
  2711 ;; This function uses a non-reentrant model
  2712 ;;
  2713                           
  2714                           	psect	text14
  2715  000012                     __ptext14:
  2716                           	opt stack 0
  2717  000012                     _automatico:
  2718                           	opt stack 24
  2719                           
  2720                           ;main.c: 223: for (i = 0; i <= 3; i++) {
  2721                           
  2722                           ;incstack = 0
  2723  000012  0E00               	movlw	0
  2724  000014  6E43               	movwf	_i+1,c
  2725  000016  0E00               	movlw	0
  2726  000018  6E42               	movwf	_i,c
  2727  00001A  BE43               	btfsc	_i+1,7,c
  2728  00001C  D008               	goto	l2873
  2729  00001E  5043               	movf	_i+1,w,c
  2730  000020  E105               	bnz	u2820
  2731  000022  0E04               	movlw	4
  2732  000024  5C42               	subwf	_i,w,c
  2733  000026  B0D8               	btfsc	status,0,c
  2734  000028  D10F               	goto	l2943
  2735  00002A  D001               	goto	l2873
  2736  00002C                     u2820:
  2737  00002C  D10D               	goto	l2943
  2738  00002E                     l2873:
  2739                           
  2740                           ;main.c: 225: start2();
  2741  00002E  EC90  F008         	call	_start2	;wreg free
  2742                           
  2743                           ;main.c: 226: while (b >= 4.5) {
  2744  000032  D002               	goto	l245
  2745  000034                     l2875:
  2746                           
  2747                           ;main.c: 227: start2();
  2748  000034  EC90  F008         	call	_start2	;wreg free
  2749  000038                     l245:
  2750  000038  C031  F010         	movff	_b,___ftge@ff1
  2751  00003C  C032  F011         	movff	_b+1,___ftge@ff1+1
  2752  000040  C033  F012         	movff	_b+2,___ftge@ff1+2
  2753  000044  0E00               	movlw	0
  2754  000046  6E13               	movwf	___ftge@ff2,c
  2755  000048  0E90               	movlw	144
  2756  00004A  6E14               	movwf	___ftge@ff2+1,c
  2757  00004C  0E40               	movlw	64
  2758  00004E  6E15               	movwf	___ftge@ff2+2,c
  2759  000050  EC0F  F008         	call	___ftge	;wreg free
  2760  000054  B0D8               	btfsc	status,0,c
  2761  000056  D7EE               	goto	l2875
  2762                           
  2763                           ;main.c: 228: }
  2764                           ;main.c: 229: adelante();
  2765  000058  ECD1  F009         	call	_adelante	;wreg free
  2766                           
  2767                           ;main.c: 230: _delay((unsigned long)((2400)*(8000000/4000.0)));
  2768  00005C  0E19               	movlw	25
  2769  00005E  6E2E               	movwf	(??_automatico+1)& (0+255),c
  2770  000060  0E5A               	movlw	90
  2771  000062  6E2D               	movwf	??_automatico& (0+255),c
  2772  000064  0EB2               	movlw	178
  2773  000066                     u2937:
  2774  000066  2EE8               	decfsz	wreg,f,c
  2775  000068  D7FE               	bra	u2937
  2776  00006A  2E2D               	decfsz	??_automatico& (0+255),f,c
  2777  00006C  D7FC               	bra	u2937
  2778  00006E  2E2E               	decfsz	(??_automatico+1)& (0+255),f,c
  2779  000070  D7FA               	bra	u2937
  2780                           
  2781                           ;main.c: 231: freno();
  2782  000072  ECF7  F009         	call	_freno	;wreg free
  2783                           
  2784                           ;main.c: 232: _delay((unsigned long)((2000)*(8000000/4000.0)));
  2785  000076  0E15               	movlw	21
  2786  000078  6E2E               	movwf	(??_automatico+1)& (0+255),c
  2787  00007A  0E4B               	movlw	75
  2788  00007C  6E2D               	movwf	??_automatico& (0+255),c
  2789  00007E  0EBE               	movlw	190
  2790  000080                     u2947:
  2791  000080  2EE8               	decfsz	wreg,f,c
  2792  000082  D7FE               	bra	u2947
  2793  000084  2E2D               	decfsz	??_automatico& (0+255),f,c
  2794  000086  D7FC               	bra	u2947
  2795  000088  2E2E               	decfsz	(??_automatico+1)& (0+255),f,c
  2796  00008A  D7FA               	bra	u2947
  2797  00008C  D000               	nop2	
  2798                           
  2799                           ;main.c: 233: izquierda();
  2800  00008E  ECEB  F009         	call	_izquierda	;wreg free
  2801                           
  2802                           ;main.c: 234: _delay((unsigned long)((800)*(8000000/4000.0)));
  2803  000092  0E09               	movlw	9
  2804  000094  6E2E               	movwf	(??_automatico+1)& (0+255),c
  2805  000096  0E1E               	movlw	30
  2806  000098  6E2D               	movwf	??_automatico& (0+255),c
  2807  00009A  0EE4               	movlw	228
  2808  00009C                     u2957:
  2809  00009C  2EE8               	decfsz	wreg,f,c
  2810  00009E  D7FE               	bra	u2957
  2811  0000A0  2E2D               	decfsz	??_automatico& (0+255),f,c
  2812  0000A2  D7FC               	bra	u2957
  2813  0000A4  2E2E               	decfsz	(??_automatico+1)& (0+255),f,c
  2814  0000A6  D7FA               	bra	u2957
  2815  0000A8  D000               	nop2	
  2816                           
  2817                           ;main.c: 235: freno();
  2818  0000AA  ECF7  F009         	call	_freno	;wreg free
  2819                           
  2820                           ;main.c: 236: _delay((unsigned long)((2000)*(8000000/4000.0)));
  2821  0000AE  0E15               	movlw	21
  2822  0000B0  6E2E               	movwf	(??_automatico+1)& (0+255),c
  2823  0000B2  0E4B               	movlw	75
  2824  0000B4  6E2D               	movwf	??_automatico& (0+255),c
  2825  0000B6  0EBE               	movlw	190
  2826  0000B8                     u2967:
  2827  0000B8  2EE8               	decfsz	wreg,f,c
  2828  0000BA  D7FE               	bra	u2967
  2829  0000BC  2E2D               	decfsz	??_automatico& (0+255),f,c
  2830  0000BE  D7FC               	bra	u2967
  2831  0000C0  2E2E               	decfsz	(??_automatico+1)& (0+255),f,c
  2832  0000C2  D7FA               	bra	u2967
  2833  0000C4  D000               	nop2	
  2834                           
  2835                           ;main.c: 237: adelante();
  2836  0000C6  ECD1  F009         	call	_adelante	;wreg free
  2837                           
  2838                           ;main.c: 238: _delay((unsigned long)((2200)*(8000000/4000.0)));
  2839  0000CA  0E17               	movlw	23
  2840  0000CC  6E2E               	movwf	(??_automatico+1)& (0+255),c
  2841  0000CE  0E53               	movlw	83
  2842  0000D0  6E2D               	movwf	??_automatico& (0+255),c
  2843  0000D2  0E38               	movlw	56
  2844  0000D4                     u2977:
  2845  0000D4  2EE8               	decfsz	wreg,f,c
  2846  0000D6  D7FE               	bra	u2977
  2847  0000D8  2E2D               	decfsz	??_automatico& (0+255),f,c
  2848  0000DA  D7FC               	bra	u2977
  2849  0000DC  2E2E               	decfsz	(??_automatico+1)& (0+255),f,c
  2850  0000DE  D7FA               	bra	u2977
  2851                           
  2852                           ;main.c: 239: freno();
  2853  0000E0  ECF7  F009         	call	_freno	;wreg free
  2854                           
  2855                           ;main.c: 240: _delay((unsigned long)((2900)*(8000000/4000.0)));
  2856  0000E4  0E1E               	movlw	30
  2857  0000E6  6E2E               	movwf	(??_automatico+1)& (0+255),c
  2858  0000E8  0E6D               	movlw	109
  2859  0000EA  6E2D               	movwf	??_automatico& (0+255),c
  2860  0000EC  0E62               	movlw	98
  2861  0000EE                     u2987:
  2862  0000EE  2EE8               	decfsz	wreg,f,c
  2863  0000F0  D7FE               	bra	u2987
  2864  0000F2  2E2D               	decfsz	??_automatico& (0+255),f,c
  2865  0000F4  D7FC               	bra	u2987
  2866  0000F6  2E2E               	decfsz	(??_automatico+1)& (0+255),f,c
  2867  0000F8  D7FA               	bra	u2987
  2868                           
  2869                           ;main.c: 241: start2();
  2870  0000FA  EC90  F008         	call	_start2	;wreg free
  2871                           
  2872                           ;main.c: 243: while (b < 4.5) {
  2873  0000FE  D002               	goto	l248
  2874  000100                     l2901:
  2875                           
  2876                           ;main.c: 244: start2();
  2877  000100  EC90  F008         	call	_start2	;wreg free
  2878  000104                     l248:
  2879  000104  C031  F010         	movff	_b,___ftge@ff1
  2880  000108  C032  F011         	movff	_b+1,___ftge@ff1+1
  2881  00010C  C033  F012         	movff	_b+2,___ftge@ff1+2
  2882  000110  0E00               	movlw	0
  2883  000112  6E13               	movwf	___ftge@ff2,c
  2884  000114  0E90               	movlw	144
  2885  000116  6E14               	movwf	___ftge@ff2+1,c
  2886  000118  0E40               	movlw	64
  2887  00011A  6E15               	movwf	___ftge@ff2+2,c
  2888  00011C  EC0F  F008         	call	___ftge	;wreg free
  2889  000120  A0D8               	btfss	status,0,c
  2890  000122  D7EE               	goto	l2901
  2891                           
  2892                           ;main.c: 245: }
  2893                           ;main.c: 246: izquierda();
  2894  000124  ECEB  F009         	call	_izquierda	;wreg free
  2895                           
  2896                           ;main.c: 247: _delay((unsigned long)((800)*(8000000/4000.0)));
  2897  000128  0E09               	movlw	9
  2898  00012A  6E2E               	movwf	(??_automatico+1)& (0+255),c
  2899  00012C  0E1E               	movlw	30
  2900  00012E  6E2D               	movwf	??_automatico& (0+255),c
  2901  000130  0EE4               	movlw	228
  2902  000132                     u2997:
  2903  000132  2EE8               	decfsz	wreg,f,c
  2904  000134  D7FE               	bra	u2997
  2905  000136  2E2D               	decfsz	??_automatico& (0+255),f,c
  2906  000138  D7FC               	bra	u2997
  2907  00013A  2E2E               	decfsz	(??_automatico+1)& (0+255),f,c
  2908  00013C  D7FA               	bra	u2997
  2909  00013E  D000               	nop2	
  2910                           
  2911                           ;main.c: 248: freno();
  2912  000140  ECF7  F009         	call	_freno	;wreg free
  2913                           
  2914                           ;main.c: 249: _delay((unsigned long)((2000)*(8000000/4000.0)));
  2915  000144  0E15               	movlw	21
  2916  000146  6E2E               	movwf	(??_automatico+1)& (0+255),c
  2917  000148  0E4B               	movlw	75
  2918  00014A  6E2D               	movwf	??_automatico& (0+255),c
  2919  00014C  0EBE               	movlw	190
  2920  00014E                     u3007:
  2921  00014E  2EE8               	decfsz	wreg,f,c
  2922  000150  D7FE               	bra	u3007
  2923  000152  2E2D               	decfsz	??_automatico& (0+255),f,c
  2924  000154  D7FC               	bra	u3007
  2925  000156  2E2E               	decfsz	(??_automatico+1)& (0+255),f,c
  2926  000158  D7FA               	bra	u3007
  2927  00015A  D000               	nop2	
  2928                           
  2929                           ;main.c: 250: adelante();
  2930  00015C  ECD1  F009         	call	_adelante	;wreg free
  2931                           
  2932                           ;main.c: 251: _delay((unsigned long)((1900)*(8000000/4000.0)));
  2933  000160  0E14               	movlw	20
  2934  000162  6E2E               	movwf	(??_automatico+1)& (0+255),c
  2935  000164  0E48               	movlw	72
  2936  000166  6E2D               	movwf	??_automatico& (0+255),c
  2937  000168  0E01               	movlw	1
  2938  00016A                     u3017:
  2939  00016A  2EE8               	decfsz	wreg,f,c
  2940  00016C  D7FE               	bra	u3017
  2941  00016E  2E2D               	decfsz	??_automatico& (0+255),f,c
  2942  000170  D7FC               	bra	u3017
  2943  000172  2E2E               	decfsz	(??_automatico+1)& (0+255),f,c
  2944  000174  D7FA               	bra	u3017
  2945  000176  F000               	nop	
  2946                           
  2947                           ;main.c: 252: freno();
  2948  000178  ECF7  F009         	call	_freno	;wreg free
  2949                           
  2950                           ;main.c: 253: _delay((unsigned long)((2000)*(8000000/4000.0)));
  2951  00017C  0E15               	movlw	21
  2952  00017E  6E2E               	movwf	(??_automatico+1)& (0+255),c
  2953  000180  0E4B               	movlw	75
  2954  000182  6E2D               	movwf	??_automatico& (0+255),c
  2955  000184  0EBE               	movlw	190
  2956  000186                     u3027:
  2957  000186  2EE8               	decfsz	wreg,f,c
  2958  000188  D7FE               	bra	u3027
  2959  00018A  2E2D               	decfsz	??_automatico& (0+255),f,c
  2960  00018C  D7FC               	bra	u3027
  2961  00018E  2E2E               	decfsz	(??_automatico+1)& (0+255),f,c
  2962  000190  D7FA               	bra	u3027
  2963  000192  D000               	nop2	
  2964                           
  2965                           ;main.c: 254: izquierda();
  2966  000194  ECEB  F009         	call	_izquierda	;wreg free
  2967                           
  2968                           ;main.c: 255: _delay((unsigned long)((800)*(8000000/4000.0)));
  2969  000198  0E09               	movlw	9
  2970  00019A  6E2E               	movwf	(??_automatico+1)& (0+255),c
  2971  00019C  0E1E               	movlw	30
  2972  00019E  6E2D               	movwf	??_automatico& (0+255),c
  2973  0001A0  0EE4               	movlw	228
  2974  0001A2                     u3037:
  2975  0001A2  2EE8               	decfsz	wreg,f,c
  2976  0001A4  D7FE               	bra	u3037
  2977  0001A6  2E2D               	decfsz	??_automatico& (0+255),f,c
  2978  0001A8  D7FC               	bra	u3037
  2979  0001AA  2E2E               	decfsz	(??_automatico+1)& (0+255),f,c
  2980  0001AC  D7FA               	bra	u3037
  2981  0001AE  D000               	nop2	
  2982                           
  2983                           ;main.c: 256: freno();
  2984  0001B0  ECF7  F009         	call	_freno	;wreg free
  2985                           
  2986                           ;main.c: 257: _delay((unsigned long)((2000)*(8000000/4000.0)));
  2987  0001B4  0E15               	movlw	21
  2988  0001B6  6E2E               	movwf	(??_automatico+1)& (0+255),c
  2989  0001B8  0E4B               	movlw	75
  2990  0001BA  6E2D               	movwf	??_automatico& (0+255),c
  2991  0001BC  0EBE               	movlw	190
  2992  0001BE                     u3047:
  2993  0001BE  2EE8               	decfsz	wreg,f,c
  2994  0001C0  D7FE               	bra	u3047
  2995  0001C2  2E2D               	decfsz	??_automatico& (0+255),f,c
  2996  0001C4  D7FC               	bra	u3047
  2997  0001C6  2E2E               	decfsz	(??_automatico+1)& (0+255),f,c
  2998  0001C8  D7FA               	bra	u3047
  2999  0001CA  D000               	nop2	
  3000                           
  3001                           ;main.c: 258: adelante();
  3002  0001CC  ECD1  F009         	call	_adelante	;wreg free
  3003                           
  3004                           ;main.c: 259: _delay((unsigned long)((1800)*(8000000/4000.0)));
  3005  0001D0  0E13               	movlw	19
  3006  0001D2  6E2E               	movwf	(??_automatico+1)& (0+255),c
  3007  0001D4  0E44               	movlw	68
  3008  0001D6  6E2D               	movwf	??_automatico& (0+255),c
  3009  0001D8  0E44               	movlw	68
  3010  0001DA                     u3057:
  3011  0001DA  2EE8               	decfsz	wreg,f,c
  3012  0001DC  D7FE               	bra	u3057
  3013  0001DE  2E2D               	decfsz	??_automatico& (0+255),f,c
  3014  0001E0  D7FC               	bra	u3057
  3015  0001E2  2E2E               	decfsz	(??_automatico+1)& (0+255),f,c
  3016  0001E4  D7FA               	bra	u3057
  3017  0001E6  D000               	nop2	
  3018                           
  3019                           ;main.c: 260: freno();
  3020  0001E8  ECF7  F009         	call	_freno	;wreg free
  3021                           
  3022                           ;main.c: 261: _delay((unsigned long)((2000)*(8000000/4000.0)));
  3023  0001EC  0E15               	movlw	21
  3024  0001EE  6E2E               	movwf	(??_automatico+1)& (0+255),c
  3025  0001F0  0E4B               	movlw	75
  3026  0001F2  6E2D               	movwf	??_automatico& (0+255),c
  3027  0001F4  0EBE               	movlw	190
  3028  0001F6                     u3067:
  3029  0001F6  2EE8               	decfsz	wreg,f,c
  3030  0001F8  D7FE               	bra	u3067
  3031  0001FA  2E2D               	decfsz	??_automatico& (0+255),f,c
  3032  0001FC  D7FC               	bra	u3067
  3033  0001FE  2E2E               	decfsz	(??_automatico+1)& (0+255),f,c
  3034  000200  D7FA               	bra	u3067
  3035  000202  D000               	nop2	
  3036                           
  3037                           ;main.c: 262: izquierda();
  3038  000204  ECEB  F009         	call	_izquierda	;wreg free
  3039                           
  3040                           ;main.c: 263: _delay((unsigned long)((800)*(8000000/4000.0)));
  3041  000208  0E09               	movlw	9
  3042  00020A  6E2E               	movwf	(??_automatico+1)& (0+255),c
  3043  00020C  0E1E               	movlw	30
  3044  00020E  6E2D               	movwf	??_automatico& (0+255),c
  3045  000210  0EE4               	movlw	228
  3046  000212                     u3077:
  3047  000212  2EE8               	decfsz	wreg,f,c
  3048  000214  D7FE               	bra	u3077
  3049  000216  2E2D               	decfsz	??_automatico& (0+255),f,c
  3050  000218  D7FC               	bra	u3077
  3051  00021A  2E2E               	decfsz	(??_automatico+1)& (0+255),f,c
  3052  00021C  D7FA               	bra	u3077
  3053  00021E  D000               	nop2	
  3054                           
  3055                           ;main.c: 264: freno();
  3056  000220  ECF7  F009         	call	_freno	;wreg free
  3057                           
  3058                           ;main.c: 265: _delay((unsigned long)((5000)*(8000000/4000.0)));
  3059  000224  0E33               	movlw	51
  3060  000226  6E2E               	movwf	(??_automatico+1)& (0+255),c
  3061  000228  0EBB               	movlw	187
  3062  00022A  6E2D               	movwf	??_automatico& (0+255),c
  3063  00022C  0EE0               	movlw	224
  3064  00022E                     u3087:
  3065  00022E  2EE8               	decfsz	wreg,f,c
  3066  000230  D7FE               	bra	u3087
  3067  000232  2E2D               	decfsz	??_automatico& (0+255),f,c
  3068  000234  D7FC               	bra	u3087
  3069  000236  2E2E               	decfsz	(??_automatico+1)& (0+255),f,c
  3070  000238  D7FA               	bra	u3087
  3071  00023A  4A42               	infsnz	_i,f,c
  3072  00023C  2A43               	incf	_i+1,f,c
  3073  00023E  BE43               	btfsc	_i+1,7,c
  3074  000240  D6F6               	goto	l2873
  3075  000242  5043               	movf	_i+1,w,c
  3076  000244  E101               	bnz	l2943
  3077  000246  D6ED               	goto	L1
  3078  000248                     l2943:
  3079                           
  3080                           ;main.c: 268: }
  3081                           ;main.c: 269: ADCON0 = 0x01;
  3082  000248  0E01               	movlw	1
  3083  00024A  6EC2               	movwf	4034,c	;volatile
  3084                           
  3085                           ;main.c: 270: x = 0;
  3086  00024C  0E00               	movlw	0
  3087  00024E  6E41               	movwf	_x+1,c
  3088  000250  0E00               	movlw	0
  3089  000252  6E40               	movwf	_x,c
  3090                           
  3091                           ;main.c: 271: freno();
  3092  000254  ECF7  F009         	call	_freno	;wreg free
  3093  000258  0012               	return		;funcret
  3094  00025A                     __end_of_automatico:
  3095                           	opt stack 0
  3096                           tblptru	equ	0xFF8
  3097                           tblptrh	equ	0xFF7
  3098                           tblptrl	equ	0xFF6
  3099                           tablat	equ	0xFF5
  3100                           intcon	equ	0xFF2
  3101                           intcon2	equ	0xFF1
  3102                           postinc0	equ	0xFEE
  3103                           wreg	equ	0xFE8
  3104                           status	equ	0xFD8
  3105                           
  3106 ;; *************** function _start2 *****************
  3107 ;; Defined at:
  3108 ;;		line 162 in file "main.c"
  3109 ;; Parameters:    Size  Location     Type
  3110 ;;		None
  3111 ;; Auto vars:     Size  Location     Type
  3112 ;;		None
  3113 ;; Return value:  Size  Location     Type
  3114 ;;                  1    wreg      void 
  3115 ;; Registers used:
  3116 ;;		wreg, status,2, status,0, cstack
  3117 ;; Tracked objects:
  3118 ;;		On entry : 0/0
  3119 ;;		On exit  : 0/0
  3120 ;;		Unchanged: 0/0
  3121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3122 ;;      Params:         0       0       0       0       0       0       0       0       0
  3123 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3124 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3125 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3126 ;;Total ram usage:        2 bytes
  3127 ;; Hardware stack levels used:    1
  3128 ;; Hardware stack levels required when called:    4
  3129 ;; This function calls:
  3130 ;;		___awtoft
  3131 ;;		___ftmul
  3132 ;; This function is called by:
  3133 ;;		_automatico
  3134 ;; This function uses a non-reentrant model
  3135 ;;
  3136                           
  3137                           	psect	text15
  3138  001120                     __ptext15:
  3139                           	opt stack 0
  3140  001120                     _start2:
  3141                           	opt stack 25
  3142                           
  3143                           ;main.c: 163: ADCON0bits.GO = 1;
  3144                           
  3145                           ;incstack = 0
  3146  001120  82C2               	bsf	4034,1,c	;volatile
  3147  001122                     l195:
  3148  001122  B2C2               	btfsc	4034,1,c	;volatile
  3149  001124  D7FE               	goto	l195
  3150                           
  3151                           ;main.c: 165: if (x == 2) {
  3152  001126  0E02               	movlw	2
  3153  001128  1840               	xorwf	_x,w,c
  3154  00112A  1041               	iorwf	_x+1,w,c
  3155  00112C  A4D8               	btfss	status,2,c
  3156  00112E  0012               	return	
  3157                           
  3158                           ;main.c: 166: _delay((unsigned long)((10)*(8000000/4000.0)));
  3159  001130  0E1A               	movlw	26
  3160  001132  6E2B               	movwf	??_start2& (0+255),c
  3161  001134  0EF8               	movlw	248
  3162  001136                     u3097:
  3163  001136  2EE8               	decfsz	wreg,f,c
  3164  001138  D7FE               	bra	u3097
  3165  00113A  2E2B               	decfsz	??_start2& (0+255),f,c
  3166  00113C  D7FC               	bra	u3097
  3167  00113E  D000               	nop2	
  3168                           
  3169                           ;main.c: 167: a = ADRESH << 8 | ADRESL;
  3170  001140  50C3               	movf	4035,w,c	;volatile
  3171  001142  CFC4 F02B          	movff	4036,??_start2	;volatile
  3172  001146  6A2C               	clrf	(??_start2+1)& (0+255),c
  3173  001148  C02B  F02C         	movff	??_start2,??_start2+1
  3174  00114C  6A2B               	clrf	??_start2,c
  3175  00114E  102B               	iorwf	??_start2,w,c
  3176  001150  6E3A               	movwf	_a,c
  3177  001152  502C               	movf	??_start2+1,w,c
  3178  001154  6E3B               	movwf	_a+1,c
  3179                           
  3180                           ;main.c: 168: b = (float) a * (5.0 / 1023.0);
  3181  001156  C03A  F018         	movff	_a,___awtoft@c
  3182  00115A  C03B  F019         	movff	_a+1,___awtoft@c+1
  3183  00115E  ECA2  F009         	call	___awtoft	;wreg free
  3184  001162  C018  F01C         	movff	?___awtoft,___ftmul@f1
  3185  001166  C019  F01D         	movff	?___awtoft+1,___ftmul@f1+1
  3186  00116A  C01A  F01E         	movff	?___awtoft+2,___ftmul@f1+2
  3187  00116E  0E28               	movlw	40
  3188  001170  6E1F               	movwf	___ftmul@f2,c
  3189  001172  0EA0               	movlw	160
  3190  001174  6E20               	movwf	___ftmul@f2+1,c
  3191  001176  0E3B               	movlw	59
  3192  001178  6E21               	movwf	___ftmul@f2+2,c
  3193  00117A  ECD5  F006         	call	___ftmul	;wreg free
  3194  00117E  C01C  F031         	movff	?___ftmul,_b
  3195  001182  C01D  F032         	movff	?___ftmul+1,_b+1
  3196  001186  C01E  F033         	movff	?___ftmul+2,_b+2
  3197                           
  3198                           ;main.c: 169: _delay((unsigned long)((3)*(8000000/4000000.0)));
  3199  00118A  D000               	nop2		;2 cycle nop
  3200  00118C  D000               	nop2		;2 cycle nop
  3201  00118E  D000               	nop2		;2 cycle nop
  3202  001190  0012               	return	
  3203  001192                     __end_of_start2:
  3204                           	opt stack 0
  3205                           tblptru	equ	0xFF8
  3206                           tblptrh	equ	0xFF7
  3207                           tblptrl	equ	0xFF6
  3208                           tablat	equ	0xFF5
  3209                           intcon	equ	0xFF2
  3210                           intcon2	equ	0xFF1
  3211                           postinc0	equ	0xFEE
  3212                           wreg	equ	0xFE8
  3213                           status	equ	0xFD8
  3214                           
  3215 ;; *************** function ___awtoft *****************
  3216 ;; Defined at:
  3217 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awtoft.c"
  3218 ;; Parameters:    Size  Location     Type
  3219 ;;  c               2   23[COMRAM] int 
  3220 ;; Auto vars:     Size  Location     Type
  3221 ;;  sign            1   26[COMRAM] unsigned char 
  3222 ;; Return value:  Size  Location     Type
  3223 ;;                  3   23[COMRAM] float 
  3224 ;; Registers used:
  3225 ;;		wreg, status,2, status,0, cstack
  3226 ;; Tracked objects:
  3227 ;;		On entry : 0/0
  3228 ;;		On exit  : 0/0
  3229 ;;		Unchanged: 0/0
  3230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3231 ;;      Params:         3       0       0       0       0       0       0       0       0
  3232 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3233 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3234 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3235 ;;Total ram usage:        4 bytes
  3236 ;; Hardware stack levels used:    1
  3237 ;; Hardware stack levels required when called:    3
  3238 ;; This function calls:
  3239 ;;		___ftpack
  3240 ;; This function is called by:
  3241 ;;		_start
  3242 ;;		_start1
  3243 ;;		_start2
  3244 ;; This function uses a non-reentrant model
  3245 ;;
  3246                           
  3247                           	psect	text16
  3248  001344                     __ptext16:
  3249                           	opt stack 0
  3250  001344                     ___awtoft:
  3251                           	opt stack 26
  3252                           
  3253                           ;incstack = 0
  3254  001344  0E00               	movlw	0
  3255  001346  6E1B               	movwf	___awtoft@sign,c
  3256  001348  AE19               	btfss	___awtoft@c+1,7,c
  3257  00134A  D006               	goto	l2663
  3258  00134C  6C18               	negf	___awtoft@c,c
  3259  00134E  1E19               	comf	___awtoft@c+1,f,c
  3260  001350  B0D8               	btfsc	status,0,c
  3261  001352  2A19               	incf	___awtoft@c+1,f,c
  3262  001354  0E01               	movlw	1
  3263  001356  6E1B               	movwf	___awtoft@sign,c
  3264  001358                     l2663:
  3265  001358  C018  F010         	movff	___awtoft@c,___ftpack@arg
  3266  00135C  C019  F011         	movff	___awtoft@c+1,___ftpack@arg+1
  3267  001360  6A12               	clrf	___ftpack@arg+2,c
  3268  001362  0E8E               	movlw	142
  3269  001364  6E13               	movwf	___ftpack@exp,c
  3270  001366  C01B  F014         	movff	___awtoft@sign,___ftpack@sign
  3271  00136A  ECB8  F007         	call	___ftpack	;wreg free
  3272  00136E  C010  F018         	movff	?___ftpack,?___awtoft
  3273  001372  C011  F019         	movff	?___ftpack+1,?___awtoft+1
  3274  001376  C012  F01A         	movff	?___ftpack+2,?___awtoft+2
  3275  00137A  0012               	return	
  3276  00137C                     __end_of___awtoft:
  3277                           	opt stack 0
  3278                           tblptru	equ	0xFF8
  3279                           tblptrh	equ	0xFF7
  3280                           tblptrl	equ	0xFF6
  3281                           tablat	equ	0xFF5
  3282                           intcon	equ	0xFF2
  3283                           intcon2	equ	0xFF1
  3284                           postinc0	equ	0xFEE
  3285                           wreg	equ	0xFE8
  3286                           status	equ	0xFD8
  3287                           
  3288 ;; *************** function _izquierda *****************
  3289 ;; Defined at:
  3290 ;;		line 449 in file "main.c"
  3291 ;; Parameters:    Size  Location     Type
  3292 ;;		None
  3293 ;; Auto vars:     Size  Location     Type
  3294 ;;		None
  3295 ;; Return value:  Size  Location     Type
  3296 ;;                  1    wreg      void 
  3297 ;; Registers used:
  3298 ;;		wreg, status,2, status,0, cstack
  3299 ;; Tracked objects:
  3300 ;;		On entry : 0/0
  3301 ;;		On exit  : 0/0
  3302 ;;		Unchanged: 0/0
  3303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3304 ;;      Params:         0       0       0       0       0       0       0       0       0
  3305 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3306 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3307 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3308 ;;Total ram usage:        0 bytes
  3309 ;; Hardware stack levels used:    1
  3310 ;; Hardware stack levels required when called:    5
  3311 ;; This function calls:
  3312 ;;		_pwmI
  3313 ;; This function is called by:
  3314 ;;		_automatico
  3315 ;;		_manual
  3316 ;; This function uses a non-reentrant model
  3317 ;;
  3318                           
  3319                           	psect	text17
  3320  0013D6                     __ptext17:
  3321                           	opt stack 0
  3322  0013D6                     _izquierda:
  3323                           	opt stack 24
  3324                           
  3325                           ;main.c: 450: pwmI();
  3326                           
  3327                           ;incstack = 0
  3328  0013D6  ECC9  F005         	call	_pwmI	;wreg free
  3329                           
  3330                           ;main.c: 451: LATB0 = 1;
  3331  0013DA  808A               	bsf	3978,0,c	;volatile
  3332                           
  3333                           ;main.c: 452: LATB1 = 0;
  3334  0013DC  928A               	bcf	3978,1,c	;volatile
  3335                           
  3336                           ;main.c: 453: LATB2 = 1;
  3337  0013DE  848A               	bsf	3978,2,c	;volatile
  3338                           
  3339                           ;main.c: 454: LATB3 = 0;
  3340  0013E0  968A               	bcf	3978,3,c	;volatile
  3341  0013E2  0012               	return		;funcret
  3342  0013E4                     __end_of_izquierda:
  3343                           	opt stack 0
  3344                           tblptru	equ	0xFF8
  3345                           tblptrh	equ	0xFF7
  3346                           tblptrl	equ	0xFF6
  3347                           tablat	equ	0xFF5
  3348                           intcon	equ	0xFF2
  3349                           intcon2	equ	0xFF1
  3350                           postinc0	equ	0xFEE
  3351                           wreg	equ	0xFE8
  3352                           status	equ	0xFD8
  3353                           
  3354 ;; *************** function _pwmI *****************
  3355 ;; Defined at:
  3356 ;;		line 359 in file "main.c"
  3357 ;; Parameters:    Size  Location     Type
  3358 ;;		None
  3359 ;; Auto vars:     Size  Location     Type
  3360 ;;		None
  3361 ;; Return value:  Size  Location     Type
  3362 ;;                  1    wreg      void 
  3363 ;; Registers used:
  3364 ;;		wreg, status,2, status,0, cstack
  3365 ;; Tracked objects:
  3366 ;;		On entry : 0/0
  3367 ;;		On exit  : 0/0
  3368 ;;		Unchanged: 0/0
  3369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3370 ;;      Params:         0       0       0       0       0       0       0       0       0
  3371 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3372 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3373 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3374 ;;Total ram usage:        0 bytes
  3375 ;; Hardware stack levels used:    1
  3376 ;; Hardware stack levels required when called:    4
  3377 ;; This function calls:
  3378 ;;		___ftge
  3379 ;;		___ftmul
  3380 ;;		___fttol
  3381 ;; This function is called by:
  3382 ;;		_izquierda
  3383 ;; This function uses a non-reentrant model
  3384 ;;
  3385                           
  3386                           	psect	text18
  3387  000B92                     __ptext18:
  3388                           	opt stack 0
  3389  000B92                     _pwmI:
  3390                           	opt stack 24
  3391                           
  3392                           ;main.c: 360: if (y == 2) {
  3393                           
  3394                           ;incstack = 0
  3395  000B92  0E02               	movlw	2
  3396  000B94  184D               	xorwf	_y,w,c
  3397  000B96  104E               	iorwf	_y+1,w,c
  3398  000B98  A4D8               	btfss	status,2,c
  3399  000B9A  D014               	goto	l2553
  3400                           
  3401                           ;main.c: 361: duty_cicle1 = 190;
  3402  000B9C  0E00               	movlw	0
  3403  000B9E  6E4A               	movwf	_duty_cicle1,c
  3404  000BA0  0E3E               	movlw	62
  3405  000BA2  6E4B               	movwf	_duty_cicle1+1,c
  3406  000BA4  0E43               	movlw	67
  3407  000BA6  6E4C               	movwf	_duty_cicle1+2,c
  3408                           
  3409                           ;main.c: 362: duty_cicle2 = 373.3;
  3410  000BA8  0EA6               	movlw	166
  3411  000BAA  6E47               	movwf	_duty_cicle2,c
  3412  000BAC  0EBA               	movlw	186
  3413  000BAE  6E48               	movwf	_duty_cicle2+1,c
  3414  000BB0  0E43               	movlw	67
  3415  000BB2  6E49               	movwf	_duty_cicle2+2,c
  3416                           
  3417                           ;main.c: 363: y = 1;
  3418  000BB4  0E00               	movlw	0
  3419  000BB6  6E4E               	movwf	_y+1,c
  3420  000BB8  0E01               	movlw	1
  3421  000BBA  6E4D               	movwf	_y,c
  3422                           
  3423                           ;main.c: 364: y = 3;
  3424  000BBC  0E00               	movlw	0
  3425  000BBE  6E4E               	movwf	_y+1,c
  3426  000BC0  0E03               	movlw	3
  3427  000BC2  6E4D               	movwf	_y,c
  3428  000BC4                     l2553:
  3429                           
  3430                           ;main.c: 365: }
  3431                           ;main.c: 366: conversion1 = (float) duty_cicle1 * (500.0 / 1023.0);
  3432  000BC4  C04A  F01C         	movff	_duty_cicle1,___ftmul@f1
  3433  000BC8  C04B  F01D         	movff	_duty_cicle1+1,___ftmul@f1+1
  3434  000BCC  C04C  F01E         	movff	_duty_cicle1+2,___ftmul@f1+2
  3435  000BD0  0E3F               	movlw	63
  3436  000BD2  6E1F               	movwf	___ftmul@f2,c
  3437  000BD4  0EFA               	movlw	250
  3438  000BD6  6E20               	movwf	___ftmul@f2+1,c
  3439  000BD8  0E3E               	movlw	62
  3440  000BDA  6E21               	movwf	___ftmul@f2+2,c
  3441  000BDC  ECD5  F006         	call	___ftmul	;wreg free
  3442  000BE0  C01C  F037         	movff	?___ftmul,_conversion1
  3443  000BE4  C01D  F038         	movff	?___ftmul+1,_conversion1+1
  3444  000BE8  C01E  F039         	movff	?___ftmul+2,_conversion1+2
  3445                           
  3446                           ;main.c: 367: CCPR1L = (int) conversion1 >> 2;
  3447  000BEC  C037  F010         	movff	_conversion1,___fttol@f1
  3448  000BF0  C038  F011         	movff	_conversion1+1,___fttol@f1+1
  3449  000BF4  C039  F012         	movff	_conversion1+2,___fttol@f1+2
  3450  000BF8  EC5B  F006         	call	___fttol	;wreg free
  3451  000BFC  3411               	rlcf	?___fttol+1,w,c
  3452  000BFE  3211               	rrcf	?___fttol+1,f,c
  3453  000C00  3210               	rrcf	?___fttol,f,c
  3454  000C02  3411               	rlcf	?___fttol+1,w,c
  3455  000C04  3211               	rrcf	?___fttol+1,f,c
  3456  000C06  3210               	rrcf	?___fttol,f,c
  3457  000C08  5010               	movf	?___fttol,w,c
  3458  000C0A  6EBE               	movwf	4030,c	;volatile
  3459                           
  3460                           ;main.c: 368: CCP1CON = (CCP1CON & 0x0F) | (((int) conversion1 & 0x03) << 4);
  3461  000C0C  C037  F010         	movff	_conversion1,___fttol@f1
  3462  000C10  C038  F011         	movff	_conversion1+1,___fttol@f1+1
  3463  000C14  C039  F012         	movff	_conversion1+2,___fttol@f1+2
  3464  000C18  EC5B  F006         	call	___fttol	;wreg free
  3465  000C1C  0E03               	movlw	3
  3466  000C1E  1610               	andwf	?___fttol,f,c
  3467  000C20  3A10               	swapf	?___fttol,f,c
  3468  000C22  0EF0               	movlw	240
  3469  000C24  1610               	andwf	?___fttol,f,c
  3470  000C26  50BD               	movf	4029,w,c	;volatile
  3471  000C28  0B0F               	andlw	15
  3472  000C2A  1010               	iorwf	?___fttol,w,c
  3473  000C2C  6EBD               	movwf	4029,c	;volatile
  3474                           
  3475                           ;main.c: 369: conversion2 = (float) duty_cicle2 * (500.0 / 1023.0);
  3476  000C2E  C047  F01C         	movff	_duty_cicle2,___ftmul@f1
  3477  000C32  C048  F01D         	movff	_duty_cicle2+1,___ftmul@f1+1
  3478  000C36  C049  F01E         	movff	_duty_cicle2+2,___ftmul@f1+2
  3479  000C3A  0E3F               	movlw	63
  3480  000C3C  6E1F               	movwf	___ftmul@f2,c
  3481  000C3E  0EFA               	movlw	250
  3482  000C40  6E20               	movwf	___ftmul@f2+1,c
  3483  000C42  0E3E               	movlw	62
  3484  000C44  6E21               	movwf	___ftmul@f2+2,c
  3485  000C46  ECD5  F006         	call	___ftmul	;wreg free
  3486  000C4A  C01C  F034         	movff	?___ftmul,_conversion2
  3487  000C4E  C01D  F035         	movff	?___ftmul+1,_conversion2+1
  3488  000C52  C01E  F036         	movff	?___ftmul+2,_conversion2+2
  3489                           
  3490                           ;main.c: 370: CCPR2L = (int) conversion2 >> 2;
  3491  000C56  C034  F010         	movff	_conversion2,___fttol@f1
  3492  000C5A  C035  F011         	movff	_conversion2+1,___fttol@f1+1
  3493  000C5E  C036  F012         	movff	_conversion2+2,___fttol@f1+2
  3494  000C62  EC5B  F006         	call	___fttol	;wreg free
  3495  000C66  3411               	rlcf	?___fttol+1,w,c
  3496  000C68  3211               	rrcf	?___fttol+1,f,c
  3497  000C6A  3210               	rrcf	?___fttol,f,c
  3498  000C6C  3411               	rlcf	?___fttol+1,w,c
  3499  000C6E  3211               	rrcf	?___fttol+1,f,c
  3500  000C70  3210               	rrcf	?___fttol,f,c
  3501  000C72  5010               	movf	?___fttol,w,c
  3502  000C74  6EBB               	movwf	4027,c	;volatile
  3503                           
  3504                           ;main.c: 371: CCP2CON = (CCP1CON & 0x0F) | (((int) conversion2 & 0x03) << 4);
  3505  000C76  C034  F010         	movff	_conversion2,___fttol@f1
  3506  000C7A  C035  F011         	movff	_conversion2+1,___fttol@f1+1
  3507  000C7E  C036  F012         	movff	_conversion2+2,___fttol@f1+2
  3508  000C82  EC5B  F006         	call	___fttol	;wreg free
  3509  000C86  0E03               	movlw	3
  3510  000C88  1610               	andwf	?___fttol,f,c
  3511  000C8A  3A10               	swapf	?___fttol,f,c
  3512  000C8C  0EF0               	movlw	240
  3513  000C8E  1610               	andwf	?___fttol,f,c
  3514  000C90  50BD               	movf	4029,w,c	;volatile
  3515  000C92  0B0F               	andlw	15
  3516  000C94  1010               	iorwf	?___fttol,w,c
  3517  000C96  6EBA               	movwf	4026,c	;volatile
  3518                           
  3519                           ;main.c: 372: if (conversion1 >= conversion2) {
  3520  000C98  C037  F010         	movff	_conversion1,___ftge@ff1
  3521  000C9C  C038  F011         	movff	_conversion1+1,___ftge@ff1+1
  3522  000CA0  C039  F012         	movff	_conversion1+2,___ftge@ff1+2
  3523  000CA4  C034  F013         	movff	_conversion2,___ftge@ff2
  3524  000CA8  C035  F014         	movff	_conversion2+1,___ftge@ff2+1
  3525  000CAC  C036  F015         	movff	_conversion2+2,___ftge@ff2+2
  3526  000CB0  EC0F  F008         	call	___ftge	;wreg free
  3527  000CB4  0012               	return	
  3528  000CB6                     __end_of_pwmI:
  3529                           	opt stack 0
  3530                           tblptru	equ	0xFF8
  3531                           tblptrh	equ	0xFF7
  3532                           tblptrl	equ	0xFF6
  3533                           tablat	equ	0xFF5
  3534                           intcon	equ	0xFF2
  3535                           intcon2	equ	0xFF1
  3536                           postinc0	equ	0xFEE
  3537                           wreg	equ	0xFE8
  3538                           status	equ	0xFD8
  3539                           
  3540 ;; *************** function ___ftge *****************
  3541 ;; Defined at:
  3542 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftge.c"
  3543 ;; Parameters:    Size  Location     Type
  3544 ;;  ff1             3   15[COMRAM] float 
  3545 ;;  ff2             3   18[COMRAM] float 
  3546 ;; Auto vars:     Size  Location     Type
  3547 ;;		None
  3548 ;; Return value:  Size  Location     Type
  3549 ;;		None               void
  3550 ;; Registers used:
  3551 ;;		wreg, status,2, status,0
  3552 ;; Tracked objects:
  3553 ;;		On entry : 0/0
  3554 ;;		On exit  : 0/0
  3555 ;;		Unchanged: 0/0
  3556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3557 ;;      Params:         6       0       0       0       0       0       0       0       0
  3558 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3559 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3560 ;;      Totals:         9       0       0       0       0       0       0       0       0
  3561 ;;Total ram usage:        9 bytes
  3562 ;; Hardware stack levels used:    1
  3563 ;; Hardware stack levels required when called:    2
  3564 ;; This function calls:
  3565 ;;		Nothing
  3566 ;; This function is called by:
  3567 ;;		_automatico
  3568 ;;		_pwmI
  3569 ;;		_pwmD
  3570 ;;		_pwmA1
  3571 ;;		_pwmB1
  3572 ;; This function uses a non-reentrant model
  3573 ;;
  3574                           
  3575                           	psect	text19
  3576  00101E                     __ptext19:
  3577                           	opt stack 0
  3578  00101E                     ___ftge:
  3579                           	opt stack 26
  3580                           
  3581                           ;incstack = 0
  3582  00101E  AE12               	btfss	___ftge@ff1+2,7,c
  3583  001020  D016               	goto	l1791
  3584  001022  C010  F016         	movff	___ftge@ff1,??___ftge
  3585  001026  C011  F017         	movff	___ftge@ff1+1,??___ftge+1
  3586  00102A  C012  F018         	movff	___ftge@ff1+2,??___ftge+2
  3587  00102E  1E16               	comf	??___ftge,f,c
  3588  001030  1E17               	comf	??___ftge+1,f,c
  3589  001032  1E18               	comf	??___ftge+2,f,c
  3590  001034  2A16               	incf	??___ftge,f,c
  3591  001036  0E00               	movlw	0
  3592  001038  2217               	addwfc	??___ftge+1,f,c
  3593  00103A  2218               	addwfc	??___ftge+2,f,c
  3594  00103C  0E00               	movlw	0
  3595  00103E  2416               	addwf	??___ftge,w,c
  3596  001040  6E10               	movwf	___ftge@ff1,c
  3597  001042  0E00               	movlw	0
  3598  001044  2017               	addwfc	??___ftge+1,w,c
  3599  001046  6E11               	movwf	___ftge@ff1+1,c
  3600  001048  0E80               	movlw	128
  3601  00104A  2018               	addwfc	??___ftge+2,w,c
  3602  00104C  6E12               	movwf	___ftge@ff1+2,c
  3603  00104E                     l1791:
  3604  00104E  AE15               	btfss	___ftge@ff2+2,7,c
  3605  001050  D016               	goto	l1795
  3606  001052  C013  F016         	movff	___ftge@ff2,??___ftge
  3607  001056  C014  F017         	movff	___ftge@ff2+1,??___ftge+1
  3608  00105A  C015  F018         	movff	___ftge@ff2+2,??___ftge+2
  3609  00105E  1E16               	comf	??___ftge,f,c
  3610  001060  1E17               	comf	??___ftge+1,f,c
  3611  001062  1E18               	comf	??___ftge+2,f,c
  3612  001064  2A16               	incf	??___ftge,f,c
  3613  001066  0E00               	movlw	0
  3614  001068  2217               	addwfc	??___ftge+1,f,c
  3615  00106A  2218               	addwfc	??___ftge+2,f,c
  3616  00106C  0E00               	movlw	0
  3617  00106E  2416               	addwf	??___ftge,w,c
  3618  001070  6E13               	movwf	___ftge@ff2,c
  3619  001072  0E00               	movlw	0
  3620  001074  2017               	addwfc	??___ftge+1,w,c
  3621  001076  6E14               	movwf	___ftge@ff2+1,c
  3622  001078  0E80               	movlw	128
  3623  00107A  2018               	addwfc	??___ftge+2,w,c
  3624  00107C  6E15               	movwf	___ftge@ff2+2,c
  3625  00107E                     l1795:
  3626  00107E  0E00               	movlw	0
  3627  001080  1A10               	xorwf	___ftge@ff1,f,c
  3628  001082  0E00               	movlw	0
  3629  001084  1A11               	xorwf	___ftge@ff1+1,f,c
  3630  001086  0E80               	movlw	128
  3631  001088  1A12               	xorwf	___ftge@ff1+2,f,c
  3632  00108A  0E00               	movlw	0
  3633  00108C  1A13               	xorwf	___ftge@ff2,f,c
  3634  00108E  0E00               	movlw	0
  3635  001090  1A14               	xorwf	___ftge@ff2+1,f,c
  3636  001092  0E80               	movlw	128
  3637  001094  1A15               	xorwf	___ftge@ff2+2,f,c
  3638  001096  5013               	movf	___ftge@ff2,w,c
  3639  001098  5C10               	subwf	___ftge@ff1,w,c
  3640  00109A  5014               	movf	___ftge@ff2+1,w,c
  3641  00109C  5811               	subwfb	___ftge@ff1+1,w,c
  3642  00109E  5015               	movf	___ftge@ff2+2,w,c
  3643  0010A0  5812               	subwfb	___ftge@ff1+2,w,c
  3644  0010A2  B0D8               	btfsc	status,0,c
  3645  0010A4  D002               	goto	l1801
  3646  0010A6  90D8               	bcf	status,0,c
  3647  0010A8  0012               	return	
  3648  0010AA                     l1801:
  3649  0010AA  80D8               	bsf	status,0,c
  3650  0010AC  0012               	return	
  3651  0010AE                     __end_of___ftge:
  3652                           	opt stack 0
  3653                           tblptru	equ	0xFF8
  3654                           tblptrh	equ	0xFF7
  3655                           tblptrl	equ	0xFF6
  3656                           tablat	equ	0xFF5
  3657                           intcon	equ	0xFF2
  3658                           intcon2	equ	0xFF1
  3659                           postinc0	equ	0xFEE
  3660                           wreg	equ	0xFE8
  3661                           status	equ	0xFD8
  3662                           
  3663 ;; *************** function _freno *****************
  3664 ;; Defined at:
  3665 ;;		line 457 in file "main.c"
  3666 ;; Parameters:    Size  Location     Type
  3667 ;;		None
  3668 ;; Auto vars:     Size  Location     Type
  3669 ;;		None
  3670 ;; Return value:  Size  Location     Type
  3671 ;;                  1    wreg      void 
  3672 ;; Registers used:
  3673 ;;		None
  3674 ;; Tracked objects:
  3675 ;;		On entry : 0/0
  3676 ;;		On exit  : 0/0
  3677 ;;		Unchanged: 0/0
  3678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3679 ;;      Params:         0       0       0       0       0       0       0       0       0
  3680 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3681 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3682 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3683 ;;Total ram usage:        0 bytes
  3684 ;; Hardware stack levels used:    1
  3685 ;; Hardware stack levels required when called:    2
  3686 ;; This function calls:
  3687 ;;		Nothing
  3688 ;; This function is called by:
  3689 ;;		_automatico
  3690 ;;		_manual
  3691 ;; This function uses a non-reentrant model
  3692 ;;
  3693                           
  3694                           	psect	text20
  3695  0013EE                     __ptext20:
  3696                           	opt stack 0
  3697  0013EE                     _freno:
  3698                           	opt stack 27
  3699                           
  3700                           ;main.c: 458: LATB0 = 0;
  3701                           
  3702                           ;incstack = 0
  3703  0013EE  908A               	bcf	3978,0,c	;volatile
  3704                           
  3705                           ;main.c: 459: LATB1 = 0;
  3706  0013F0  928A               	bcf	3978,1,c	;volatile
  3707                           
  3708                           ;main.c: 460: LATB2 = 0;
  3709  0013F2  948A               	bcf	3978,2,c	;volatile
  3710                           
  3711                           ;main.c: 461: LATB3 = 0;
  3712  0013F4  968A               	bcf	3978,3,c	;volatile
  3713  0013F6  0012               	return		;funcret
  3714  0013F8                     __end_of_freno:
  3715                           	opt stack 0
  3716                           tblptru	equ	0xFF8
  3717                           tblptrh	equ	0xFF7
  3718                           tblptrl	equ	0xFF6
  3719                           tablat	equ	0xFF5
  3720                           intcon	equ	0xFF2
  3721                           intcon2	equ	0xFF1
  3722                           postinc0	equ	0xFEE
  3723                           wreg	equ	0xFE8
  3724                           status	equ	0xFD8
  3725                           
  3726 ;; *************** function _adelante *****************
  3727 ;; Defined at:
  3728 ;;		line 423 in file "main.c"
  3729 ;; Parameters:    Size  Location     Type
  3730 ;;		None
  3731 ;; Auto vars:     Size  Location     Type
  3732 ;;		None
  3733 ;; Return value:  Size  Location     Type
  3734 ;;                  1    wreg      void 
  3735 ;; Registers used:
  3736 ;;		wreg, status,2, status,0, cstack
  3737 ;; Tracked objects:
  3738 ;;		On entry : 0/0
  3739 ;;		On exit  : 0/0
  3740 ;;		Unchanged: 0/0
  3741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3742 ;;      Params:         0       0       0       0       0       0       0       0       0
  3743 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3744 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3745 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3746 ;;Total ram usage:        2 bytes
  3747 ;; Hardware stack levels used:    1
  3748 ;; Hardware stack levels required when called:    5
  3749 ;; This function calls:
  3750 ;;		_pwm
  3751 ;; This function is called by:
  3752 ;;		_automatico
  3753 ;;		_manual
  3754 ;; This function uses a non-reentrant model
  3755 ;;
  3756                           
  3757                           	psect	text21
  3758  0013A2                     __ptext21:
  3759                           	opt stack 0
  3760  0013A2                     _adelante:
  3761                           	opt stack 24
  3762                           
  3763                           ;main.c: 424: _delay((unsigned long)((100)*(8000000/4000.0)));
  3764                           
  3765                           ;incstack = 0
  3766  0013A2  0E02               	movlw	2
  3767  0013A4  6E2C               	movwf	(??_adelante+1)& (0+255),c
  3768  0013A6  0E04               	movlw	4
  3769  0013A8  6E2B               	movwf	??_adelante& (0+255),c
  3770  0013AA  0EBA               	movlw	186
  3771  0013AC                     u3107:
  3772  0013AC  2EE8               	decfsz	wreg,f,c
  3773  0013AE  D7FE               	bra	u3107
  3774  0013B0  2E2B               	decfsz	??_adelante& (0+255),f,c
  3775  0013B2  D7FC               	bra	u3107
  3776  0013B4  2E2C               	decfsz	(??_adelante+1)& (0+255),f,c
  3777  0013B6  D7FA               	bra	u3107
  3778  0013B8  D000               	nop2	
  3779                           
  3780                           ;main.c: 425: pwm();
  3781  0013BA  EC4F  F007         	call	_pwm	;wreg free
  3782                           
  3783                           ;main.c: 426: LATB0 = 1;
  3784  0013BE  808A               	bsf	3978,0,c	;volatile
  3785                           
  3786                           ;main.c: 427: LATB1 = 0;
  3787  0013C0  928A               	bcf	3978,1,c	;volatile
  3788                           
  3789                           ;main.c: 428: LATB2 = 1;
  3790  0013C2  848A               	bsf	3978,2,c	;volatile
  3791                           
  3792                           ;main.c: 429: LATB3 = 0;
  3793  0013C4  968A               	bcf	3978,3,c	;volatile
  3794  0013C6  0012               	return		;funcret
  3795  0013C8                     __end_of_adelante:
  3796                           	opt stack 0
  3797                           tblptru	equ	0xFF8
  3798                           tblptrh	equ	0xFF7
  3799                           tblptrl	equ	0xFF6
  3800                           tablat	equ	0xFF5
  3801                           intcon	equ	0xFF2
  3802                           intcon2	equ	0xFF1
  3803                           postinc0	equ	0xFEE
  3804                           wreg	equ	0xFE8
  3805                           status	equ	0xFD8
  3806                           
  3807 ;; *************** function _pwm *****************
  3808 ;; Defined at:
  3809 ;;		line 346 in file "main.c"
  3810 ;; Parameters:    Size  Location     Type
  3811 ;;		None
  3812 ;; Auto vars:     Size  Location     Type
  3813 ;;		None
  3814 ;; Return value:  Size  Location     Type
  3815 ;;                  1    wreg      void 
  3816 ;; Registers used:
  3817 ;;		wreg, status,2, status,0, cstack
  3818 ;; Tracked objects:
  3819 ;;		On entry : 0/0
  3820 ;;		On exit  : 0/0
  3821 ;;		Unchanged: 0/0
  3822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3823 ;;      Params:         0       0       0       0       0       0       0       0       0
  3824 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3825 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3826 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3827 ;;Total ram usage:        0 bytes
  3828 ;; Hardware stack levels used:    1
  3829 ;; Hardware stack levels required when called:    4
  3830 ;; This function calls:
  3831 ;;		___ftmul
  3832 ;;		___fttol
  3833 ;; This function is called by:
  3834 ;;		_adelante
  3835 ;;		_atras
  3836 ;; This function uses a non-reentrant model
  3837 ;;
  3838                           
  3839                           	psect	text22
  3840  000E9E                     __ptext22:
  3841                           	opt stack 0
  3842  000E9E                     _pwm:
  3843                           	opt stack 24
  3844                           
  3845                           ;main.c: 347: if (y == 1) {
  3846                           
  3847                           ;incstack = 0
  3848  000E9E  044D               	decf	_y,w,c
  3849  000EA0  104E               	iorwf	_y+1,w,c
  3850  000EA2  A4D8               	btfss	status,2,c
  3851  000EA4  D00E               	goto	l2539
  3852                           
  3853                           ;main.c: 348: duty_cicle1 = 511.2;
  3854  000EA6  0E9A               	movlw	154
  3855  000EA8  6E4A               	movwf	_duty_cicle1,c
  3856  000EAA  0EFF               	movlw	255
  3857  000EAC  6E4B               	movwf	_duty_cicle1+1,c
  3858  000EAE  0E43               	movlw	67
  3859  000EB0  6E4C               	movwf	_duty_cicle1+2,c
  3860                           
  3861                           ;main.c: 349: y = 2;
  3862  000EB2  0E00               	movlw	0
  3863  000EB4  6E4E               	movwf	_y+1,c
  3864  000EB6  0E02               	movlw	2
  3865  000EB8  6E4D               	movwf	_y,c
  3866                           
  3867                           ;main.c: 350: y = 3;
  3868  000EBA  0E00               	movlw	0
  3869  000EBC  6E4E               	movwf	_y+1,c
  3870  000EBE  0E03               	movlw	3
  3871  000EC0  6E4D               	movwf	_y,c
  3872  000EC2                     l2539:
  3873                           
  3874                           ;main.c: 351: }
  3875                           ;main.c: 352: conversion1 = (float) duty_cicle1 * (500.0 / 1023.0);
  3876  000EC2  C04A  F01C         	movff	_duty_cicle1,___ftmul@f1
  3877  000EC6  C04B  F01D         	movff	_duty_cicle1+1,___ftmul@f1+1
  3878  000ECA  C04C  F01E         	movff	_duty_cicle1+2,___ftmul@f1+2
  3879  000ECE  0E3F               	movlw	63
  3880  000ED0  6E1F               	movwf	___ftmul@f2,c
  3881  000ED2  0EFA               	movlw	250
  3882  000ED4  6E20               	movwf	___ftmul@f2+1,c
  3883  000ED6  0E3E               	movlw	62
  3884  000ED8  6E21               	movwf	___ftmul@f2+2,c
  3885  000EDA  ECD5  F006         	call	___ftmul	;wreg free
  3886  000EDE  C01C  F037         	movff	?___ftmul,_conversion1
  3887  000EE2  C01D  F038         	movff	?___ftmul+1,_conversion1+1
  3888  000EE6  C01E  F039         	movff	?___ftmul+2,_conversion1+2
  3889                           
  3890                           ;main.c: 353: CCPR1L = (int) conversion1 >> 2;
  3891  000EEA  C037  F010         	movff	_conversion1,___fttol@f1
  3892  000EEE  C038  F011         	movff	_conversion1+1,___fttol@f1+1
  3893  000EF2  C039  F012         	movff	_conversion1+2,___fttol@f1+2
  3894  000EF6  EC5B  F006         	call	___fttol	;wreg free
  3895  000EFA  3411               	rlcf	?___fttol+1,w,c
  3896  000EFC  3211               	rrcf	?___fttol+1,f,c
  3897  000EFE  3210               	rrcf	?___fttol,f,c
  3898  000F00  3411               	rlcf	?___fttol+1,w,c
  3899  000F02  3211               	rrcf	?___fttol+1,f,c
  3900  000F04  3210               	rrcf	?___fttol,f,c
  3901  000F06  5010               	movf	?___fttol,w,c
  3902  000F08  6EBE               	movwf	4030,c	;volatile
  3903                           
  3904                           ;main.c: 354: CCP1CON = (CCP1CON & 0x0F) | (((int) conversion1 & 0x03) << 4);
  3905  000F0A  C037  F010         	movff	_conversion1,___fttol@f1
  3906  000F0E  C038  F011         	movff	_conversion1+1,___fttol@f1+1
  3907  000F12  C039  F012         	movff	_conversion1+2,___fttol@f1+2
  3908  000F16  EC5B  F006         	call	___fttol	;wreg free
  3909  000F1A  0E03               	movlw	3
  3910  000F1C  1610               	andwf	?___fttol,f,c
  3911  000F1E  3A10               	swapf	?___fttol,f,c
  3912  000F20  0EF0               	movlw	240
  3913  000F22  1610               	andwf	?___fttol,f,c
  3914  000F24  50BD               	movf	4029,w,c	;volatile
  3915  000F26  0B0F               	andlw	15
  3916  000F28  1010               	iorwf	?___fttol,w,c
  3917  000F2A  6EBD               	movwf	4029,c	;volatile
  3918                           
  3919                           ;main.c: 355: CCPR2L = (int) conversion1 >> 2;
  3920  000F2C  C037  F010         	movff	_conversion1,___fttol@f1
  3921  000F30  C038  F011         	movff	_conversion1+1,___fttol@f1+1
  3922  000F34  C039  F012         	movff	_conversion1+2,___fttol@f1+2
  3923  000F38  EC5B  F006         	call	___fttol	;wreg free
  3924  000F3C  3411               	rlcf	?___fttol+1,w,c
  3925  000F3E  3211               	rrcf	?___fttol+1,f,c
  3926  000F40  3210               	rrcf	?___fttol,f,c
  3927  000F42  3411               	rlcf	?___fttol+1,w,c
  3928  000F44  3211               	rrcf	?___fttol+1,f,c
  3929  000F46  3210               	rrcf	?___fttol,f,c
  3930  000F48  5010               	movf	?___fttol,w,c
  3931  000F4A  6EBB               	movwf	4027,c	;volatile
  3932                           
  3933                           ;main.c: 356: CCP2CON = (CCP1CON & 0x0F) | (((int) conversion1 & 0x03) << 4);
  3934  000F4C  C037  F010         	movff	_conversion1,___fttol@f1
  3935  000F50  C038  F011         	movff	_conversion1+1,___fttol@f1+1
  3936  000F54  C039  F012         	movff	_conversion1+2,___fttol@f1+2
  3937  000F58  EC5B  F006         	call	___fttol	;wreg free
  3938  000F5C  0E03               	movlw	3
  3939  000F5E  1610               	andwf	?___fttol,f,c
  3940  000F60  3A10               	swapf	?___fttol,f,c
  3941  000F62  0EF0               	movlw	240
  3942  000F64  1610               	andwf	?___fttol,f,c
  3943  000F66  50BD               	movf	4029,w,c	;volatile
  3944  000F68  0B0F               	andlw	15
  3945  000F6A  1010               	iorwf	?___fttol,w,c
  3946  000F6C  6EBA               	movwf	4026,c	;volatile
  3947  000F6E  0012               	return		;funcret
  3948  000F70                     __end_of_pwm:
  3949                           	opt stack 0
  3950                           tblptru	equ	0xFF8
  3951                           tblptrh	equ	0xFF7
  3952                           tblptrl	equ	0xFF6
  3953                           tablat	equ	0xFF5
  3954                           intcon	equ	0xFF2
  3955                           intcon2	equ	0xFF1
  3956                           postinc0	equ	0xFEE
  3957                           wreg	equ	0xFE8
  3958                           status	equ	0xFD8
  3959                           
  3960 ;; *************** function ___fttol *****************
  3961 ;; Defined at:
  3962 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\fttol.c"
  3963 ;; Parameters:    Size  Location     Type
  3964 ;;  f1              3   15[COMRAM] float 
  3965 ;; Auto vars:     Size  Location     Type
  3966 ;;  lval            4   25[COMRAM] unsigned long 
  3967 ;;  exp1            1   29[COMRAM] unsigned char 
  3968 ;;  sign1           1   24[COMRAM] unsigned char 
  3969 ;; Return value:  Size  Location     Type
  3970 ;;                  4   15[COMRAM] long 
  3971 ;; Registers used:
  3972 ;;		wreg, status,2, status,0
  3973 ;; Tracked objects:
  3974 ;;		On entry : 0/0
  3975 ;;		On exit  : 0/0
  3976 ;;		Unchanged: 0/0
  3977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3978 ;;      Params:         4       0       0       0       0       0       0       0       0
  3979 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3980 ;;      Temps:          5       0       0       0       0       0       0       0       0
  3981 ;;      Totals:        15       0       0       0       0       0       0       0       0
  3982 ;;Total ram usage:       15 bytes
  3983 ;; Hardware stack levels used:    1
  3984 ;; Hardware stack levels required when called:    2
  3985 ;; This function calls:
  3986 ;;		Nothing
  3987 ;; This function is called by:
  3988 ;;		_pwm
  3989 ;;		_pwmI
  3990 ;;		_pwmD
  3991 ;; This function uses a non-reentrant model
  3992 ;;
  3993                           
  3994                           	psect	text23
  3995  000CB6                     __ptext23:
  3996                           	opt stack 0
  3997  000CB6                     ___fttol:
  3998                           	opt stack 25
  3999                           
  4000                           ;incstack = 0
  4001  000CB6  C012  F014         	movff	___fttol@f1+2,??___fttol
  4002  000CBA  6A15               	clrf	(??___fttol+1)& (0+255),c
  4003  000CBC  6A16               	clrf	(??___fttol+2)& (0+255),c
  4004  000CBE  3411               	rlcf	___fttol@f1+1,w,c
  4005  000CC0  3614               	rlcf	??___fttol& (0+255),f,c
  4006  000CC2  E301               	bnc	u1251
  4007  000CC4  8015               	bsf	(??___fttol+1)& (0+255),0,c
  4008  000CC6                     u1251:
  4009  000CC6  5014               	movf	??___fttol,w,c
  4010  000CC8  6E1E               	movwf	___fttol@exp1,c
  4011  000CCA  501E               	movf	___fttol@exp1,w,c
  4012  000CCC  A4D8               	btfss	status,2,c
  4013  000CCE  D009               	goto	l1811
  4014  000CD0  0E00               	movlw	0
  4015  000CD2  6E10               	movwf	?___fttol,c
  4016  000CD4  0E00               	movlw	0
  4017  000CD6  6E11               	movwf	?___fttol+1,c
  4018  000CD8  0E00               	movlw	0
  4019  000CDA  6E12               	movwf	?___fttol+2,c
  4020  000CDC  0E00               	movlw	0
  4021  000CDE  6E13               	movwf	?___fttol+3,c
  4022  000CE0  0012               	return	
  4023  000CE2                     l1811:
  4024  000CE2  0E17               	movlw	23
  4025  000CE4  6E14               	movwf	??___fttol& (0+255),c
  4026  000CE6  C010  F015         	movff	___fttol@f1,??___fttol+1
  4027  000CEA  C011  F016         	movff	___fttol@f1+1,??___fttol+2
  4028  000CEE  C012  F017         	movff	___fttol@f1+2,??___fttol+3
  4029  000CF2  2814               	incf	??___fttol,w,c
  4030  000CF4  6E18               	movwf	(??___fttol+4)& (0+255),c
  4031  000CF6  D004               	goto	u1270
  4032  000CF8                     u1275:
  4033  000CF8  90D8               	bcf	status,0,c
  4034  000CFA  3217               	rrcf	??___fttol+3,f,c
  4035  000CFC  3216               	rrcf	??___fttol+2,f,c
  4036  000CFE  3215               	rrcf	??___fttol+1,f,c
  4037  000D00                     u1270:
  4038  000D00  2E18               	decfsz	(??___fttol+4)& (0+255),f,c
  4039  000D02  D7FA               	goto	u1275
  4040  000D04  5015               	movf	??___fttol+1,w,c
  4041  000D06  6E19               	movwf	___fttol@sign1,c
  4042  000D08  8E11               	bsf	___fttol@f1+1,7,c
  4043  000D0A  0EFF               	movlw	255
  4044  000D0C  1610               	andwf	___fttol@f1,f,c
  4045  000D0E  0EFF               	movlw	255
  4046  000D10  1611               	andwf	___fttol@f1+1,f,c
  4047  000D12  0E00               	movlw	0
  4048  000D14  1612               	andwf	___fttol@f1+2,f,c
  4049  000D16  5010               	movf	___fttol@f1,w,c
  4050  000D18  6E1A               	movwf	___fttol@lval,c
  4051  000D1A  5011               	movf	___fttol@f1+1,w,c
  4052  000D1C  6E1B               	movwf	___fttol@lval+1,c
  4053  000D1E  5012               	movf	___fttol@f1+2,w,c
  4054  000D20  6E1C               	movwf	___fttol@lval+2,c
  4055  000D22  6A1D               	clrf	___fttol@lval+3,c
  4056  000D24  0E8E               	movlw	142
  4057  000D26  5E1E               	subwf	___fttol@exp1,f,c
  4058  000D28  AE1E               	btfss	___fttol@exp1,7,c
  4059  000D2A  D016               	goto	l1833
  4060  000D2C  501E               	movf	___fttol@exp1,w,c
  4061  000D2E  0A80               	xorlw	128
  4062  000D30  0F8F               	addlw	143
  4063  000D32  B0D8               	btfsc	status,0,c
  4064  000D34  D009               	goto	l1829
  4065  000D36  0E00               	movlw	0
  4066  000D38  6E10               	movwf	?___fttol,c
  4067  000D3A  0E00               	movlw	0
  4068  000D3C  6E11               	movwf	?___fttol+1,c
  4069  000D3E  0E00               	movlw	0
  4070  000D40  6E12               	movwf	?___fttol+2,c
  4071  000D42  0E00               	movlw	0
  4072  000D44  6E13               	movwf	?___fttol+3,c
  4073  000D46  0012               	return	
  4074  000D48                     l1829:
  4075  000D48  90D8               	bcf	status,0,c
  4076  000D4A  321D               	rrcf	___fttol@lval+3,f,c
  4077  000D4C  321C               	rrcf	___fttol@lval+2,f,c
  4078  000D4E  321B               	rrcf	___fttol@lval+1,f,c
  4079  000D50  321A               	rrcf	___fttol@lval,f,c
  4080  000D52  3E1E               	incfsz	___fttol@exp1,f,c
  4081  000D54  D7F9               	goto	l1829
  4082  000D56  D015               	goto	l1843
  4083  000D58                     l1833:
  4084  000D58  0E17               	movlw	23
  4085  000D5A  641E               	cpfsgt	___fttol@exp1,c
  4086  000D5C  D00F               	goto	l1841
  4087  000D5E  0E00               	movlw	0
  4088  000D60  6E10               	movwf	?___fttol,c
  4089  000D62  0E00               	movlw	0
  4090  000D64  6E11               	movwf	?___fttol+1,c
  4091  000D66  0E00               	movlw	0
  4092  000D68  6E12               	movwf	?___fttol+2,c
  4093  000D6A  0E00               	movlw	0
  4094  000D6C  6E13               	movwf	?___fttol+3,c
  4095  000D6E  0012               	return	
  4096  000D70                     l1839:
  4097  000D70  90D8               	bcf	status,0,c
  4098  000D72  361A               	rlcf	___fttol@lval,f,c
  4099  000D74  361B               	rlcf	___fttol@lval+1,f,c
  4100  000D76  361C               	rlcf	___fttol@lval+2,f,c
  4101  000D78  361D               	rlcf	___fttol@lval+3,f,c
  4102  000D7A  061E               	decf	___fttol@exp1,f,c
  4103  000D7C                     l1841:
  4104  000D7C  501E               	movf	___fttol@exp1,w,c
  4105  000D7E  A4D8               	btfss	status,2,c
  4106  000D80  D7F7               	goto	l1839
  4107  000D82                     l1843:
  4108  000D82  5019               	movf	___fttol@sign1,w,c
  4109  000D84  B4D8               	btfsc	status,2,c
  4110  000D86  D008               	goto	l1847
  4111  000D88  1E1D               	comf	___fttol@lval+3,f,c
  4112  000D8A  1E1C               	comf	___fttol@lval+2,f,c
  4113  000D8C  1E1B               	comf	___fttol@lval+1,f,c
  4114  000D8E  6C1A               	negf	___fttol@lval,c
  4115  000D90  0E00               	movlw	0
  4116  000D92  221B               	addwfc	___fttol@lval+1,f,c
  4117  000D94  221C               	addwfc	___fttol@lval+2,f,c
  4118  000D96  221D               	addwfc	___fttol@lval+3,f,c
  4119  000D98                     l1847:
  4120  000D98  C01A  F010         	movff	___fttol@lval,?___fttol
  4121  000D9C  C01B  F011         	movff	___fttol@lval+1,?___fttol+1
  4122  000DA0  C01C  F012         	movff	___fttol@lval+2,?___fttol+2
  4123  000DA4  C01D  F013         	movff	___fttol@lval+3,?___fttol+3
  4124  000DA8  0012               	return	
  4125  000DAA                     __end_of___fttol:
  4126                           	opt stack 0
  4127                           tblptru	equ	0xFF8
  4128                           tblptrh	equ	0xFF7
  4129                           tblptrl	equ	0xFF6
  4130                           tablat	equ	0xFF5
  4131                           intcon	equ	0xFF2
  4132                           intcon2	equ	0xFF1
  4133                           postinc0	equ	0xFEE
  4134                           wreg	equ	0xFE8
  4135                           status	equ	0xFD8
  4136                           
  4137 ;; *************** function ___ftmul *****************
  4138 ;; Defined at:
  4139 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftmul.c"
  4140 ;; Parameters:    Size  Location     Type
  4141 ;;  f1              3   27[COMRAM] float 
  4142 ;;  f2              3   30[COMRAM] float 
  4143 ;; Auto vars:     Size  Location     Type
  4144 ;;  f3_as_produc    3   37[COMRAM] unsigned um
  4145 ;;  sign            1   41[COMRAM] unsigned char 
  4146 ;;  cntr            1   40[COMRAM] unsigned char 
  4147 ;;  exp             1   36[COMRAM] unsigned char 
  4148 ;; Return value:  Size  Location     Type
  4149 ;;                  3   27[COMRAM] float 
  4150 ;; Registers used:
  4151 ;;		wreg, status,2, status,0, cstack
  4152 ;; Tracked objects:
  4153 ;;		On entry : 0/0
  4154 ;;		On exit  : 0/0
  4155 ;;		Unchanged: 0/0
  4156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4157 ;;      Params:         6       0       0       0       0       0       0       0       0
  4158 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4159 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4160 ;;      Totals:        15       0       0       0       0       0       0       0       0
  4161 ;;Total ram usage:       15 bytes
  4162 ;; Hardware stack levels used:    1
  4163 ;; Hardware stack levels required when called:    3
  4164 ;; This function calls:
  4165 ;;		___ftpack
  4166 ;; This function is called by:
  4167 ;;		_start
  4168 ;;		_start1
  4169 ;;		_start2
  4170 ;;		_pwm
  4171 ;;		_pwmI
  4172 ;;		_pwmD
  4173 ;; This function uses a non-reentrant model
  4174 ;;
  4175                           
  4176                           	psect	text24
  4177  000DAA                     __ptext24:
  4178                           	opt stack 0
  4179  000DAA                     ___ftmul:
  4180                           	opt stack 26
  4181                           
  4182                           ;incstack = 0
  4183  000DAA  C01E  F022         	movff	___ftmul@f1+2,??___ftmul
  4184  000DAE  6A23               	clrf	(??___ftmul+1)& (0+255),c
  4185  000DB0  6A24               	clrf	(??___ftmul+2)& (0+255),c
  4186  000DB2  341D               	rlcf	___ftmul@f1+1,w,c
  4187  000DB4  3622               	rlcf	??___ftmul& (0+255),f,c
  4188  000DB6  E301               	bnc	u2231
  4189  000DB8  8023               	bsf	(??___ftmul+1)& (0+255),0,c
  4190  000DBA                     u2231:
  4191  000DBA  5022               	movf	??___ftmul,w,c
  4192  000DBC  6E25               	movwf	___ftmul@exp,c
  4193  000DBE  5025               	movf	___ftmul@exp,w,c
  4194  000DC0  A4D8               	btfss	status,2,c
  4195  000DC2  D007               	goto	l2493
  4196  000DC4  0E00               	movlw	0
  4197  000DC6  6E1C               	movwf	?___ftmul,c
  4198  000DC8  0E00               	movlw	0
  4199  000DCA  6E1D               	movwf	?___ftmul+1,c
  4200  000DCC  0E00               	movlw	0
  4201  000DCE  6E1E               	movwf	?___ftmul+2,c
  4202  000DD0  0012               	return	
  4203  000DD2                     l2493:
  4204  000DD2  C021  F022         	movff	___ftmul@f2+2,??___ftmul
  4205  000DD6  6A23               	clrf	(??___ftmul+1)& (0+255),c
  4206  000DD8  6A24               	clrf	(??___ftmul+2)& (0+255),c
  4207  000DDA  3420               	rlcf	___ftmul@f2+1,w,c
  4208  000DDC  3622               	rlcf	??___ftmul& (0+255),f,c
  4209  000DDE  E301               	bnc	u2251
  4210  000DE0  8023               	bsf	(??___ftmul+1)& (0+255),0,c
  4211  000DE2                     u2251:
  4212  000DE2  5022               	movf	??___ftmul,w,c
  4213  000DE4  6E2A               	movwf	___ftmul@sign,c
  4214  000DE6  502A               	movf	___ftmul@sign,w,c
  4215  000DE8  A4D8               	btfss	status,2,c
  4216  000DEA  D007               	goto	l2499
  4217  000DEC  0E00               	movlw	0
  4218  000DEE  6E1C               	movwf	?___ftmul,c
  4219  000DF0  0E00               	movlw	0
  4220  000DF2  6E1D               	movwf	?___ftmul+1,c
  4221  000DF4  0E00               	movlw	0
  4222  000DF6  6E1E               	movwf	?___ftmul+2,c
  4223  000DF8  0012               	return	
  4224  000DFA                     l2499:
  4225  000DFA  502A               	movf	___ftmul@sign,w,c
  4226  000DFC  0F7B               	addlw	123
  4227  000DFE  2625               	addwf	___ftmul@exp,f,c
  4228  000E00  C01E  F02A         	movff	___ftmul@f1+2,___ftmul@sign
  4229  000E04  5021               	movf	___ftmul@f2+2,w,c
  4230  000E06  1A2A               	xorwf	___ftmul@sign,f,c
  4231  000E08  0E80               	movlw	128
  4232  000E0A  162A               	andwf	___ftmul@sign,f,c
  4233  000E0C  8E1D               	bsf	___ftmul@f1+1,7,c
  4234  000E0E  8E20               	bsf	___ftmul@f2+1,7,c
  4235  000E10  0EFF               	movlw	255
  4236  000E12  161F               	andwf	___ftmul@f2,f,c
  4237  000E14  0EFF               	movlw	255
  4238  000E16  1620               	andwf	___ftmul@f2+1,f,c
  4239  000E18  0E00               	movlw	0
  4240  000E1A  1621               	andwf	___ftmul@f2+2,f,c
  4241  000E1C  0E00               	movlw	0
  4242  000E1E  6E26               	movwf	___ftmul@f3_as_product,c
  4243  000E20  0E00               	movlw	0
  4244  000E22  6E27               	movwf	___ftmul@f3_as_product+1,c
  4245  000E24  0E00               	movlw	0
  4246  000E26  6E28               	movwf	___ftmul@f3_as_product+2,c
  4247  000E28  0E07               	movlw	7
  4248  000E2A  6E29               	movwf	___ftmul@cntr,c
  4249  000E2C                     l2513:
  4250  000E2C  A01C               	btfss	___ftmul@f1,0,c
  4251  000E2E  D006               	goto	l2517
  4252  000E30  501F               	movf	___ftmul@f2,w,c
  4253  000E32  2626               	addwf	___ftmul@f3_as_product,f,c
  4254  000E34  5020               	movf	___ftmul@f2+1,w,c
  4255  000E36  2227               	addwfc	___ftmul@f3_as_product+1,f,c
  4256  000E38  5021               	movf	___ftmul@f2+2,w,c
  4257  000E3A  2228               	addwfc	___ftmul@f3_as_product+2,f,c
  4258  000E3C                     l2517:
  4259  000E3C  90D8               	bcf	status,0,c
  4260  000E3E  321E               	rrcf	___ftmul@f1+2,f,c
  4261  000E40  321D               	rrcf	___ftmul@f1+1,f,c
  4262  000E42  321C               	rrcf	___ftmul@f1,f,c
  4263  000E44  90D8               	bcf	status,0,c
  4264  000E46  361F               	rlcf	___ftmul@f2,f,c
  4265  000E48  3620               	rlcf	___ftmul@f2+1,f,c
  4266  000E4A  3621               	rlcf	___ftmul@f2+2,f,c
  4267  000E4C  2E29               	decfsz	___ftmul@cntr,f,c
  4268  000E4E  D7EE               	goto	l2513
  4269  000E50  0E09               	movlw	9
  4270  000E52  6E29               	movwf	___ftmul@cntr,c
  4271  000E54                     l2523:
  4272  000E54  A01C               	btfss	___ftmul@f1,0,c
  4273  000E56  D006               	goto	l2527
  4274  000E58  501F               	movf	___ftmul@f2,w,c
  4275  000E5A  2626               	addwf	___ftmul@f3_as_product,f,c
  4276  000E5C  5020               	movf	___ftmul@f2+1,w,c
  4277  000E5E  2227               	addwfc	___ftmul@f3_as_product+1,f,c
  4278  000E60  5021               	movf	___ftmul@f2+2,w,c
  4279  000E62  2228               	addwfc	___ftmul@f3_as_product+2,f,c
  4280  000E64                     l2527:
  4281  000E64  90D8               	bcf	status,0,c
  4282  000E66  321E               	rrcf	___ftmul@f1+2,f,c
  4283  000E68  321D               	rrcf	___ftmul@f1+1,f,c
  4284  000E6A  321C               	rrcf	___ftmul@f1,f,c
  4285  000E6C  90D8               	bcf	status,0,c
  4286  000E6E  3228               	rrcf	___ftmul@f3_as_product+2,f,c
  4287  000E70  3227               	rrcf	___ftmul@f3_as_product+1,f,c
  4288  000E72  3226               	rrcf	___ftmul@f3_as_product,f,c
  4289  000E74  2E29               	decfsz	___ftmul@cntr,f,c
  4290  000E76  D7EE               	goto	l2523
  4291  000E78  C026  F010         	movff	___ftmul@f3_as_product,___ftpack@arg
  4292  000E7C  C027  F011         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  4293  000E80  C028  F012         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  4294  000E84  C025  F013         	movff	___ftmul@exp,___ftpack@exp
  4295  000E88  C02A  F014         	movff	___ftmul@sign,___ftpack@sign
  4296  000E8C  ECB8  F007         	call	___ftpack	;wreg free
  4297  000E90  C010  F01C         	movff	?___ftpack,?___ftmul
  4298  000E94  C011  F01D         	movff	?___ftpack+1,?___ftmul+1
  4299  000E98  C012  F01E         	movff	?___ftpack+2,?___ftmul+2
  4300  000E9C  0012               	return	
  4301  000E9E                     __end_of___ftmul:
  4302                           	opt stack 0
  4303                           tblptru	equ	0xFF8
  4304                           tblptrh	equ	0xFF7
  4305                           tblptrl	equ	0xFF6
  4306                           tablat	equ	0xFF5
  4307                           intcon	equ	0xFF2
  4308                           intcon2	equ	0xFF1
  4309                           postinc0	equ	0xFEE
  4310                           wreg	equ	0xFE8
  4311                           status	equ	0xFD8
  4312                           
  4313 ;; *************** function ___ftpack *****************
  4314 ;; Defined at:
  4315 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\float.c"
  4316 ;; Parameters:    Size  Location     Type
  4317 ;;  arg             3   15[COMRAM] unsigned um
  4318 ;;  exp             1   18[COMRAM] unsigned char 
  4319 ;;  sign            1   19[COMRAM] unsigned char 
  4320 ;; Auto vars:     Size  Location     Type
  4321 ;;		None
  4322 ;; Return value:  Size  Location     Type
  4323 ;;                  3   15[COMRAM] float 
  4324 ;; Registers used:
  4325 ;;		wreg, status,2, status,0
  4326 ;; Tracked objects:
  4327 ;;		On entry : 0/0
  4328 ;;		On exit  : 0/0
  4329 ;;		Unchanged: 0/0
  4330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4331 ;;      Params:         5       0       0       0       0       0       0       0       0
  4332 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4333 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4334 ;;      Totals:         8       0       0       0       0       0       0       0       0
  4335 ;;Total ram usage:        8 bytes
  4336 ;; Hardware stack levels used:    1
  4337 ;; Hardware stack levels required when called:    2
  4338 ;; This function calls:
  4339 ;;		Nothing
  4340 ;; This function is called by:
  4341 ;;		___awtoft
  4342 ;;		___ftadd
  4343 ;;		___ftmul
  4344 ;; This function uses a non-reentrant model
  4345 ;;
  4346                           
  4347                           	psect	text25
  4348  000F70                     __ptext25:
  4349                           	opt stack 0
  4350  000F70                     ___ftpack:
  4351                           	opt stack 26
  4352                           
  4353                           ;incstack = 0
  4354  000F70  5013               	movf	___ftpack@exp,w,c
  4355  000F72  B4D8               	btfsc	status,2,c
  4356  000F74  D005               	goto	l2455
  4357  000F76  5010               	movf	___ftpack@arg,w,c
  4358  000F78  1011               	iorwf	___ftpack@arg+1,w,c
  4359  000F7A  1012               	iorwf	___ftpack@arg+2,w,c
  4360  000F7C  A4D8               	btfss	status,2,c
  4361  000F7E  D00C               	goto	l2461
  4362  000F80                     l2455:
  4363  000F80  0E00               	movlw	0
  4364  000F82  6E10               	movwf	?___ftpack,c
  4365  000F84  0E00               	movlw	0
  4366  000F86  6E11               	movwf	?___ftpack+1,c
  4367  000F88  0E00               	movlw	0
  4368  000F8A  6E12               	movwf	?___ftpack+2,c
  4369  000F8C  0012               	return	
  4370  000F8E                     l2459:
  4371  000F8E  2A13               	incf	___ftpack@exp,f,c
  4372  000F90  90D8               	bcf	status,0,c
  4373  000F92  3212               	rrcf	___ftpack@arg+2,f,c
  4374  000F94  3211               	rrcf	___ftpack@arg+1,f,c
  4375  000F96  3210               	rrcf	___ftpack@arg,f,c
  4376  000F98                     l2461:
  4377  000F98  0E00               	movlw	0
  4378  000F9A  1410               	andwf	___ftpack@arg,w,c
  4379  000F9C  6E15               	movwf	??___ftpack& (0+255),c
  4380  000F9E  0E00               	movlw	0
  4381  000FA0  1411               	andwf	___ftpack@arg+1,w,c
  4382  000FA2  6E16               	movwf	(??___ftpack+1)& (0+255),c
  4383  000FA4  0EFE               	movlw	254
  4384  000FA6  1412               	andwf	___ftpack@arg+2,w,c
  4385  000FA8  6E17               	movwf	(??___ftpack+2)& (0+255),c
  4386  000FAA  5015               	movf	??___ftpack,w,c
  4387  000FAC  1016               	iorwf	??___ftpack+1,w,c
  4388  000FAE  1017               	iorwf	??___ftpack+2,w,c
  4389  000FB0  B4D8               	btfsc	status,2,c
  4390  000FB2  D00C               	goto	l2467
  4391  000FB4  D7EC               	goto	l2459
  4392  000FB6                     l2463:
  4393  000FB6  2A13               	incf	___ftpack@exp,f,c
  4394  000FB8  0E01               	movlw	1
  4395  000FBA  2610               	addwf	___ftpack@arg,f,c
  4396  000FBC  0E00               	movlw	0
  4397  000FBE  2211               	addwfc	___ftpack@arg+1,f,c
  4398  000FC0  0E00               	movlw	0
  4399  000FC2  2212               	addwfc	___ftpack@arg+2,f,c
  4400  000FC4  90D8               	bcf	status,0,c
  4401  000FC6  3212               	rrcf	___ftpack@arg+2,f,c
  4402  000FC8  3211               	rrcf	___ftpack@arg+1,f,c
  4403  000FCA  3210               	rrcf	___ftpack@arg,f,c
  4404  000FCC                     l2467:
  4405  000FCC  0E00               	movlw	0
  4406  000FCE  1410               	andwf	___ftpack@arg,w,c
  4407  000FD0  6E15               	movwf	??___ftpack& (0+255),c
  4408  000FD2  0E00               	movlw	0
  4409  000FD4  1411               	andwf	___ftpack@arg+1,w,c
  4410  000FD6  6E16               	movwf	(??___ftpack+1)& (0+255),c
  4411  000FD8  0EFF               	movlw	255
  4412  000FDA  1412               	andwf	___ftpack@arg+2,w,c
  4413  000FDC  6E17               	movwf	(??___ftpack+2)& (0+255),c
  4414  000FDE  5015               	movf	??___ftpack,w,c
  4415  000FE0  1016               	iorwf	??___ftpack+1,w,c
  4416  000FE2  1017               	iorwf	??___ftpack+2,w,c
  4417  000FE4  B4D8               	btfsc	status,2,c
  4418  000FE6  D006               	goto	l2471
  4419  000FE8  D7E6               	goto	l2463
  4420  000FEA                     l2469:
  4421  000FEA  0613               	decf	___ftpack@exp,f,c
  4422  000FEC  90D8               	bcf	status,0,c
  4423  000FEE  3610               	rlcf	___ftpack@arg,f,c
  4424  000FF0  3611               	rlcf	___ftpack@arg+1,f,c
  4425  000FF2  3612               	rlcf	___ftpack@arg+2,f,c
  4426  000FF4                     l2471:
  4427  000FF4  BE11               	btfsc	___ftpack@arg+1,7,c
  4428  000FF6  D003               	goto	l566
  4429  000FF8  0E02               	movlw	2
  4430  000FFA  6013               	cpfslt	___ftpack@exp,c
  4431  000FFC  D7F6               	goto	l2469
  4432  000FFE                     l566:
  4433  000FFE  A013               	btfss	___ftpack@exp,0,c
  4434  001000  9E11               	bcf	___ftpack@arg+1,7,c
  4435  001002  90D8               	bcf	status,0,c
  4436  001004  3213               	rrcf	___ftpack@exp,f,c
  4437  001006  5013               	movf	___ftpack@exp,w,c
  4438  001008  1212               	iorwf	___ftpack@arg+2,f,c
  4439  00100A  5014               	movf	___ftpack@sign,w,c
  4440  00100C  A4D8               	btfss	status,2,c
  4441  00100E  8E12               	bsf	___ftpack@arg+2,7,c
  4442  001010  C010  F010         	movff	___ftpack@arg,?___ftpack
  4443  001014  C011  F011         	movff	___ftpack@arg+1,?___ftpack+1
  4444  001018  C012  F012         	movff	___ftpack@arg+2,?___ftpack+2
  4445  00101C  0012               	return	
  4446  00101E                     __end_of___ftpack:
  4447                           	opt stack 0
  4448                           tblptru	equ	0xFF8
  4449                           tblptrh	equ	0xFF7
  4450                           tblptrl	equ	0xFF6
  4451                           tablat	equ	0xFF5
  4452                           intcon	equ	0xFF2
  4453                           intcon2	equ	0xFF1
  4454                           postinc0	equ	0xFEE
  4455                           wreg	equ	0xFE8
  4456                           status	equ	0xFD8
  4457                           
  4458 ;; *************** function _UART_Rx *****************
  4459 ;; Defined at:
  4460 ;;		line 173 in file "main.c"
  4461 ;; Parameters:    Size  Location     Type
  4462 ;;		None
  4463 ;; Auto vars:     Size  Location     Type
  4464 ;;		None
  4465 ;; Return value:  Size  Location     Type
  4466 ;;                  1    wreg      void 
  4467 ;; Registers used:
  4468 ;;		wreg, status,2, status,0, cstack
  4469 ;; Tracked objects:
  4470 ;;		On entry : 0/0
  4471 ;;		On exit  : 0/0
  4472 ;;		Unchanged: 0/0
  4473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4474 ;;      Params:         0       0       0       0       0       0       0       0       0
  4475 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4476 ;;      Temps:         15       0       0       0       0       0       0       0       0
  4477 ;;      Totals:        15       0       0       0       0       0       0       0       0
  4478 ;;Total ram usage:       15 bytes
  4479 ;; Hardware stack levels used:    1
  4480 ;; Hardware stack levels required when called:    1
  4481 ;; This function calls:
  4482 ;;		i2_sensorOFF
  4483 ;; This function is called by:
  4484 ;;		Interrupt level 2
  4485 ;; This function uses a non-reentrant model
  4486 ;;
  4487                           
  4488                           	psect	intcode
  4489  000008                     __pintcode:
  4490                           	opt stack 0
  4491  000008                     _UART_Rx:
  4492                           	opt stack 24
  4493                           
  4494                           ;incstack = 0
  4495  000008  824F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4496  00000A  ED1D  F003         	call	int_func,f	;refresh shadow registers
  4497                           tblptru	equ	0xFF8
  4498                           tblptrh	equ	0xFF7
  4499                           tblptrl	equ	0xFF6
  4500                           tablat	equ	0xFF5
  4501                           intcon	equ	0xFF2
  4502                           intcon2	equ	0xFF1
  4503                           postinc0	equ	0xFEE
  4504                           wreg	equ	0xFE8
  4505                           status	equ	0xFD8
  4506                           
  4507                           	psect	intcode_body
  4508  00063A                     __pintcode_body:
  4509                           	opt stack 24
  4510  00063A                     int_func:
  4511                           	opt stack 24
  4512  00063A  0006               	pop		; remove dummy address from shadow register refresh
  4513  00063C  CFFA F002          	movff	pclath,??_UART_Rx+1
  4514  000640  CFFB F003          	movff	pclatu,??_UART_Rx+2
  4515  000644  CFE9 F004          	movff	fsr0l,??_UART_Rx+3
  4516  000648  CFEA F005          	movff	fsr0h,??_UART_Rx+4
  4517  00064C  CFE1 F006          	movff	fsr1l,??_UART_Rx+5
  4518  000650  CFE2 F007          	movff	fsr1h,??_UART_Rx+6
  4519  000654  CFD9 F008          	movff	fsr2l,??_UART_Rx+7
  4520  000658  CFDA F009          	movff	fsr2h,??_UART_Rx+8
  4521  00065C  CFF3 F00A          	movff	prodl,??_UART_Rx+9
  4522  000660  CFF4 F00B          	movff	prodh,??_UART_Rx+10
  4523  000664  CFF6 F00C          	movff	tblptrl,??_UART_Rx+11
  4524  000668  CFF7 F00D          	movff	tblptrh,??_UART_Rx+12
  4525  00066C  CFF8 F00E          	movff	tblptru,??_UART_Rx+13
  4526  000670  CFF5 F00F          	movff	tablat,??_UART_Rx+14
  4527                           
  4528                           ;main.c: 174: if (RCIF == 1) {
  4529  000674  AA9E               	btfss	3998,5,c	;volatile
  4530  000676  D083               	goto	i2l2413
  4531                           
  4532                           ;main.c: 175: a = RCREG;
  4533  000678  CFAE F03A          	movff	4014,_a	;volatile
  4534  00067C  6A3B               	clrf	_a+1,c
  4535                           
  4536                           ;main.c: 176: if (a == 'm' || a == 'M') {
  4537  00067E  0E6D               	movlw	109
  4538  000680  183A               	xorwf	_a,w,c
  4539  000682  103B               	iorwf	_a+1,w,c
  4540  000684  B4D8               	btfsc	status,2,c
  4541  000686  D005               	goto	i2l2363
  4542  000688  0E4D               	movlw	77
  4543  00068A  183A               	xorwf	_a,w,c
  4544  00068C  103B               	iorwf	_a+1,w,c
  4545  00068E  A4D8               	btfss	status,2,c
  4546  000690  D005               	goto	i2l2365
  4547  000692                     i2l2363:
  4548                           
  4549                           ;main.c: 177: mood = 1;
  4550  000692  0E00               	movlw	0
  4551  000694  0100               	movlb	0	; () banked
  4552  000696  6F76               	movwf	(_mood+1)& (0+255),b
  4553  000698  0E01               	movlw	1
  4554  00069A  D01D               	goto	L3
  4555  00069C                     i2l2365:
  4556  00069C  0E61               	movlw	97
  4557  00069E  183A               	xorwf	_a,w,c
  4558  0006A0  103B               	iorwf	_a+1,w,c
  4559  0006A2  B4D8               	btfsc	status,2,c
  4560  0006A4  D005               	goto	i2l2369
  4561  0006A6  0E41               	movlw	65
  4562  0006A8  183A               	xorwf	_a,w,c
  4563  0006AA  103B               	iorwf	_a+1,w,c
  4564  0006AC  A4D8               	btfss	status,2,c
  4565  0006AE  D005               	goto	i2l2371
  4566  0006B0                     i2l2369:
  4567                           
  4568                           ;main.c: 179: mood = 2;
  4569  0006B0  0E00               	movlw	0
  4570  0006B2  0100               	movlb	0	; () banked
  4571  0006B4  6F76               	movwf	(_mood+1)& (0+255),b
  4572  0006B6  0E02               	movlw	2
  4573  0006B8  D00E               	goto	L3
  4574  0006BA                     i2l2371:
  4575  0006BA  0E73               	movlw	115
  4576  0006BC  183A               	xorwf	_a,w,c
  4577  0006BE  103B               	iorwf	_a+1,w,c
  4578  0006C0  B4D8               	btfsc	status,2,c
  4579  0006C2  D005               	goto	i2l2375
  4580  0006C4  0E53               	movlw	83
  4581  0006C6  183A               	xorwf	_a,w,c
  4582  0006C8  103B               	iorwf	_a+1,w,c
  4583  0006CA  A4D8               	btfss	status,2,c
  4584  0006CC  D006               	goto	i2l2377
  4585  0006CE                     i2l2375:
  4586                           
  4587                           ;main.c: 181: mood = 3;
  4588  0006CE  0E00               	movlw	0
  4589  0006D0  0100               	movlb	0	; () banked
  4590  0006D2  6F76               	movwf	(_mood+1)& (0+255),b
  4591  0006D4  0E03               	movlw	3
  4592  0006D6                     L3:
  4593  0006D6  6F75               	movwf	_mood& (0+255),b
  4594                           
  4595                           ;main.c: 182: } else if (a == '0') {
  4596  0006D8  D052               	goto	i2l2413
  4597  0006DA                     i2l2377:
  4598  0006DA  0E30               	movlw	48
  4599  0006DC  183A               	xorwf	_a,w,c
  4600  0006DE  103B               	iorwf	_a+1,w,c
  4601  0006E0  A4D8               	btfss	status,2,c
  4602  0006E2  D004               	goto	i2l2381
  4603                           
  4604                           ;main.c: 183: modo = 0;
  4605  0006E4  0E00               	movlw	0
  4606  0006E6  6E3F               	movwf	_modo+1,c
  4607  0006E8  0E00               	movlw	0
  4608  0006EA  D023               	goto	L7
  4609  0006EC                     i2l2381:
  4610  0006EC  0E31               	movlw	49
  4611  0006EE  183A               	xorwf	_a,w,c
  4612  0006F0  103B               	iorwf	_a+1,w,c
  4613  0006F2  A4D8               	btfss	status,2,c
  4614  0006F4  D004               	goto	i2l2385
  4615                           
  4616                           ;main.c: 185: modo = 1;
  4617  0006F6  0E00               	movlw	0
  4618  0006F8  6E3F               	movwf	_modo+1,c
  4619  0006FA  0E01               	movlw	1
  4620  0006FC  D01A               	goto	L7
  4621  0006FE                     i2l2385:
  4622  0006FE  0E32               	movlw	50
  4623  000700  183A               	xorwf	_a,w,c
  4624  000702  103B               	iorwf	_a+1,w,c
  4625  000704  A4D8               	btfss	status,2,c
  4626  000706  D004               	goto	i2l2389
  4627                           
  4628                           ;main.c: 187: modo = 2;
  4629  000708  0E00               	movlw	0
  4630  00070A  6E3F               	movwf	_modo+1,c
  4631  00070C  0E02               	movlw	2
  4632  00070E  D011               	goto	L7
  4633  000710                     i2l2389:
  4634  000710  0E33               	movlw	51
  4635  000712  183A               	xorwf	_a,w,c
  4636  000714  103B               	iorwf	_a+1,w,c
  4637  000716  A4D8               	btfss	status,2,c
  4638  000718  D004               	goto	i2l2393
  4639                           
  4640                           ;main.c: 189: modo = 3;
  4641  00071A  0E00               	movlw	0
  4642  00071C  6E3F               	movwf	_modo+1,c
  4643  00071E  0E03               	movlw	3
  4644  000720  D008               	goto	L7
  4645  000722                     i2l2393:
  4646  000722  0E34               	movlw	52
  4647  000724  183A               	xorwf	_a,w,c
  4648  000726  103B               	iorwf	_a+1,w,c
  4649  000728  A4D8               	btfss	status,2,c
  4650  00072A  D005               	goto	i2l2397
  4651                           
  4652                           ;main.c: 191: modo = 4;
  4653  00072C  0E00               	movlw	0
  4654  00072E  6E3F               	movwf	_modo+1,c
  4655  000730  0E04               	movlw	4
  4656  000732                     L7:
  4657  000732  6E3E               	movwf	_modo,c
  4658                           
  4659                           ;main.c: 192: } else if (a == '5') {
  4660  000734  D024               	goto	i2l2413
  4661  000736                     i2l2397:
  4662  000736  0E35               	movlw	53
  4663  000738  183A               	xorwf	_a,w,c
  4664  00073A  103B               	iorwf	_a+1,w,c
  4665  00073C  A4D8               	btfss	status,2,c
  4666  00073E  D004               	goto	i2l2401
  4667                           
  4668                           ;main.c: 193: PWM = 1;
  4669  000740  0E00               	movlw	0
  4670  000742  6E3D               	movwf	_PWM+1,c
  4671  000744  0E01               	movlw	1
  4672  000746  D01A               	goto	L10
  4673  000748                     i2l2401:
  4674  000748  0E36               	movlw	54
  4675  00074A  183A               	xorwf	_a,w,c
  4676  00074C  103B               	iorwf	_a+1,w,c
  4677  00074E  A4D8               	btfss	status,2,c
  4678  000750  D004               	goto	i2l2405
  4679                           
  4680                           ;main.c: 195: PWM = 2;
  4681  000752  0E00               	movlw	0
  4682  000754  6E3D               	movwf	_PWM+1,c
  4683  000756  0E02               	movlw	2
  4684  000758  D011               	goto	L10
  4685  00075A                     i2l2405:
  4686  00075A  0E37               	movlw	55
  4687  00075C  183A               	xorwf	_a,w,c
  4688  00075E  103B               	iorwf	_a+1,w,c
  4689  000760  A4D8               	btfss	status,2,c
  4690  000762  D004               	goto	i2l2409
  4691                           
  4692                           ;main.c: 197: PWM = 3;
  4693  000764  0E00               	movlw	0
  4694  000766  6E3D               	movwf	_PWM+1,c
  4695  000768  0E03               	movlw	3
  4696  00076A  D008               	goto	L10
  4697  00076C                     i2l2409:
  4698  00076C  0E38               	movlw	56
  4699  00076E  183A               	xorwf	_a,w,c
  4700  000770  103B               	iorwf	_a+1,w,c
  4701  000772  A4D8               	btfss	status,2,c
  4702  000774  D004               	goto	i2l2413
  4703                           
  4704                           ;main.c: 199: PWM = 4;
  4705  000776  0E00               	movlw	0
  4706  000778  6E3D               	movwf	_PWM+1,c
  4707  00077A  0E04               	movlw	4
  4708  00077C                     L10:
  4709  00077C  6E3C               	movwf	_PWM,c
  4710  00077E                     i2l2413:
  4711                           
  4712                           ;main.c: 200: }
  4713                           ;main.c: 201: }
  4714                           ;main.c: 202: if (RBIF) {
  4715  00077E  A0F2               	btfss	intcon,0,c	;volatile
  4716  000780  D022               	goto	i2l240
  4717                           
  4718                           ;main.c: 203: RBIF = 0;
  4719  000782  90F2               	bcf	intcon,0,c	;volatile
  4720                           
  4721                           ;main.c: 204: if ((PORTB & 0xF0) != 0x00) {
  4722  000784  CF81 F001          	movff	3969,??_UART_Rx	;volatile
  4723  000788  0EF0               	movlw	240
  4724  00078A  1601               	andwf	??_UART_Rx,f,c
  4725  00078C  B4D8               	btfsc	status,2,c
  4726  00078E  D00C               	goto	i2l233
  4727                           
  4728                           ;main.c: 205: if (PORTBbits.RB4 == 1) {
  4729  000790  A881               	btfss	3969,4,c	;volatile
  4730  000792  D019               	goto	i2l240
  4731                           
  4732                           ;main.c: 206: _delay((unsigned long)((10)*(8000000/4000.0)));
  4733  000794  0E1A               	movlw	26
  4734  000796  6E01               	movwf	??_UART_Rx& (0+255),c
  4735  000798  0EF8               	movlw	248
  4736  00079A                     i2u311_47:
  4737  00079A  2EE8               	decfsz	wreg,f,c
  4738  00079C  D7FE               	bra	i2u311_47
  4739  00079E  2E01               	decfsz	??_UART_Rx& (0+255),f,c
  4740  0007A0  D7FC               	bra	i2u311_47
  4741  0007A2  D000               	nop2	
  4742                           
  4743                           ;main.c: 207: LATAbits.LA4 = 0;
  4744  0007A4  9889               	bcf	3977,4,c	;volatile
  4745                           
  4746                           ;main.c: 208: }
  4747                           ;main.c: 209: } else {
  4748  0007A6  D00F               	goto	i2l240
  4749  0007A8                     i2l233:
  4750                           
  4751                           ;main.c: 210: if (PORTBbits.RB4 == 0) {
  4752  0007A8  B881               	btfsc	3969,4,c	;volatile
  4753  0007AA  D00D               	goto	i2l240
  4754                           
  4755                           ;main.c: 211: _delay((unsigned long)((10)*(8000000/4000.0)));
  4756  0007AC  0E1A               	movlw	26
  4757  0007AE  6E01               	movwf	??_UART_Rx& (0+255),c
  4758  0007B0  0EF8               	movlw	248
  4759  0007B2                     i2u312_47:
  4760  0007B2  2EE8               	decfsz	wreg,f,c
  4761  0007B4  D7FE               	bra	i2u312_47
  4762  0007B6  2E01               	decfsz	??_UART_Rx& (0+255),f,c
  4763  0007B8  D7FC               	bra	i2u312_47
  4764  0007BA  D000               	nop2	
  4765                           
  4766                           ;main.c: 212: LATAbits.LA4 = 1;
  4767  0007BC  8889               	bsf	3977,4,c	;volatile
  4768                           
  4769                           ;main.c: 213: sensorOFF();
  4770  0007BE  ECFC  F009         	call	i2_sensorOFF	;wreg free
  4771  0007C2                     i2l237:
  4772  0007C2  A881               	btfss	3969,4,c	;volatile
  4773  0007C4  D7FE               	goto	i2l237
  4774  0007C6                     i2l240:
  4775  0007C6  C00F  FFF5         	movff	??_UART_Rx+14,tablat
  4776  0007CA  C00E  FFF8         	movff	??_UART_Rx+13,tblptru
  4777  0007CE  C00D  FFF7         	movff	??_UART_Rx+12,tblptrh
  4778  0007D2  C00C  FFF6         	movff	??_UART_Rx+11,tblptrl
  4779  0007D6  C00B  FFF4         	movff	??_UART_Rx+10,prodh
  4780  0007DA  C00A  FFF3         	movff	??_UART_Rx+9,prodl
  4781  0007DE  C009  FFDA         	movff	??_UART_Rx+8,fsr2h
  4782  0007E2  C008  FFD9         	movff	??_UART_Rx+7,fsr2l
  4783  0007E6  C007  FFE2         	movff	??_UART_Rx+6,fsr1h
  4784  0007EA  C006  FFE1         	movff	??_UART_Rx+5,fsr1l
  4785  0007EE  C005  FFEA         	movff	??_UART_Rx+4,fsr0h
  4786  0007F2  C004  FFE9         	movff	??_UART_Rx+3,fsr0l
  4787  0007F6  C003  FFFB         	movff	??_UART_Rx+2,pclatu
  4788  0007FA  C002  FFFA         	movff	??_UART_Rx+1,pclath
  4789  0007FE  924F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4790  000800  0011               	retfie		f
  4791  000802                     __end_of_UART_Rx:
  4792                           	opt stack 0
  4793                           pclatu	equ	0xFFB
  4794                           pclath	equ	0xFFA
  4795                           tblptru	equ	0xFF8
  4796                           tblptrh	equ	0xFF7
  4797                           tblptrl	equ	0xFF6
  4798                           tablat	equ	0xFF5
  4799                           prodh	equ	0xFF4
  4800                           prodl	equ	0xFF3
  4801                           intcon	equ	0xFF2
  4802                           intcon2	equ	0xFF1
  4803                           postinc0	equ	0xFEE
  4804                           fsr0h	equ	0xFEA
  4805                           fsr0l	equ	0xFE9
  4806                           wreg	equ	0xFE8
  4807                           fsr1h	equ	0xFE2
  4808                           fsr1l	equ	0xFE1
  4809                           fsr2h	equ	0xFDA
  4810                           fsr2l	equ	0xFD9
  4811                           status	equ	0xFD8
  4812                           
  4813 ;; *************** function i2_sensorOFF *****************
  4814 ;; Defined at:
  4815 ;;		line 464 in file "main.c"
  4816 ;; Parameters:    Size  Location     Type
  4817 ;;		None
  4818 ;; Auto vars:     Size  Location     Type
  4819 ;;		None
  4820 ;; Return value:  Size  Location     Type
  4821 ;;                  1    wreg      void 
  4822 ;; Registers used:
  4823 ;;		None
  4824 ;; Tracked objects:
  4825 ;;		On entry : 0/0
  4826 ;;		On exit  : 0/0
  4827 ;;		Unchanged: 0/0
  4828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4829 ;;      Params:         0       0       0       0       0       0       0       0       0
  4830 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4831 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4832 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4833 ;;Total ram usage:        0 bytes
  4834 ;; Hardware stack levels used:    1
  4835 ;; This function calls:
  4836 ;;		Nothing
  4837 ;; This function is called by:
  4838 ;;		_UART_Rx
  4839 ;; This function uses a non-reentrant model
  4840 ;;
  4841                           
  4842                           	psect	text27
  4843  0013F8                     __ptext27:
  4844                           	opt stack 0
  4845  0013F8                     i2_sensorOFF:
  4846                           	opt stack 24
  4847                           
  4848                           ;main.c: 465: LATB0 = 0;
  4849                           
  4850                           ;incstack = 0
  4851  0013F8  908A               	bcf	3978,0,c	;volatile
  4852                           
  4853                           ;main.c: 466: LATB1 = 0;
  4854  0013FA  928A               	bcf	3978,1,c	;volatile
  4855                           
  4856                           ;main.c: 467: LATB2 = 0;
  4857  0013FC  948A               	bcf	3978,2,c	;volatile
  4858                           
  4859                           ;main.c: 468: LATB3 = 0;
  4860  0013FE  968A               	bcf	3978,3,c	;volatile
  4861  001400  0012               	return		;funcret
  4862  001402                     __end_ofi2_sensorOFF:
  4863                           	opt stack 0
  4864  0000                     pclatu	equ	0xFFB
  4865                           pclath	equ	0xFFA
  4866                           tblptru	equ	0xFF8
  4867                           tblptrh	equ	0xFF7
  4868                           tblptrl	equ	0xFF6
  4869                           tablat	equ	0xFF5
  4870                           prodh	equ	0xFF4
  4871                           prodl	equ	0xFF3
  4872                           intcon	equ	0xFF2
  4873                           intcon2	equ	0xFF1
  4874                           postinc0	equ	0xFEE
  4875                           fsr0h	equ	0xFEA
  4876                           fsr0l	equ	0xFE9
  4877                           wreg	equ	0xFE8
  4878                           fsr1h	equ	0xFE2
  4879                           fsr1l	equ	0xFE1
  4880                           fsr2h	equ	0xFDA
  4881                           fsr2l	equ	0xFD9
  4882                           status	equ	0xFD8
  4883                           pclatu	equ	0xFFB
  4884                           pclath	equ	0xFFA
  4885                           tblptru	equ	0xFF8
  4886                           tblptrh	equ	0xFF7
  4887                           tblptrl	equ	0xFF6
  4888                           tablat	equ	0xFF5
  4889                           prodh	equ	0xFF4
  4890                           prodl	equ	0xFF3
  4891                           intcon	equ	0xFF2
  4892                           intcon2	equ	0xFF1
  4893                           postinc0	equ	0xFEE
  4894                           fsr0h	equ	0xFEA
  4895                           fsr0l	equ	0xFE9
  4896                           wreg	equ	0xFE8
  4897                           fsr1h	equ	0xFE2
  4898                           fsr1l	equ	0xFE1
  4899                           fsr2h	equ	0xFDA
  4900                           fsr2l	equ	0xFD9
  4901                           status	equ	0xFD8
  4902                           
  4903                           	psect	rparam
  4904  0000                     pclatu	equ	0xFFB
  4905                           pclath	equ	0xFFA
  4906                           tblptru	equ	0xFF8
  4907                           tblptrh	equ	0xFF7
  4908                           tblptrl	equ	0xFF6
  4909                           tablat	equ	0xFF5
  4910                           prodh	equ	0xFF4
  4911                           prodl	equ	0xFF3
  4912                           intcon	equ	0xFF2
  4913                           intcon2	equ	0xFF1
  4914                           postinc0	equ	0xFEE
  4915                           fsr0h	equ	0xFEA
  4916                           fsr0l	equ	0xFE9
  4917                           wreg	equ	0xFE8
  4918                           fsr1h	equ	0xFE2
  4919                           fsr1l	equ	0xFE1
  4920                           fsr2h	equ	0xFDA
  4921                           fsr2l	equ	0xFD9
  4922                           status	equ	0xFD8
  4923                           
  4924                           	psect	temp
  4925  00004F                     btemp:
  4926                           	opt stack 0
  4927  00004F                     	ds	1
  4928  0000                     int$flags	set	btemp
  4929                           pclatu	equ	0xFFB
  4930                           pclath	equ	0xFFA
  4931                           tblptru	equ	0xFF8
  4932                           tblptrh	equ	0xFF7
  4933                           tblptrl	equ	0xFF6
  4934                           tablat	equ	0xFF5
  4935                           prodh	equ	0xFF4
  4936                           prodl	equ	0xFF3
  4937                           intcon	equ	0xFF2
  4938                           intcon2	equ	0xFF1
  4939                           postinc0	equ	0xFEE
  4940                           fsr0h	equ	0xFEA
  4941                           fsr0l	equ	0xFE9
  4942                           wreg	equ	0xFE8
  4943                           fsr1h	equ	0xFE2
  4944                           fsr1l	equ	0xFE1
  4945                           fsr2h	equ	0xFDA
  4946                           fsr2l	equ	0xFD9
  4947                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        2
    BSS         51
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     48      78
    BANK0           160     16      39
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _start1->___ftadd
    _start->___ftadd
    _pwmB2->___ftadd
    _pwmB1->___ftadd
    _pwmA2->___ftadd
    _pwmA1->___ftadd
    ___ftadd->___ftmul
    _pwmD->___ftmul
    _automatico->_adelante
    _automatico->_start2
    _start2->___ftmul
    ___awtoft->___ftpack
    _pwmI->___ftmul
    _pwm->___ftmul
    ___ftmul->___awtoft

Critical Paths under _UART_Rx in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_start
    _main->_start1
    _start1->___ftadd
    _start->___ftadd
    _pwmB2->___ftadd
    _pwmB1->___ftadd
    _pwmA2->___ftadd
    _pwmA1->___ftadd

Critical Paths under _UART_Rx in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _UART_Rx in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _UART_Rx in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _UART_Rx in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _UART_Rx in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _UART_Rx in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _UART_Rx in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _UART_Rx in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   96976
                                             14 BANK0      2     2      0
                         _automatico
                             _manual
                           _settings
                              _start
                             _start1
 ---------------------------------------------------------------------------------
 (1) _start1                                               8     8      0   13087
                                              6 BANK0      8     8      0
                           ___awtoft
                            ___ftadd
                            ___ftmul
 ---------------------------------------------------------------------------------
 (1) _start                                                8     8      0   13087
                                              6 BANK0      8     8      0
                           ___awtoft
                            ___ftadd
                            ___ftmul
 ---------------------------------------------------------------------------------
 (1) _settings                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _manual                                               0     0      0   48700
                           _adelante
                              _atras
                            _derecha
                              _freno
                          _izquierda
                              _pwmA1
                              _pwmA2
                              _pwmB1
                              _pwmB2
                          _sensorOFF
 ---------------------------------------------------------------------------------
 (2) _sensorOFF                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _pwmB2                                                0     0      0    5089
                            ___ftadd
 ---------------------------------------------------------------------------------
 (2) _pwmB1                                                0     0      0    5993
                            ___ftadd
                             ___ftge
 ---------------------------------------------------------------------------------
 (2) _pwmA2                                                0     0      0    5089
                            ___ftadd
 ---------------------------------------------------------------------------------
 (2) _pwmA1                                                0     0      0    5993
                            ___ftadd
                             ___ftge
 ---------------------------------------------------------------------------------
 (2) ___ftadd                                             12     6      6    5089
                                             42 COMRAM     6     0      6
                                              0 BANK0      6     6      0
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) _derecha                                              0     0      0    7086
                               _pwmD
 ---------------------------------------------------------------------------------
 (3) _pwmD                                                 0     0      0    7086
                             ___ftge
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) _atras                                                2     2      0    6182
                                             42 COMRAM     2     2      0
                                _pwm
 ---------------------------------------------------------------------------------
 (1) _automatico                                           2     2      0   22102
                                             44 COMRAM     2     2      0
                             ___ftge
                           _adelante
                              _freno
                          _izquierda
                             _start2
 ---------------------------------------------------------------------------------
 (2) _start2                                               2     2      0    7930
                                             42 COMRAM     2     2      0
                           ___awtoft
                            ___ftmul
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             4     1      3    2768
                                             23 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) _izquierda                                            0     0      0    7086
                               _pwmI
 ---------------------------------------------------------------------------------
 (3) _pwmI                                                 0     0      0    7086
                             ___ftge
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     904
                                             15 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (2) _freno                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _adelante                                             2     2      0    6182
                                             42 COMRAM     2     2      0
                                _pwm
 ---------------------------------------------------------------------------------
 (3) _pwm                                                  0     0      0    6182
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4    1020
                                             15 COMRAM    15    11      4
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    5162
                                             27 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2404
                                             15 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _UART_Rx                                             15    15      0       0
                                              0 COMRAM    15    15      0
                        i2_sensorOFF
 ---------------------------------------------------------------------------------
 (7) i2_sensorOFF                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _automatico
     ___ftge
     _adelante
       _pwm
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___fttol
     _freno
     _izquierda
       _pwmI
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___fttol
     _start2
       ___awtoft
         ___ftpack
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
   _manual
     _adelante
       _pwm
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___fttol
     _atras
       _pwm
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___fttol
     _derecha
       _pwmD
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___fttol
     _freno
     _izquierda
       _pwmI
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___fttol
     _pwmA1
       ___ftadd
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftge
     _pwmA2
       ___ftadd
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
     _pwmB1
       ___ftadd
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftge
     _pwmB2
       ___ftadd
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
     _sensorOFF
   _settings
   _start
     ___awtoft
       ___ftpack
     ___ftadd
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
   _start1
     ___awtoft
       ___ftpack
     ___ftadd
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)

 _UART_Rx (ROOT)
   i2_sensorOFF

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     10      27       5       24.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     30      4E       1       83.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      75      20        0.0%
DATA                 0      0      75       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Thu Nov 18 15:47:24 2021

                      _a 003A                        _b 0031                        _c 0044  
                      _i 0042                        _n 006F                        _s 0071  
                      _x 0040                        _y 004D                        _z 0073  
                     _GO 007E11                       _d1 0063                       _d2 0060  
           ___ftadd@exp1 007C             ___ftadd@exp2 007B      __end_ofi2_sensorOFF 1402  
           ___ftadd@sign 007A                      l171 124E                      l245 0038  
                    l181 093A                      l248 0104                      l169 1244  
                    l195 1122                      l604 03DA                      l188 0804  
                    l613 03F8                      l566 0FFE                      l593 02F8  
                    l595 031C                      l589 02BE                      _GIE 007F97  
                    _PR2 000FCB                      _PWM 003C                      _pwm 0E9E  
                    wreg 000FE8             __CFG_LVP$OFF 000000             __CFG_WDT$OFF 000000  
                   l3001 1288                     l2513 0E2C                     l1801 10AA  
                   l2523 0E54                     l1811 0CE2                     l2461 0F98  
                   l2517 0E3C                     l2621 0370                     l2605 0314  
                   l2471 0FF4                     l2463 0FB6                     l2455 0F80  
                   l2527 0E64                     l2623 037C                     l2615 0344  
                   l1841 0D7C                     l1833 0D58                     l2553 0BC4  
                   l2641 0416                     l2633 03C2                     l2625 038A  
                   l2801 0542                     l2467 0FCC                     l2459 0F8E  
                   l1843 0D82                     l2539 0EC2                     l2571 0AA0  
                   l2651 044A                     l2635 03CE                     l2627 0396  
                   l2469 0FEA                     l2493 0DD2                     l1829 0D48  
                   l2901 0100                     l1847 0D98                     l1839 0D70  
                   l1791 104E                     l2663 1358                     l2823 0596  
                   l2807 055A                     l2751 0484                     l2593 02CC  
                   l2817 057E                     l2761 04A6                     l2499 0DFA  
                   l1795 107E                     l2851 0602                     l2835 05C6  
                   l2845 05EA                     l2829 05AE                     l2773 04D6  
                   l2943 0248                     l2599 0306                     l2767 04BE  
                   l2863 0632                     l2873 002E                     l2857 061A  
                   l2875 0034                     l2795 052A                     l2779 04EE  
                   l2789 0512                     l2997 1258                     l2999 1264  
                   ?_pwm 0001                     u1251 0CC6                     _LATA 000F89  
                   u1270 0D00                     _LATB 000F8A                     u2231 0DBA  
                   u3007 014E                     _LATC 000F8B                     u3017 016A  
                   u2321 026E                     _LATE 000F8D                     u2251 0DE2  
                   u1275 0CF8                     u3107 13AC                     u3027 0186  
                   u2331 028A                     u3037 01A2                     u3047 01BE  
                   u3057 01DA                     u3067 01F6                     u3077 0212  
                   u3087 022E                     u3097 1136                     u2820 002C  
                   u2907 0818                     _PEIE 007F96                     u2917 094E  
                   u2927 1386                     _RBIE 007F93                     _RBIF 007F90  
                   u2937 0066                     u2947 0080                     _RCIE 007CED  
                   _RCIF 007CF5                     u2957 009C                     u2967 00B8  
                   u2977 00D4                     _RBIP 007F88                     u2987 00EE  
                   u2997 0132                     _RCIP 007CFD                     _TMR2 000FCC  
        __end_of_UART_Rx 0802                     _main 123E             ___ftpack@arg 0010  
                   _modo 003E                     _mood 0075             ___ftpack@exp 0013  
                   _pwmD 0A6E                     _pwmI 0B92                     fsr0h 000FEA  
                   fsr1h 000FE2                     fsr2h 000FDA                     fsr0l 000FE9  
                   fsr1l 000FE1                     fsr2l 000FD9                     btemp 004F  
                   prodh 000FF4                     prodl 000FF3                     start 000E  
           ___ftmul@cntr 0029             ___param_bank 000000             ___ftmul@sign 002A  
           ___fttol@exp1 001E             ___fttol@lval 001A                    ??_pwm 002B  
                  ?_main 0001          __end_of___ftadd 0470                    ?_pwmD 0001  
                  ?_pwmI 0001          __end_of___ftmul 0E9E          __end_of___fttol 0DAA  
                  _T2CON 000FCA                    _LATB0 007C50                    _LATB1 007C51  
                  _LATB2 007C52                    _LATB3 007C53                    i2l240 07C6  
                  i2l233 07A8                    i2l237 07C2                    _RCREG 000FAE  
                  _RCSTA 000FAB                    _SPBRG 000FAF                    _PORTB 000F81  
                  _TRISA 000F92                    _TRISB 000F93                    _TRISC 000F94  
                  _TRISE 000F96                    _TXSTA 000FAC          __end_of_derecha 13D6  
          ___awtoft@sign 001B                    _atras 137C                    _freno 13EE  
                  _pwmA1 11E8                    _pwmA2 130A                    _pwmB1 1192  
                  _pwmB2 12D0            ___ftpack@sign 0014                    _start 0938  
                  pclath 000FFA                    tablat 000FF5                    status 000FD8  
        __initialization 1292              i2_sensorOFF 13F8             __end_of_main 1292  
           __end_of_pwmD 0B92             __end_of_pwmI 0CB6                   ??_main 0085  
          ___fttol@sign1 0019                   ??_pwmD 002B                   ??_pwmI 002B  
          __activetblptr 000002                ??_UART_Rx 0001                   _ADCON0 000FC2  
                 _ADCON1 000FC1                   _ADCON2 000FC0                   ?_atras 0001  
                 ?_freno 0001                   _ADRESH 000FC4                   _ADRESL 000FC3  
                 ?_pwmA1 0001                   ?_pwmA2 0001                   ?_pwmB1 0001  
                 ?_pwmB2 0001                   _CCPR1L 000FBE                   _CCPR2L 000FBB  
       __end_of___awtoft 137C         __end_of___ftpack 101E                   ?_start 0001  
                 i2l2401 0748                   i2l2405 075A                   i2l2413 077E  
                 i2l2409 076C                   i2l2371 06BA                   i2l2363 0692  
                 i2l2381 06EC                   i2l2365 069C                   i2l2375 06CE  
                 i2l2393 0722                   i2l2385 06FE                   i2l2377 06DA  
                 i2l2369 06B0                   i2l2397 0736                   i2l2389 0710  
       __end_of_adelante 13C8                   _OSCCON 000FD3                   ___ftge 101E  
              ??___ftadd 0077                ??___ftmul 0022                ??___fttol 0014  
                 _manual 0470                   clear_0 12B0                   clear_1 12BC  
              ??_derecha 002B                   _start1 0802                   _start2 1120  
  ___ftmul@f3_as_product 0026             __pdataCOMRAM 004D         __end_of_settings 1120  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
             __accesstop 0060  __end_of__initialization 12C2               ___ftadd@f1 002B  
             ___ftadd@f2 002E               ___ftge@ff1 0010               ___ftge@ff2 0013  
          ___rparam_used 000001               ___awtoft@c 0018               ___ftmul@f1 001C  
             ___ftmul@f2 001F               ___fttol@f1 0010           __pcstackCOMRAM 0001  
          __end_of_atras 13A2            __end_of_freno 13F8            __end_of_pwmA1 123E  
          __end_of_pwmA2 1344            __end_of_pwmB1 11E8            __end_of_pwmB2 130A  
          __end_of_start 0A6E                  ??_atras 002B                  ??_freno 0010  
                ??_pwmA1 0031                  ??_pwmA2 0031                  ??_pwmB1 0031  
                ??_pwmB2 0031                  ??_start 007D               __pbssBANK0 0060  
                ?___ftge 0010                  _CCP1CON 000FBD                  _CCP2CON 000FBA  
                ?_manual 0001                ?___awtoft 0018                ?___ftpack 0010  
                ?_start1 0001                  ?_start2 0001       __size_of_sensorOFF 000A  
              ?_adelante 0001       __size_of_izquierda 000E                  _UART_Rx 0008  
                __Hparam 0000                  __Lparam 0000               _automatico 0012  
           ?i2_sensorOFF 0001                ?_settings 0001          __size_of___ftge 0090  
                ___ftadd 025A                  ___ftmul 0DAA                  ___fttol 0CB6  
        __size_of_manual 01CA                  __pcinit 1292               ??___awtoft 001B  
             ??___ftpack 0015                  __ramtop 0800                  _derecha 13C8  
                __ptext0 123E                  __ptext1 0802                  __ptext2 0938  
                __ptext3 10AE                  __ptext4 0470                  __ptext5 13E4  
                __ptext6 12D0                  __ptext7 1192                  __ptext8 130A  
                __ptext9 11E8          __size_of_start1 0136          __size_of_start2 0072  
             ??_adelante 002B                _T2CONbits 000FCA             __size_of_pwm 00D2  
         __pintcode_body 063A     end_of_initialization 12C2            __Lmediumconst 0000  
                int_func 063A        __end_of_sensorOFF 13EE        __end_of_izquierda 13E4  
             ??_settings 0010                  postinc0 000FEE               _start1$977 007F  
             _start1$978 0082                _PORTBbits 000F81                _TRISCbits 000F94  
            ?_automatico 0001              ___ftmul@exp 0025           __end_of___ftge 10AE  
          __pidataCOMRAM 1402           __end_of_manual 063A           __end_of_start1 0938  
         __end_of_start2 1192      start_initialization 1292              __end_of_pwm 0F70  
               ??___ftge 0016                 ??_manual 0031     __size_ofi2_sensorOFF 000A  
               ??_start1 007D                 ??_start2 002B        __size_of___awtoft 0038  
      __size_of___ftpack 00AE              __pbssCOMRAM 0031        __size_of_adelante 0026  
          __pcstackBANK0 0077      __size_of_automatico 0248                 ?_UART_Rx 0001  
            _ciclo_util1 0069              _ciclo_util2 0066                __pintcode 0008  
               ?___ftadd 002B                 ?___ftmul 001C                 ?___fttol 0010  
      __size_of_settings 0072                 ?_derecha 0001           __size_of_atras 0026  
         __size_of_freno 000A           __size_of_pwmA1 0056           __size_of_pwmA2 003A  
         __size_of_pwmB1 0056           __size_of_pwmB2 003A           __size_of_start 0136  
               _LATAbits 000F89                 _LATEbits 000F8D                 i2u311_47 079A  
               i2u312_47 07B2                _sensorOFF 13E4                _start$975 007F  
              _start$976 0082                _izquierda 13D6               _ADCON0bits 000FC2  
            _conversion1 0037              _conversion2 0034              _conversion3 006C  
       __size_of_UART_Rx 07FA                 __Hrparam 0000             ??_automatico 002D  
               __Lrparam 0000               ?_sensorOFF 0001               ?_izquierda 0001  
       __size_of___ftadd 0216         __size_of___ftmul 00F4         __size_of___fttol 00F4  
               ___awtoft 1344                 ___ftpack 0F70         __size_of_derecha 000E  
               _adelante 13A2                 __ptext10 025A                 __ptext11 13C8  
               __ptext20 13EE                 __ptext12 0A6E                 __ptext21 13A2  
               __ptext13 137C                 __ptext22 0E9E                 __ptext14 0012  
               __ptext23 0CB6                 __ptext15 1120                 __ptext24 0DAA  
               __ptext16 1344                 __ptext25 0F70                 __ptext17 13D6  
               __ptext18 0B92                 __ptext27 13F8                 __ptext19 101E  
     __end_of_automatico 025A              _duty_cicle1 004A              _duty_cicle2 0047  
          __size_of_main 0054            __size_of_pwmD 0124            __size_of_pwmI 0124  
               _settings 10AE                 int$flags 004F                 intlevel2 0000  
          ??i2_sensorOFF 0001              ??_sensorOFF 0010              ??_izquierda 002B  
    __CFG_FOSC$INTOSC_HS 000000  
