#include <xc.h>//libreria
#include <string.h>// Libreria cadena de caracteres  
#include <stdio.h>//libreria


#pragma config FOSC = INTOSC_HS//Configuracion de la Frecuencia interna
#pragma config WDT = OFF//perro guardian
#pragma config LVP = OFF//Voltajes bajos

#define _XTAL_FREQ 8000000//Frecuencia
#define time 10//tiempo

//LCD constantes
#define CD 0x01//limpiador display
#define RH 0x03//Retorno a casa (dont care) vuelve a la posicion inicial
#define EMS 0x06//configuración de entrada ID 1 incremento 0 decrementando izq a der
#define DC 0x0E//control del display(3 bits) 1 cons on/of  D parpadeo del cursor d es 0 apaga o enciende la panta c enciende el cursor
#define DSr 0x1C//Configurar el display del cursor derecha 4 primeros constantes  0b0001 11-- R/s=1 desplazamiento der
#define DSl 0x18//Configurar el display del cursor izquierda    r/l=0 desplazamiento izq
#define FS 0x28//Configurar la interfaz de la longitud del display 3 constantes DL = 0 son 4 bits, DL=1 8bits... se trabaja con 2 lineas y se trabaja 5*8 el cuadro
#define RAW1 0x80//Configurar la direccion donde se envia el dato que se quiere escribir en la lcd
#define RAW2 0xC0//Configurar la direccion donde se envia el dato que se quiere escribir en la lcd
#define RS LATE2// se define el puerto E
#define E LATE1// se define el puerto E

//constantes (MOTOR)
#define in1 LATB0
#define in2 LATB1
#define in3 LATB2
#define in4 LATB3 

void settings(void); //funcion configuraciones principales

void __interrupt(high_priority) UART_Rx(void); //Función de interrupción
void __interrupt(low_priority) sensor(void);
void start(void); //Funciones ADC
void adelante(void); //funciones auxiliares
void atras(void);
void derecha(void);
void izquierda(void);
void freno(void);
void sensorOFF(void);
void pwm(void);
void pwmD(void);
void pwmI(void);
void pwmA1(void);
void pwmA2(void);
void pwmB1(void);
void pwmB2(void);

void settingsLCD(unsigned char m);
void writeLCD(unsigned char m);
void LCD(unsigned char m);
void DataLCD(void);
void Data1LCD(void);
void Data2LCD(void);
//modos
void manual(void);
void automatico(void);

int i, x, modo, PWM = 0, mood = 0, z;
int y = 1;
int a, s = 0, m;
char texto[] = {"Felipe Castaneda y Alejo Reyes"}; // 1 arreglo variable de caracteres
char texto1[20];
char texto2[20];
float duty_cicle1, duty_cicle2;
float conversion1, conversion2, conversion3, ciclo_util1, ciclo_util2, d1, d2, c, b;
int n = 0;

void main(void) {//funcion principal
    settings(); //funcion configuraciones
    while (1) {
        Data1LCD();
        Data2LCD();
        if (mood == 1) {
            if (s == 0) { //hay presencia
                LATAbits.LA5 = 1;
                LATEbits.LATE0 = 0;
                manual();
                LATBbits.LB0 = 0;
            } else if (s == 1) { //no hay presencia
                sensorOFF();
                LATBbits.LB0 = 1;
            }
        } else if (mood == 2) {
            if (s == 0) { //hay presencia
                LATAbits.LA5 = 0;
                LATEbits.LATE0 = 1;
                automatico();
                LATBbits.LB0 = 0;
            } else if (s == 1) { //no hay presencia
                sensorOFF();
                LATBbits.LB0 = 1;
            }
        }
    }
}

void settings(void) {//funcion configuraciones
    OSCCON = 0x72; //configurar la oscilacion interna 7= bit de reposos en 0 y 111= 8MHz - 2= oscilador timer 1

    ADCON0 = 0x01;
    ADCON1 = 0x0E;
    ADCON2 = 0x90;

    TRISB = 0xF0; //Define (0b11110000)
    LATB = 0xF0; //(0b11110000)
    TRISA = 0x00;
    LATA = 0x00;
    TRISE = 0;
    LATE = 0;
    TRISD = 0x00;
    LATD = 0X00;
    TRISC = 0; //puerto C como salida
    LATC = 0;

    //LCD se configura
    settingsLCD(0x02); //nibbles (4MSB y 4LSB)
    settingsLCD(EMS);
    settingsLCD(DC);
    settingsLCD(FS);
    //DataLCD();

    //PWM
    PR2 = 0x7C; //registro TMR2 de 8 bits a 1ms
    T2CON = 0x03; //bit 7 dont care, bit 6-3 -> post escala 1:1, bit 2 activa el TMR2ON  Bit 1-0 Pre-scaler 16
    CCPR1L = 0x7D; //ciclo util inicial de 100%    
    CCP1CON = 0x0C; //bit 7-6 -> dont care, bit 5-4 -> receptores modo pwm CCPR1L, bit 3-0 -> PWM mode
    CCPR2L = 0x7D; //ciclo util inicial de 100%
    CCP2CON = 0x0C; //bit 7-6 -> dont care, bit 5-4 -> receptores modo pwm CCPR1L, bit 3-0 -> PWM mode (aunque los CCP2MX se apagan)

    //comucacion UART
    TRISCbits.RC7 = 1; //RX entrada
    TRISCbits.RC6 = 0; //TX salida
    SPBRG = 0x0C; //registro que permite configurar la velocidad de transmisión de los datos en la comunicación serial(8MHz/64*9600=0C)
    RCSTA = 0x90; //recepcion de datos(trabaja el puerto serial,8 bits,[dont care],asincrono=1, sin direccioniento, 2-1-0 de lectura)
    TXSTA = 0x20; //transmision de datos(habilita la transmision)

    //interrupcion
    INTCONbits.GIEH = 1; //interrupcion general
    INTCONbits.GIEL = 1;
    RCONbits.IPEN = 1;
    PEIE = 1; //interrupciones perifericas
    //IPEN = 1;

    //interrupcion UART
    RCIE = 1; //habilita la interrupcion de recepcion
    RCIF = 0; //bandera de recepcion(1=lleno/ se limpia automatico cuando se lee)
    RCIP = 1;

    //interrupcion RB
    RBIE = 1;
    RBIF = 0;
    RBIP = 0;

    //ADC
    ADCON0bits.GO = 1; //habilita la conversion en el ADCON0

    TMR2 = 0; //valor inicial
    T2CONbits.TMR2ON = 1; //enciende el TMR2
}

void start(void) {
    ADCON0bits.GO = 1; //habilita la conversion en el ADCON0
    while (GO == 1); //mientras se ejecute el factor de conversion
    if (x == 2) {//nueva condicion dependiendo de la variable anterior
        __delay_ms(time); //tiempo
        a = ADRESH << 8 | ADRESL; //con esta operacion se justifica el bit 7 del ADCON2 (ADFM = todos los 10 bits del conversor a la derecha)
        b = (float) a * (5.0 / 1023.0); //operacion conversora (el valor de a es el valor del conversor, h es un rango y 1023 es el valor maximo del conversor)
        __delay_us(3); // Para comenzar la siguiente adquisición se requiere un tiempo mínimo de 3 TAD
    }
}

void __interrupt(high_priority) UART_Rx(void) {//bandera
    if (RCIF == 1) {//bandera/ ocurrio algo
        a = RCREG; //x es = al registro de recepcion guardando bits del modulo EUSART
        if (a == 'm' || a == 'M') {//cuando a es 0
            mood = 1;
        } else if (a == 'a' || a == 'A') {
            mood = 2;
        } else if (a == 's' || a == 'S') {
            mood = 3;
        } else if (a == '0') {
            modo = 0;
        } else if (a == '1') {
            modo = 1;
        } else if (a == '2') {
            modo = 2;
        } else if (a == '3') {
            modo = 3;
        } else if (a == '4') {
            modo = 4;
        } else if (a == '5') {
            PWM = 1;
        } else if (a == '6') {
            PWM = 2;
        } else if (a == '7') {
            PWM = 3;
        } else if (a == '8') {
            PWM = 4;
        }
    }
}

void __interrupt(low_priority) sensor(void) {
    if (RBIF) {//habilita la bandera osea cumple condicion
        RBIF = 0; //apaga la bandera
        if ((PORTB & 0xF0) != 0x00) {//flanco de subida (no hay presencia)
            LATAbits.LA4 = 0;
            s = 0;
        } else if ((PORTB & 0xF0) != 0xF0) {//flanco de bajada (hay presencia)
            LATAbits.LA4 = 1;
            s = 1;
        }
    }
}

void settingsLCD(unsigned char m) { //8bits
    RS = 0; //guardar y configurar
    LCD(m >> 4); //se hace dezplazamiento y se deja atras los 4 0b1010 0111 >>4 = 0b0000 1010
    LCD(m & 0x0F); //and 4 menos significativos 0b1010 0111 &  0b000 1111 =0b0000 0111
}

void writeLCD(unsigned char m) {//8 bits
    RS = 1; //escribir
    LCD(m >> 4); //se hace dezplazamiento y se deja atras los 4 0b1010 0111 >>4 = 0b0000 1010
    LCD(m & 0x0F); //and 4 menos significativos 0b1010 0111 &  0b000 1111 =0b0000 0111
}

void LCD(unsigned char m) {
    E = 1; //para que habilite
    __delay_us(10);
    LATD = m; // escriba la variable
    __delay_us(10); //antirebote
    E = 0; // apaga
    __delay_us(10);
}

void automatico(void) {
    start();
    while (b >= 4.5) {
        start();
    }
    adelante();
    __delay_ms(2400);
    freno();
    __delay_ms(2000);
    izquierda();
    __delay_ms(800);
    freno();
    __delay_ms(2000);
    adelante();
    __delay_ms(2200);
    freno();
    __delay_ms(2900);
    start();

    while (b < 4.5) {
        start();
    }
    izquierda();
    __delay_ms(800);
    freno();
    __delay_ms(2000);
    adelante();
    __delay_ms(1900);
    freno();
    __delay_ms(2000);
    izquierda();
    __delay_ms(800);
    freno();
    __delay_ms(2000);
    adelante();
    __delay_ms(1800);
    freno();
    __delay_ms(2000);
    izquierda();
    __delay_ms(800);
    freno();
    __delay_ms(5000);
    freno();
}

void manual(void) {
    if (modo == 0) {
        freno();
    } else if (modo == 1) {
        adelante();
        if (PWM == 1) {
            pwmA1();
            PWM = 0;
        } else if (PWM == 2) {
            pwmA2();
            PWM = 0;
        } else if (PWM == 3) {
            pwmB1();
            PWM = 0;
        } else if (PWM == 4) {
            pwmB2();
            PWM = 0;
        }
    } else if (modo == 2) {
        atras();
        if (PWM == 1) {
            pwmA1();
            PWM = 0;
        } else if (PWM == 2) {
            pwmA2();
            PWM = 0;
        } else if (PWM == 3) {
            pwmB1();
            PWM = 0;
        } else if (PWM == 4) {
            pwmB2();
            PWM = 0;
        }
    } else if (modo == 3) {
        derecha();
        if (PWM == 1) {
            pwmA1();
            PWM = 0;
        } else if (PWM == 2) {
            pwmA2();
            PWM = 0;
        } else if (PWM == 3) {
            pwmB1();
            PWM = 0;
        } else if (PWM == 4) {
            pwmB2();
            PWM = 0;
        }
    } else if (modo == 4) {
        izquierda();
        if (PWM == 1) {
            pwmA1();
            PWM = 0;
        } else if (PWM == 2) {
            pwmA2();
            PWM = 0;
        } else if (PWM == 3) {
            pwmB1();
            PWM = 0;
        } else if (PWM == 4) {
            pwmB2();
            PWM = 0;
        }
    }
}

void DataLCD(void) {//Texto funcion de los nombres
    settingsLCD(RAW1); //definir en que linea va a ir posicion 0
    for (i = 0; i < strlen(texto); i++) {//condicion
        writeLCD(texto[i]); //imprimir
    }
}

void Data1LCD(void) {//funcion auxiliar de impresion
    settingsLCD(RAW1); //posicion 10 linea superior
    sprintf(texto1, "mood: %d", mood); //transformacion caracteres variables
    for (i = 0; i <= strlen(texto1); i++) {//bucle para el string
        writeLCD(texto1[i]); //funcion de escritur
    }
}

void Data2LCD(void) {//funcion auxiliar de impresion
    settingsLCD(RAW2); //posicion 10 linea superior
    sprintf(texto1, "modo: %d", modo); //transformacion caracteres variables
    for (i = 0; i <= strlen(texto1); i++) {//bucle para el string
        writeLCD(texto1[i]); //funcion de escritur
    }
}

void pwm(void) {
    if (y == 1) {
        duty_cicle1 = 511.2;
        y = 2;
        y = 3;
    }
    conversion1 = (float) duty_cicle1 * (500.0 / 1023.0);
    CCPR1L = (int) conversion1 >> 2;
    CCP1CON = (CCP1CON & 0x0F) | (((int) conversion1 & 0x03) << 4);
    CCPR2L = (int) conversion1 >> 2;
    CCP2CON = (CCP1CON & 0x0F) | (((int) conversion1 & 0x03) << 4);
}

void pwmI(void) {
    if (y == 2) {
        duty_cicle1 = 190;
        duty_cicle2 = 373.3;
        y = 1;
        y = 3;
    }
    conversion1 = (float) duty_cicle1 * (500.0 / 1023.0);
    CCPR1L = (int) conversion1 >> 2;
    CCP1CON = (CCP1CON & 0x0F) | (((int) conversion1 & 0x03) << 4);
    conversion2 = (float) duty_cicle2 * (500.0 / 1023.0);
    CCPR2L = (int) conversion2 >> 2;
    CCP2CON = (CCP1CON & 0x0F) | (((int) conversion2 & 0x03) << 4);
    if (conversion1 >= conversion2) {
        conversion1 - 1;
    }
}

void pwmD(void) {
    if (y == 3) {
        duty_cicle1 = 373.3;
        duty_cicle2 = 190;
        y = 1;
        y = 2;
    }
    conversion1 = (float) duty_cicle1 * (500.0 / 1023.0);
    CCPR1L = (int) conversion1 >> 2;
    CCP1CON = (CCP1CON & 0x0F) | (((int) conversion1 & 0x03) << 4);
    conversion2 = (float) duty_cicle2 * (500.0 / 1023.0);
    CCPR2L = (int) conversion2 >> 2;
    CCP2CON = (CCP1CON & 0x0F) | (((int) conversion2 & 0x03) << 4);
    if (conversion1 <= conversion2) {
        conversion2 - 102.3;
    }
}

void pwmA1(void) {
    duty_cicle1 = duty_cicle1 + 102.3;
    if (duty_cicle1 > 1023.0) {
        duty_cicle1 = 1023.0;
    }
}

void pwmA2(void) {
    duty_cicle1 = duty_cicle1 - 102.3;
    if (duty_cicle1 < 0) {
        duty_cicle1 = 0;
    }
}

void pwmB1(void) {
    duty_cicle2 = duty_cicle2 + 102.3;
    if (duty_cicle2 > 1023.0) {
        duty_cicle2 = 1023.0;
    }
}

void pwmB2(void) {
    duty_cicle2 = duty_cicle2 - 102.3;
    if (duty_cicle2 < 0) {
        duty_cicle2 = 0;
    }
}

void adelante(void) {//Funciones de motor
    __delay_ms(100);
    pwm();
    in1 = 1;
    in2 = 0;
    in3 = 1;
    in4 = 0;
}

void atras(void) {
    __delay_ms(100);
    pwm();
    in1 = 0;
    in2 = 1;
    in3 = 0;
    in4 = 1;
}

void derecha(void) {
    pwmD();
    in1 = 1;
    in2 = 0;
    in3 = 1;
    in4 = 0;
}

void izquierda(void) {
    pwmI();
    in1 = 1;
    in2 = 0;
    in3 = 1;
    in4 = 0;
}

void freno(void) {
    in1 = 0;
    in2 = 0;
    in3 = 0;
    in4 = 0;
}

void sensorOFF(void) {
    in1 = 0;
    in2 = 0;
    in3 = 0;
    in4 = 0;
}
